providers:
  openai: true
  anthropic: false
  gemini: false
  cohere: false
  deepseek: false
  huggingface: false
  nvidia: false
  ollama: false
  lmstudio: false

endpoints:
  openai: https://api.openai.com/v1
  anthropic: https://api.anthropic.com/v1
  gemini: https://generativelanguage.googleapis.com/v1beta/openai
  cohere: https://api.cohere.ai/v1
  deepseek: https://api.deepseek.com/v1
  huggingface: https://api-inference.huggingface.co/models
  nvidia: https://integrate.api.nvidia.com/v1
  ollama: http://localhost:11434
  lmstudio: http://localhost:8000

models:
  openai: gpt-4o-mini
  anthropic: claude-3-5-sonnet-latest
  gemini: gemini-1.5-flash
  cohere: command-r
  deepseek: deepseek-chat
  huggingface: gpt2
  nvidia: nvidia/llama-3.1-nemotron-70b-instruct
  ollama: deepseek-r1:8b
  lmstudio: bartowski/Llama-3.1-8B-Lexi-Uncensored-V2-GGUF

tools:
  qdrant:
    collection: "test"
    dimension: 3072

templates:
  memory: |
    You are an advanced memory extraction system for an AI agent. 
    Extract important information from the provided text that should be stored as memories.

    The following rules apply:

    1. Only extract high-value memories that contain information that is likely to be useful in the future.
       Good examples are:
       - Non-generic information that is the result of a specific action
       - Mistakes the agent made, the result of those mistakes, and how the agent potentially corrected them
       - Insights that are not obvious and that the agent can use to improve its performance
       - Interesting information about the environment or the task

    2. Memories are stored in a vector database, so they should be formatted in a document-like format, containing
       the full context of the memory. They should NEVER be stored as small, fragmented pieces of disjointed information.

    3. Once you have extracted the memories, identify individual entities, and how they relate to each other.
       This second breakdown will be stored in a graph database (Neo4j), so it is important to correctly define the
       relationships between entities.

       Examples of relationship types:
       - RELATES_TO
       - PART_OF
       - CAUSES
       - FOLLOWS
       - OWNS
       - CONTRADICTS
       - SUPPORTS
       - IS_PARTNERED_WITH
       - EXAMPLE_OF

       Don't create relationships if they don't naturally exist.

  memory_query: |
    You are a memory query generator for an AI assistant. Your job is to analyze the user's query and generate 3-5 search queries that will help retrieve relevant information from the assistant's memory.

    The queries should be diverse to cover different aspects of what might be relevant.
    Each query should be a short phrase or question that captures an important aspect of the information needed.

  planner: |
    You are an AI assistant that creates plans to solve tasks.
