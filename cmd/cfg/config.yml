providers:
  openai: true
  anthropic: false
  gemini: false
  cohere: false
  deepseek: false
  huggingface: false
  nvidia: false
  ollama: false
  lmstudio: false

endpoints:
  openai: https://api.openai.com/v1
  anthropic: https://api.anthropic.com/v1
  gemini: https://generativelanguage.googleapis.com/v1beta/openai
  cohere: https://api.cohere.ai/v1
  deepseek: https://api.deepseek.com/v1
  huggingface: https://api-inference.huggingface.co/models
  nvidia: https://integrate.api.nvidia.com/v1
  ollama: http://localhost:11434
  lmstudio: http://localhost:8000

models:
  openai: gpt-4o-mini
  anthropic: claude-3-5-sonnet-latest
  gemini: gemini-1.5-flash
  cohere: command-r
  deepseek: deepseek-chat
  huggingface: gpt2
  nvidia: nvidia/llama-3.1-nemotron-70b-instruct
  ollama: deepseek-r1:8b
  lmstudio: bartowski/Llama-3.1-8B-Lexi-Uncensored-V2-GGUF

settings:
  defaults:
    provider: openai
    temperature: 0.7
    top_p: 1.0
    top_k: 40
    presence_penalty: 0.0
    frequency_penalty: 0.0
    max_tokens: 1024
    stop_sequences: []
    stream: true
    platform:
      os: linux
      arch: arm64
      variant: v8
    system_prompt:
      default: |
        You are an advanced AI agent with the ability to use tools to help you achieve your goals.
        The system you operate in is a recursive environment, where you are enabled to iterate on your
        task.

        This means that you are highly encouraged to work in small, singular steps, and break down your
        task into smaller, more manageable pieces.

        Iteration should give you the freedom to try out different approaches, and to explore different
        angles of the task, without being constrained by the need to complete the task in a single step.

        You are also encouraged to use the tools available to you, and to use them in combination with each other,
        to achieve your goals.

        Precision is more important than completeness. Do not make any assumptions, and do not skip any steps.

      code: |
        You are an advanced AI agent with the ability to use tools to help you achieve your goals.
        The system you operate in is a recursive environment, where you are enabled to iterate on your
        task.

        This means that you are highly encouraged to work in small, singular steps, and break down your
        task into smaller, more manageable pieces.

        Iteration should give you the freedom to try out different approaches, and to explore different
        angles of the task, without being constrained by the need to complete the task in a single step.

        You are also encouraged to use the tools available to you, and to use them in combination with each other,
        to achieve your goals.

        Precision is more important than completeness. Do not make any assumptions, and do not skip any steps.

  global:
    iteration_limit: 10

tools:
  qdrant:
    host: localhost
    port: 6334
    api_key: "gKzti5QyA5KeLQYQFLA1T6pT3GYE9pza"
    collection: "longterm"
    dimension: 3072
  schemas:
    memory:
      function:
        name: "memory"
        description: "A tool which can interact with various memory stores through a unified interface."
      properties:
        operation:
          type: "string"
          description: "The operation to perform on the memory."
          options: ["read", "write"]
        question:
          type: "string"
          description: "A question which is used to retrieve information from a vector database."
        keywords:
          type: "string"
          description: "A comma separated list of keywords which are used to retrieve information from all memory stores."
        cypher:
          type: "string"
          description: "A Cypher query which is used to retrieve from or store to a graph database. Useful when you're dealing with relational data."
        documents:
          type: "string"
          description: 'A JSON array of documents to store in the vector database. Follow this format: [{"content": "...", "metadata": {"<key>": "<value>", ...}, ...}]'
    environment:
      function:
        name: "environment"
        description: "A tool which gives you a full Linux terminal-based environment to interact with. You are directly connected to stdin, stdout, and stderr."
      properties:
        command:
          type: "string"
          description: "A valid bash command to execute in the environment."
        input:
          type: "string"
          description: "Valid input to pass to the environment, used for interactive sessions."
    editor:
      function:
        name: "editor"
        description: "A tool which can edit files in the workspace with special support for code editing."
      properties:
        file:
          type: "string"
          description: "The file to edit."
        operation:
          type: "string"
          description: "The operation to perform."
          options:
            [
              "read",
              "write",
              "delete",
              "replace_lines",
              "insert_lines",
              "delete_lines",
              "read_lines",
            ]
        content:
          type: "string"
          description: "The content to write to the file. For line operations, this can be multiple lines separated by newlines."
        start_line:
          type: "number"
          description: "The line number to start the operation from (1-based indexing)."
        end_line:
          type: "number"
          description: "The line number to end the operation at (1-based indexing, inclusive)."
        line_number:
          type: "number"
          description: "The line number for single-line operations like insertion (1-based indexing)."
      required: ["file", "operation"]
    browser:
      function:
        name: "browser"
        description: "A fully featured Chrome browser."
      properties:
        url:
          type: "string"
          description: "The URL to navigate to."
        operation:
          type: "string"
          description: "The operation to perform on the page you are navigating to."
          options: ["get_content", "get_links"]
      required: ["url", "operation"]
    github:
      function:
        name: "github"
        description: "A tool for interacting with GitHub."
      properties:
        operation:
          type: "string"
          description: "The operation to perform."
          options:
            [
              "get_repositories",
              "get_repository",
              "create_repository",
              "list_branches",
              "get_contents",
              "list_pull_requests",
              "get_pull_request",
              "create_pull_request",
              "update_pull_request",
              "list_issues",
              "get_issue",
              "create_issue",
              "update_issue",
              "create_pr_comment",
              "list_pr_comments",
              "create_pr_review",
              "list_pr_reviews",
              "create_review_comment",
              "list_review_comments",
            ]
      required: ["operation"]
    azure:
      function:
        name: "azure"
        description: "A tool for interacting with Azure DevOps Boards and Wikis."
      properties:
        operation:
          type: "string"
          description: "The operation to perform."
          options:
            [
              "create_work_item",
              "update_work_item",
              "get_work_item",
              "list_work_items",
              "create_wiki_page",
              "update_wiki_page",
              "get_wiki_page",
              "list_wiki_pages",
            ]
      required: ["operation"]
    trengo:
      function:
        name: "trengo"
        description: "A tool for interacting with Trengo."
      properties:
        operation:
          type: "string"
          description: "The operation to perform."
          options:
            [
              "list_tickets",
              "create_ticket",
              "assign_ticket",
              "close_ticket",
              "reopen_ticket",
              "list_labels",
              "get_label",
              "create_label",
              "update_label",
              "delete_label",
            ]
      required: ["operation"]
    slack:
      function:
        name: "slack"
        description: "A tool for interacting with Slack workspaces and channels."
      properties:
        operation:
          type: "string"
          description: "The operation to perform."
          options:
            [
              "post_message",
              "upload_file",
              "add_reaction",
              "remove_reaction",
              "get_channel_info",
              "list_channels",
              "create_channel",
              "archive_channel",
              "unarchive_channel",
              "get_thread_replies",
              "search_messages",
              "update_message",
              "delete_message",
            ]
        channel:
          type: "string"
          description: "The channel ID to perform the operation in."
        text:
          type: "string"
          description: "The text content for message operations."
        thread_ts:
          type: "string"
          description: "The timestamp of a message to thread replies to."
        blocks:
          type: "string"
          description: "JSON string of Slack blocks for rich message formatting."
        attachments:
          type: "string"
          description: "JSON string of Slack attachments for message attachments."
        file:
          type: "string"
          description: "File path for file upload operations."
        reaction:
          type: "string"
          description: "Emoji reaction to add or remove from a message."
      required: ["operation"]
    system:
      function:
        name: "system"
        description: |
          A tool for low-level system operations.

          You can use the `inspect` command to get a list of all the agents and topics in the system.
          You can use the `send` command to send a message to an agent or topic.
          You can use the `break` command to break out of the current iteration loop.
      properties:
        command:
          type: "string"
          description: "The top-level command to execute."
          options: ["inspect", "send", "break"]
        inspect_arg:
          type: "string"
          description: "Arguments for the inspect command."
          options: ["agents", "topics"]
        send_to_arg:
          type: "string"
          description: "The name of the agent or topic to send a message to"
        message_arg:
          type: "string"
          description: "The message to send to the agent or topic"
      required: ["command"]

templates:
  memory: |
    You are an advanced memory extraction system for an AI agent. 
    Extract important information from the provided text that should be stored as memories.

    The following rules apply:

    1. Only extract high-value memories that contain information that is likely to be useful in the future.
       Good examples are:
       - Non-generic information that is the result of a specific action
       - Mistakes the agent made, the result of those mistakes, and how the agent potentially corrected them
       - Insights that are not obvious and that the agent can use to improve its performance
       - Interesting information about the environment or the task

    2. Memories are stored in a vector database, so they should be formatted in a document-like format, containing
       the full context of the memory. They should NEVER be stored as small, fragmented pieces of disjointed information.

    3. Once you have extracted the memories, identify individual entities, and how they relate to each other.
       This second breakdown will be stored in a graph database (Neo4j), so it is important to correctly define the
       relationships between entities.

       NOTE: Entities should never be grouped together in a single node, they should always be stored as separate nodes,
             and connected by relationships.

       Examples of relationship types:
       - RELATES_TO
       - PART_OF
       - CAUSES
       - FOLLOWS
       - OWNS
       - CONTRADICTS
       - SUPPORTS
       - IS_PARTNERED_WITH
       - EXAMPLE_OF

    4. Don't create relationships if they don't naturally exist.

  memory_manager:
    query: |
      You are an advanced memory manager for an AI agent.

      You will be given a list of messages, and you need to determine the best way to query the memory
      to retrieve the most relevant information, based on the message content.

    mutate: |
      You are an advanced memory manager for an AI agent.

      You will be given a full context, and you need to determine the parts of the context that are useful,
      and interesting to store as memories.

      You also need to segment and format the memories you decide to store in a way that is optimal for
      the memory store being used.

      For example, when storing vector memories, you should always store larger chunks of text, and not
      just small fragments of information.

      On the other hand, when storing graph memories, you should always store the relationships between entities,
      and not just the entities themselves, and always make sure you store individual entities as separate nodes,
      and not grouped together in a single node.

      Finally, make sure you include any relevant metadata about the memory, such as the source of the memory,
      and any other relevant information. Timestamps, and any information about the system internals, such as
      agent details, are handled by the memory store, so you don't need to worry about them.

  planner: |
    You are an advanced AI planning agent that can create detailed step-by-step plans to achieve goals.

    For any task you receive, carefully analyze what needs to be done and create a logical, structured plan.

    This about the overall goal, and the steps needed to achieve it, including the order in which to perform them.

    Finally, consider the acceptance criteria for each step.

    After you have created the plan, the process might iterate a few times, upon which you should evaluate
    the agent's performance, and the plan's effectiveness, and update the next steps accordingly.

  optimizer: |
    You are an AI optimizer that improves the performance of an AI agent.

    After the agent has executed a task, analyze the results and the conversation history to identify
    opportunities for improvement.

    For each opportunity for improvement, suggest a specific change to the agent's behavior or tools.

  researcher: |
    You are an advanced AI researcher, tasked with researching a specific topic.

    Examine the context provided to you, which may have been enhanced by the memory and planning agents,
    and compile a comprehensive report, aligned with the current task.

    You have various tools at your disposal, including a web search tool, a browser tool, and a system tool.

    You can use the web search tool to search the web for information, and the browser tool to navigate the web.

  iteration: |
    You will be placed into an iteration loop, allowing you to iterate and refine your final response.

    Use the system tool, and the break command, to break out of the iteration loop when you believe you have
    finished your research.
