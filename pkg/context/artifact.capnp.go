// Code generated by capnpc-go. DO NOT EDIT.

package context

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Artifact capnp.Struct

// Artifact_TypeID is the unique identifier for the type Artifact.
const Artifact_TypeID = 0xe06c5d609cc2ad3c

func NewArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 6})
	return Artifact(st), err
}

func NewRootArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 6})
	return Artifact(st), err
}

func ReadRootArtifact(msg *capnp.Message) (Artifact, error) {
	root, err := msg.Root()
	return Artifact(root.Struct()), err
}

func (s Artifact) String() string {
	str, _ := text.Marshal(0xe06c5d609cc2ad3c, capnp.Struct(s))
	return str
}

func (s Artifact) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact) DecodeFromPtr(p capnp.Ptr) Artifact {
	return Artifact(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Artifact) HasModel() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Artifact) SetModel(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Artifact) Messages() (Message_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Message_List(p.List()), err
}

func (s Artifact) HasMessages() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Artifact) SetMessages(v Message_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated Message_List, preferring placement in s's segment.
func (s Artifact) NewMessages(n int32) (Message_List, error) {
	l, err := NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Artifact) Tools() (Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Tool_List(p.List()), err
}

func (s Artifact) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Artifact) SetTools(v Tool_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated Tool_List, preferring placement in s's segment.
func (s Artifact) NewTools(n int32) (Tool_List, error) {
	l, err := NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Artifact) Process() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return []byte(p.Data()), err
}

func (s Artifact) HasProcess() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Artifact) SetProcess(v []byte) error {
	return capnp.Struct(s).SetData(4, v)
}

func (s Artifact) Temperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Artifact) SetTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Artifact) TopP() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Artifact) SetTopP(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Artifact) TopK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Artifact) SetTopK(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Artifact) PresencePenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Artifact) SetPresencePenalty(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Artifact) FrequencyPenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Artifact) SetFrequencyPenalty(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Artifact) MaxTokens() int32 {
	return int32(capnp.Struct(s).Uint32(40))
}

func (s Artifact) SetMaxTokens(v int32) {
	capnp.Struct(s).SetUint32(40, uint32(v))
}

func (s Artifact) StopSequences() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return capnp.TextList(p.List()), err
}

func (s Artifact) HasStopSequences() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Artifact) SetStopSequences(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewStopSequences sets the stopSequences field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Artifact) NewStopSequences(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}
func (s Artifact) Stream() bool {
	return capnp.Struct(s).Bit(352)
}

func (s Artifact) SetStream(v bool) {
	capnp.Struct(s).SetBit(352, v)
}

// Artifact_List is a list of Artifact.
type Artifact_List = capnp.StructList[Artifact]

// NewArtifact creates a new list of Artifact.
func NewArtifact_List(s *capnp.Segment, sz int32) (Artifact_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 6}, sz)
	return capnp.StructList[Artifact](l), err
}

// Artifact_Future is a wrapper for a Artifact promised by a client call.
type Artifact_Future struct{ *capnp.Future }

func (f Artifact_Future) Struct() (Artifact, error) {
	p, err := f.Future.Ptr()
	return Artifact(p.Struct()), err
}

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xbde7793642e0e8a6

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xbde7793642e0e8a6, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type Tool capnp.Struct

// Tool_TypeID is the unique identifier for the type Tool.
const Tool_TypeID = 0x957681fcc61aa8e7

func NewTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Tool(st), err
}

func NewRootTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Tool(st), err
}

func ReadRootTool(msg *capnp.Message) (Tool, error) {
	root, err := msg.Root()
	return Tool(root.Struct()), err
}

func (s Tool) String() string {
	str, _ := text.Marshal(0x957681fcc61aa8e7, capnp.Struct(s))
	return str
}

func (s Tool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tool) DecodeFromPtr(p capnp.Ptr) Tool {
	return Tool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tool) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tool) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tool) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tool) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Tool) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Tool) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Tool) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Tool) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Tool) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Tool) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Tool) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Tool) SetDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Tool) Parameters() (Parameter_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return Parameter_List(p.List()), err
}

func (s Tool) HasParameters() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Tool) SetParameters(v Parameter_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewParameters sets the parameters field to a newly
// allocated Parameter_List, preferring placement in s's segment.
func (s Tool) NewParameters(n int32) (Parameter_List, error) {
	l, err := NewParameter_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Parameter_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Tool_List is a list of Tool.
type Tool_List = capnp.StructList[Tool]

// NewTool creates a new list of Tool.
func NewTool_List(s *capnp.Segment, sz int32) (Tool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Tool](l), err
}

// Tool_Future is a wrapper for a Tool promised by a client call.
type Tool_Future struct{ *capnp.Future }

func (f Tool_Future) Struct() (Tool, error) {
	p, err := f.Future.Ptr()
	return Tool(p.Struct()), err
}

type Parameter capnp.Struct

// Parameter_TypeID is the unique identifier for the type Parameter.
const Parameter_TypeID = 0xe9d1078528b68839

func NewParameter(s *capnp.Segment) (Parameter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Parameter(st), err
}

func NewRootParameter(s *capnp.Segment) (Parameter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Parameter(st), err
}

func ReadRootParameter(msg *capnp.Message) (Parameter, error) {
	root, err := msg.Root()
	return Parameter(root.Struct()), err
}

func (s Parameter) String() string {
	str, _ := text.Marshal(0xe9d1078528b68839, capnp.Struct(s))
	return str
}

func (s Parameter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Parameter) DecodeFromPtr(p capnp.Ptr) Parameter {
	return Parameter(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Parameter) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Parameter) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Parameter) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Parameter) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Parameter) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Parameter) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Parameter) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Parameter) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Parameter) Properties() (Property_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Property_List(p.List()), err
}

func (s Parameter) HasProperties() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Parameter) SetProperties(v Property_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Property_List, preferring placement in s's segment.
func (s Parameter) NewProperties(n int32) (Property_List, error) {
	l, err := NewProperty_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Property_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Parameter) Required() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Parameter) SetRequired(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Parameter) AdditionalProperties() bool {
	return capnp.Struct(s).Bit(1)
}

func (s Parameter) SetAdditionalProperties(v bool) {
	capnp.Struct(s).SetBit(1, v)
}

// Parameter_List is a list of Parameter.
type Parameter_List = capnp.StructList[Parameter]

// NewParameter creates a new list of Parameter.
func NewParameter_List(s *capnp.Segment, sz int32) (Parameter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Parameter](l), err
}

// Parameter_Future is a wrapper for a Parameter promised by a client call.
type Parameter_Future struct{ *capnp.Future }

func (f Parameter_Future) Struct() (Parameter, error) {
	p, err := f.Future.Ptr()
	return Parameter(p.Struct()), err
}

type Property capnp.Struct

// Property_TypeID is the unique identifier for the type Property.
const Property_TypeID = 0x8ee1a1c9c44e0dac

func NewProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Property(st), err
}

func NewRootProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Property(st), err
}

func ReadRootProperty(msg *capnp.Message) (Property, error) {
	root, err := msg.Root()
	return Property(root.Struct()), err
}

func (s Property) String() string {
	str, _ := text.Marshal(0x8ee1a1c9c44e0dac, capnp.Struct(s))
	return str
}

func (s Property) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Property) DecodeFromPtr(p capnp.Ptr) Property {
	return Property(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Property) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Property) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Property) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Property) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Property) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Property) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Property) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Property) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Property) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Property) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Property) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Property) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Property) Enum() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Property) HasEnum() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Property) SetEnum(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewEnum sets the enum field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Property) NewEnum(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Property_List is a list of Property.
type Property_List = capnp.StructList[Property]

// NewProperty creates a new list of Property.
func NewProperty_List(s *capnp.Segment, sz int32) (Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Property](l), err
}

// Property_Future is a wrapper for a Property promised by a client call.
type Property_Future struct{ *capnp.Future }

func (f Property_Future) Struct() (Property, error) {
	p, err := f.Future.Ptr()
	return Property(p.Struct()), err
}

const schema_e363a5839bf866c6 = "x\xda\x9c\x95\xdfk\x1cU\x14\xc7\xbf\xdf{'\x996" +
	"?\xba]f\x9e\xd2\x87`\xf1A\x02\xb1\xc6\xaa\xd0\"" +
	"X\x03\x82\xadUv\x9c\x14\xb4\xb4\x90\xe9\xeeM\xb2t" +
	"wf2sW\xb2`i\xab\x04\x82\x14AH\xa1`" +
	"\x05\x0b\xad\x14\xb1\xd8'QPP)\x05\x1f\x05_\x04" +
	"\xc1\x88\x0f\xd1\xff\xc0\x07a\xe4l\xb2?\x0c\xa1\x81>" +
	"\xde\xcf\xf9\xce\xbd\xdfs\xef9g\x9e9\xa3N83" +
	"\xe3\x93\x1a*xrh\xb8\xf8b\xfc\x8d\x07?\xdd\xfa" +
	"\xe3C\x94\x0f\xb1x\xb8\xf0\xcf\xc7\xef\xdf\xa9\xfe\x89!" +
	"\xed\x02G[<Lo\x95.\xe0]\xe5\x97`\xb1y" +
	"w\xe2\xe1\xbfW\xdf\xb9\xbeC\xec\x88xZ)z\xc7" +
	"\x94\x88\x9fW\x9b`\xf1\xd9_\x1b\xb3/\xb47\xbf\xdb" +
	"M\xfc\x84\x9e\xa07#\x87x\xd3Z\xc4/\xde\xfb\xf1" +
	"\xe6\xfc\xf9\xc6\x06\x82C\x1c\x1eP\x0f\x8b\x9a\xceaz" +
	"\xe5\xce\x87\xe3\xce\xef\x0a,\x8e\xad}\xf5\xd4\xaa\xfb\xf3" +
	"\xdf\"\x1f\xdc\\\x8e?z\xd2\x9d\xa2\xf7\xb6+\x9b\x9f" +
	"q71]\xa4\x17\x17\x8fT\x93\xd8j\xb3b\x8fD" +
	"\x99\xad/DU\xfbt5J\xe3\xf4x%KR\xe3" +
	"f\xb6]!\x831\xed\x00\x0e\x81\xf2+S@pB" +
	"38\xadX&}\x0a<y\x01\x08^\xd5\x0c\xe6\x14" +
	"\xcbJ\xf9T@9\x10\xe5i\xcd`I\xb1d\xdb\xa9" +
	"\xe1\x18\x14\xc7\xc0\xa2f\xf2jVO-\xdcz\x12w" +
	"i\xc9\xc4\xad&\x0f\x80\x15\xcd\x0e;\x00>\xd2\xe0\\" +
	"\x924 \xe6\x0e\xf6\xccE\x13@pn\xeb\xc8\x9e9" +
	"#>\xe65\x83\xc6\x80\xb9\xba8^\xd2\x0c\xacbY" +
	"k\x9f\x1a(/\x9f\x05\x82T3\xb8\xa6\xa8\xeb\xb5\x9e" +
	"\xb38j\xeea\xbeH\xa3,j\x1ak\xa0\xb3\xbc\x9b" +
	"\xc4\xc1\xfek\x80{\xa6\xf3\xba\xc9\xf3H/\x9a\xc7\xce" +
	"H`M3H\x072j\xce\xf6\xd3\x1c\xcc(K\x1a" +
	"f\xd7\xf4.\x8b=\x13\xdb~b\x8f\xb0\xfc\xb2,\xdd" +
	"\xa8j\xc5\xf3s]\xcf\xdeyN\x00\xe1[\xd4\x0ck" +
	"\xec\xdb\xf6\">\x0b\x84\xe7\x84/\xb1\xef\xdc3<\x05" +
	"\x845\xe1W\xd87\xef]\xea\xe8W\x84\xaf\x0bw\x1c" +
	"\x9f\x0e\xe0}\xc4Y \xbc&\xfc\x06\x159\xe4s\x08" +
	"\xf0\xae\xf3\x02\x10\xae\x0b\xfeT\xe4\xc3\xf49\x0cx\x9f" +
	"p\x0a\x08o\x08\xbf-\xdcU~\xa7sou\xf8M" +
	"\xe1w\x85\xef\xd3>\xf7\x01\xde\x1d\xbe\x07\x84\xb7\x85\xdf" +
	"\x17\xbe\xdf\xf1\xb9\x1f\xf0\xee\xf1\x03 \xbc/\xfc[\xe1" +
	"##>G\x00\xef\x1b\xbe\x09\x84_\x0b\x7f |t" +
	"\xc8\xe7(\xe0\xfd\xc0\x0c\x08\xbf\x17\xfe\x1b\x15g\xc6\xe6" +
	"\xe9s\x0c\xf0~\xe5q \xfcE\x02\x1b\xfc\xdf\xbbL" +
	"6\x93\x9ai\xf4\xee\xbe)%\xb1hr\x00\xfd\x9a\xea" +
	"M\x8f\xad\x9a\x9a\xb4I\xd2\x18(\xb9\xde$\xda\x0a_" +
	"N\xb3\xa4j\xf2\x9c\xe3P\x1c\x07\x0bk\x9a\xa9\xc9\"" +
	"\x0b\xb7\x95\x19\x8eBq\x14,\xd9$\xad\x0c.^\xeb" +
	".\x8a43\xb9\x89\xab\x86\x15\x13G\x0d\xdbF/\xb2" +
	"\x90\x99\xe5\x96\x89\xablwC\xfdX3Z\x99K." +
	"\x9a\x18\xcc\xe9@\xd1\x01\x8b\xdc&ih\x96[\x98\x94" +
	"\xfd\xf2\x1d\xad\xfeRn3\x135I(r\x8f\xba\xab" +
	"H\xb3\x95\x8c5\xd9\x8ef\x99\xda\xadY\xcen\xf7\xc5" +
	"\x15En\xf7\xca\xa5S@\xf0\xaef\xb0&\xe5\xc6\xad" +
	"^Y\xfd\x1c\x08\xd64\x83\xf5\x9d\xf3*\x95Q\x98\xd9" +
	":\xb4\x19\xb8\xe9\xde\x0fb\xbb\xb9\xe5:\xea\x99\xa9\xc9" +
	"ku\xb3\x88j\xb5\xba\x959\x115:\xf34+\xd9" +
	"\xba\xc9\xbb\xe1\xff\x02\x00\x00\xff\xff\x9f\xbfa\xc2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e363a5839bf866c6,
		Nodes: []uint64{
			0x8ee1a1c9c44e0dac,
			0x957681fcc61aa8e7,
			0xbde7793642e0e8a6,
			0xe06c5d609cc2ad3c,
			0xe9d1078528b68839,
		},
		Compressed: true,
	})
}
