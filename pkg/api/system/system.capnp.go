// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	provider "github.com/theapemachine/caramba/pkg/api/provider"
)

type SystemTool capnp.Client

// SystemTool_TypeID is the unique identifier for the type SystemTool.
const SystemTool_TypeID = 0xf19a6d25c67a5101

func (c SystemTool) Process(ctx context.Context, params func(SystemTool_process_Params) error) (SystemTool_process_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      0,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "process",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_process_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SystemTool_process_Results_Future{Future: ans.Future()}, release

}

func (c SystemTool) ListAgents(ctx context.Context, params func(SystemTool_listAgents_Params) error) (SystemTool_listAgents_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      1,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "listAgents",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_listAgents_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SystemTool_listAgents_Results_Future{Future: ans.Future()}, release

}

func (c SystemTool) ListTopics(ctx context.Context, params func(SystemTool_listTopics_Params) error) (SystemTool_listTopics_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      2,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "listTopics",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_listTopics_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SystemTool_listTopics_Results_Future{Future: ans.Future()}, release

}

func (c SystemTool) SendSignal(ctx context.Context, params func(SystemTool_sendSignal_Params) error) (SystemTool_sendSignal_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      3,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "sendSignal",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_sendSignal_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SystemTool_sendSignal_Results_Future{Future: ans.Future()}, release

}

func (c SystemTool) BreakLoop(ctx context.Context, params func(SystemTool_breakLoop_Params) error) (SystemTool_breakLoop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      4,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "breakLoop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_breakLoop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return SystemTool_breakLoop_Results_Future{Future: ans.Future()}, release

}

func (c SystemTool) GetSchema(ctx context.Context, params func(SystemTool_getSchema_Params) error) (provider.Tool_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      5,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "getSchema",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(SystemTool_getSchema_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return provider.Tool_Future{Future: ans.Future()}, release

}

func (c SystemTool) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c SystemTool) String() string {
	return "SystemTool(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c SystemTool) AddRef() SystemTool {
	return SystemTool(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c SystemTool) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c SystemTool) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c SystemTool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (SystemTool) DecodeFromPtr(p capnp.Ptr) SystemTool {
	return SystemTool(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c SystemTool) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c SystemTool) IsSame(other SystemTool) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c SystemTool) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c SystemTool) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A SystemTool_Server is a SystemTool with a local implementation.
type SystemTool_Server interface {
	Process(context.Context, SystemTool_process) error

	ListAgents(context.Context, SystemTool_listAgents) error

	ListTopics(context.Context, SystemTool_listTopics) error

	SendSignal(context.Context, SystemTool_sendSignal) error

	BreakLoop(context.Context, SystemTool_breakLoop) error

	GetSchema(context.Context, SystemTool_getSchema) error
}

// SystemTool_NewServer creates a new Server from an implementation of SystemTool_Server.
func SystemTool_NewServer(s SystemTool_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(SystemTool_Methods(nil, s), s, c)
}

// SystemTool_ServerToClient creates a new Client from an implementation of SystemTool_Server.
// The caller is responsible for calling Release on the returned Client.
func SystemTool_ServerToClient(s SystemTool_Server) SystemTool {
	return SystemTool(capnp.NewClient(SystemTool_NewServer(s)))
}

// SystemTool_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func SystemTool_Methods(methods []server.Method, s SystemTool_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      0,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "process",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Process(ctx, SystemTool_process{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      1,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "listAgents",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListAgents(ctx, SystemTool_listAgents{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      2,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "listTopics",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListTopics(ctx, SystemTool_listTopics{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      3,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "sendSignal",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SendSignal(ctx, SystemTool_sendSignal{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      4,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "breakLoop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.BreakLoop(ctx, SystemTool_breakLoop{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xf19a6d25c67a5101,
			MethodID:      5,
			InterfaceName: "pkg/api/system/system.capnp:SystemTool",
			MethodName:    "getSchema",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetSchema(ctx, SystemTool_getSchema{call})
		},
	})

	return methods
}

// SystemTool_process holds the state for a server call to SystemTool.process.
// See server.Call for documentation.
type SystemTool_process struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_process) Args() SystemTool_process_Params {
	return SystemTool_process_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_process) AllocResults() (SystemTool_process_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_process_Results(r), err
}

// SystemTool_listAgents holds the state for a server call to SystemTool.listAgents.
// See server.Call for documentation.
type SystemTool_listAgents struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_listAgents) Args() SystemTool_listAgents_Params {
	return SystemTool_listAgents_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_listAgents) AllocResults() (SystemTool_listAgents_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listAgents_Results(r), err
}

// SystemTool_listTopics holds the state for a server call to SystemTool.listTopics.
// See server.Call for documentation.
type SystemTool_listTopics struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_listTopics) Args() SystemTool_listTopics_Params {
	return SystemTool_listTopics_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_listTopics) AllocResults() (SystemTool_listTopics_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listTopics_Results(r), err
}

// SystemTool_sendSignal holds the state for a server call to SystemTool.sendSignal.
// See server.Call for documentation.
type SystemTool_sendSignal struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_sendSignal) Args() SystemTool_sendSignal_Params {
	return SystemTool_sendSignal_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_sendSignal) AllocResults() (SystemTool_sendSignal_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_sendSignal_Results(r), err
}

// SystemTool_breakLoop holds the state for a server call to SystemTool.breakLoop.
// See server.Call for documentation.
type SystemTool_breakLoop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_breakLoop) Args() SystemTool_breakLoop_Params {
	return SystemTool_breakLoop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_breakLoop) AllocResults() (SystemTool_breakLoop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_breakLoop_Results(r), err
}

// SystemTool_getSchema holds the state for a server call to SystemTool.getSchema.
// See server.Call for documentation.
type SystemTool_getSchema struct {
	*server.Call
}

// Args returns the call's arguments.
func (c SystemTool_getSchema) Args() SystemTool_getSchema_Params {
	return SystemTool_getSchema_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c SystemTool_getSchema) AllocResults() (provider.Tool, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return provider.Tool(r), err
}

// SystemTool_List is a list of SystemTool.
type SystemTool_List = capnp.CapList[SystemTool]

// NewSystemTool_List creates a new list of SystemTool.
func NewSystemTool_List(s *capnp.Segment, sz int32) (SystemTool_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[SystemTool](l), err
}

type SystemTool_process_Params capnp.Struct

// SystemTool_process_Params_TypeID is the unique identifier for the type SystemTool_process_Params.
const SystemTool_process_Params_TypeID = 0x8983cc1a9e4a939d

func NewSystemTool_process_Params(s *capnp.Segment) (SystemTool_process_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_process_Params(st), err
}

func NewRootSystemTool_process_Params(s *capnp.Segment) (SystemTool_process_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_process_Params(st), err
}

func ReadRootSystemTool_process_Params(msg *capnp.Message) (SystemTool_process_Params, error) {
	root, err := msg.Root()
	return SystemTool_process_Params(root.Struct()), err
}

func (s SystemTool_process_Params) String() string {
	str, _ := text.Marshal(0x8983cc1a9e4a939d, capnp.Struct(s))
	return str
}

func (s SystemTool_process_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_process_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_process_Params {
	return SystemTool_process_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_process_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_process_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_process_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_process_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_process_Params) Command() (Command, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Command(p.Struct()), err
}

func (s SystemTool_process_Params) HasCommand() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_process_Params) SetCommand(v Command) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewCommand sets the command field to a newly
// allocated Command struct, preferring placement in s's segment.
func (s SystemTool_process_Params) NewCommand() (Command, error) {
	ss, err := NewCommand(capnp.Struct(s).Segment())
	if err != nil {
		return Command{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemTool_process_Params_List is a list of SystemTool_process_Params.
type SystemTool_process_Params_List = capnp.StructList[SystemTool_process_Params]

// NewSystemTool_process_Params creates a new list of SystemTool_process_Params.
func NewSystemTool_process_Params_List(s *capnp.Segment, sz int32) (SystemTool_process_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_process_Params](l), err
}

// SystemTool_process_Params_Future is a wrapper for a SystemTool_process_Params promised by a client call.
type SystemTool_process_Params_Future struct{ *capnp.Future }

func (f SystemTool_process_Params_Future) Struct() (SystemTool_process_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_process_Params(p.Struct()), err
}
func (p SystemTool_process_Params_Future) Command() Command_Future {
	return Command_Future{Future: p.Future.Field(0, nil)}
}

type SystemTool_process_Results capnp.Struct

// SystemTool_process_Results_TypeID is the unique identifier for the type SystemTool_process_Results.
const SystemTool_process_Results_TypeID = 0xe04eda8ac92a26c8

func NewSystemTool_process_Results(s *capnp.Segment) (SystemTool_process_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_process_Results(st), err
}

func NewRootSystemTool_process_Results(s *capnp.Segment) (SystemTool_process_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_process_Results(st), err
}

func ReadRootSystemTool_process_Results(msg *capnp.Message) (SystemTool_process_Results, error) {
	root, err := msg.Root()
	return SystemTool_process_Results(root.Struct()), err
}

func (s SystemTool_process_Results) String() string {
	str, _ := text.Marshal(0xe04eda8ac92a26c8, capnp.Struct(s))
	return str
}

func (s SystemTool_process_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_process_Results) DecodeFromPtr(p capnp.Ptr) SystemTool_process_Results {
	return SystemTool_process_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_process_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_process_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_process_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_process_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_process_Results) Result() (Result, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result(p.Struct()), err
}

func (s SystemTool_process_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_process_Results) SetResult(v Result) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s SystemTool_process_Results) NewResult() (Result, error) {
	ss, err := NewResult(capnp.Struct(s).Segment())
	if err != nil {
		return Result{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemTool_process_Results_List is a list of SystemTool_process_Results.
type SystemTool_process_Results_List = capnp.StructList[SystemTool_process_Results]

// NewSystemTool_process_Results creates a new list of SystemTool_process_Results.
func NewSystemTool_process_Results_List(s *capnp.Segment, sz int32) (SystemTool_process_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_process_Results](l), err
}

// SystemTool_process_Results_Future is a wrapper for a SystemTool_process_Results promised by a client call.
type SystemTool_process_Results_Future struct{ *capnp.Future }

func (f SystemTool_process_Results_Future) Struct() (SystemTool_process_Results, error) {
	p, err := f.Future.Ptr()
	return SystemTool_process_Results(p.Struct()), err
}
func (p SystemTool_process_Results_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

type SystemTool_listAgents_Params capnp.Struct

// SystemTool_listAgents_Params_TypeID is the unique identifier for the type SystemTool_listAgents_Params.
const SystemTool_listAgents_Params_TypeID = 0xdf6948129b1470f8

func NewSystemTool_listAgents_Params(s *capnp.Segment) (SystemTool_listAgents_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_listAgents_Params(st), err
}

func NewRootSystemTool_listAgents_Params(s *capnp.Segment) (SystemTool_listAgents_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_listAgents_Params(st), err
}

func ReadRootSystemTool_listAgents_Params(msg *capnp.Message) (SystemTool_listAgents_Params, error) {
	root, err := msg.Root()
	return SystemTool_listAgents_Params(root.Struct()), err
}

func (s SystemTool_listAgents_Params) String() string {
	str, _ := text.Marshal(0xdf6948129b1470f8, capnp.Struct(s))
	return str
}

func (s SystemTool_listAgents_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_listAgents_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_listAgents_Params {
	return SystemTool_listAgents_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_listAgents_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_listAgents_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_listAgents_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_listAgents_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SystemTool_listAgents_Params_List is a list of SystemTool_listAgents_Params.
type SystemTool_listAgents_Params_List = capnp.StructList[SystemTool_listAgents_Params]

// NewSystemTool_listAgents_Params creates a new list of SystemTool_listAgents_Params.
func NewSystemTool_listAgents_Params_List(s *capnp.Segment, sz int32) (SystemTool_listAgents_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SystemTool_listAgents_Params](l), err
}

// SystemTool_listAgents_Params_Future is a wrapper for a SystemTool_listAgents_Params promised by a client call.
type SystemTool_listAgents_Params_Future struct{ *capnp.Future }

func (f SystemTool_listAgents_Params_Future) Struct() (SystemTool_listAgents_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_listAgents_Params(p.Struct()), err
}

type SystemTool_listAgents_Results capnp.Struct

// SystemTool_listAgents_Results_TypeID is the unique identifier for the type SystemTool_listAgents_Results.
const SystemTool_listAgents_Results_TypeID = 0xe23e69569787c639

func NewSystemTool_listAgents_Results(s *capnp.Segment) (SystemTool_listAgents_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listAgents_Results(st), err
}

func NewRootSystemTool_listAgents_Results(s *capnp.Segment) (SystemTool_listAgents_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listAgents_Results(st), err
}

func ReadRootSystemTool_listAgents_Results(msg *capnp.Message) (SystemTool_listAgents_Results, error) {
	root, err := msg.Root()
	return SystemTool_listAgents_Results(root.Struct()), err
}

func (s SystemTool_listAgents_Results) String() string {
	str, _ := text.Marshal(0xe23e69569787c639, capnp.Struct(s))
	return str
}

func (s SystemTool_listAgents_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_listAgents_Results) DecodeFromPtr(p capnp.Ptr) SystemTool_listAgents_Results {
	return SystemTool_listAgents_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_listAgents_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_listAgents_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_listAgents_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_listAgents_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_listAgents_Results) Agents() (Agent_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Agent_List(p.List()), err
}

func (s SystemTool_listAgents_Results) HasAgents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_listAgents_Results) SetAgents(v Agent_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAgents sets the agents field to a newly
// allocated Agent_List, preferring placement in s's segment.
func (s SystemTool_listAgents_Results) NewAgents(n int32) (Agent_List, error) {
	l, err := NewAgent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Agent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SystemTool_listAgents_Results_List is a list of SystemTool_listAgents_Results.
type SystemTool_listAgents_Results_List = capnp.StructList[SystemTool_listAgents_Results]

// NewSystemTool_listAgents_Results creates a new list of SystemTool_listAgents_Results.
func NewSystemTool_listAgents_Results_List(s *capnp.Segment, sz int32) (SystemTool_listAgents_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_listAgents_Results](l), err
}

// SystemTool_listAgents_Results_Future is a wrapper for a SystemTool_listAgents_Results promised by a client call.
type SystemTool_listAgents_Results_Future struct{ *capnp.Future }

func (f SystemTool_listAgents_Results_Future) Struct() (SystemTool_listAgents_Results, error) {
	p, err := f.Future.Ptr()
	return SystemTool_listAgents_Results(p.Struct()), err
}

type SystemTool_listTopics_Params capnp.Struct

// SystemTool_listTopics_Params_TypeID is the unique identifier for the type SystemTool_listTopics_Params.
const SystemTool_listTopics_Params_TypeID = 0xbc1bf7c331b9cd9b

func NewSystemTool_listTopics_Params(s *capnp.Segment) (SystemTool_listTopics_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_listTopics_Params(st), err
}

func NewRootSystemTool_listTopics_Params(s *capnp.Segment) (SystemTool_listTopics_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_listTopics_Params(st), err
}

func ReadRootSystemTool_listTopics_Params(msg *capnp.Message) (SystemTool_listTopics_Params, error) {
	root, err := msg.Root()
	return SystemTool_listTopics_Params(root.Struct()), err
}

func (s SystemTool_listTopics_Params) String() string {
	str, _ := text.Marshal(0xbc1bf7c331b9cd9b, capnp.Struct(s))
	return str
}

func (s SystemTool_listTopics_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_listTopics_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_listTopics_Params {
	return SystemTool_listTopics_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_listTopics_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_listTopics_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_listTopics_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_listTopics_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SystemTool_listTopics_Params_List is a list of SystemTool_listTopics_Params.
type SystemTool_listTopics_Params_List = capnp.StructList[SystemTool_listTopics_Params]

// NewSystemTool_listTopics_Params creates a new list of SystemTool_listTopics_Params.
func NewSystemTool_listTopics_Params_List(s *capnp.Segment, sz int32) (SystemTool_listTopics_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SystemTool_listTopics_Params](l), err
}

// SystemTool_listTopics_Params_Future is a wrapper for a SystemTool_listTopics_Params promised by a client call.
type SystemTool_listTopics_Params_Future struct{ *capnp.Future }

func (f SystemTool_listTopics_Params_Future) Struct() (SystemTool_listTopics_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_listTopics_Params(p.Struct()), err
}

type SystemTool_listTopics_Results capnp.Struct

// SystemTool_listTopics_Results_TypeID is the unique identifier for the type SystemTool_listTopics_Results.
const SystemTool_listTopics_Results_TypeID = 0x8793b5fbd6643940

func NewSystemTool_listTopics_Results(s *capnp.Segment) (SystemTool_listTopics_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listTopics_Results(st), err
}

func NewRootSystemTool_listTopics_Results(s *capnp.Segment) (SystemTool_listTopics_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_listTopics_Results(st), err
}

func ReadRootSystemTool_listTopics_Results(msg *capnp.Message) (SystemTool_listTopics_Results, error) {
	root, err := msg.Root()
	return SystemTool_listTopics_Results(root.Struct()), err
}

func (s SystemTool_listTopics_Results) String() string {
	str, _ := text.Marshal(0x8793b5fbd6643940, capnp.Struct(s))
	return str
}

func (s SystemTool_listTopics_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_listTopics_Results) DecodeFromPtr(p capnp.Ptr) SystemTool_listTopics_Results {
	return SystemTool_listTopics_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_listTopics_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_listTopics_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_listTopics_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_listTopics_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_listTopics_Results) Topics() (Topic_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Topic_List(p.List()), err
}

func (s SystemTool_listTopics_Results) HasTopics() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_listTopics_Results) SetTopics(v Topic_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTopics sets the topics field to a newly
// allocated Topic_List, preferring placement in s's segment.
func (s SystemTool_listTopics_Results) NewTopics(n int32) (Topic_List, error) {
	l, err := NewTopic_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Topic_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// SystemTool_listTopics_Results_List is a list of SystemTool_listTopics_Results.
type SystemTool_listTopics_Results_List = capnp.StructList[SystemTool_listTopics_Results]

// NewSystemTool_listTopics_Results creates a new list of SystemTool_listTopics_Results.
func NewSystemTool_listTopics_Results_List(s *capnp.Segment, sz int32) (SystemTool_listTopics_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_listTopics_Results](l), err
}

// SystemTool_listTopics_Results_Future is a wrapper for a SystemTool_listTopics_Results promised by a client call.
type SystemTool_listTopics_Results_Future struct{ *capnp.Future }

func (f SystemTool_listTopics_Results_Future) Struct() (SystemTool_listTopics_Results, error) {
	p, err := f.Future.Ptr()
	return SystemTool_listTopics_Results(p.Struct()), err
}

type SystemTool_sendSignal_Params capnp.Struct

// SystemTool_sendSignal_Params_TypeID is the unique identifier for the type SystemTool_sendSignal_Params.
const SystemTool_sendSignal_Params_TypeID = 0xf312c211e0a2f7b4

func NewSystemTool_sendSignal_Params(s *capnp.Segment) (SystemTool_sendSignal_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_sendSignal_Params(st), err
}

func NewRootSystemTool_sendSignal_Params(s *capnp.Segment) (SystemTool_sendSignal_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_sendSignal_Params(st), err
}

func ReadRootSystemTool_sendSignal_Params(msg *capnp.Message) (SystemTool_sendSignal_Params, error) {
	root, err := msg.Root()
	return SystemTool_sendSignal_Params(root.Struct()), err
}

func (s SystemTool_sendSignal_Params) String() string {
	str, _ := text.Marshal(0xf312c211e0a2f7b4, capnp.Struct(s))
	return str
}

func (s SystemTool_sendSignal_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_sendSignal_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_sendSignal_Params {
	return SystemTool_sendSignal_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_sendSignal_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_sendSignal_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_sendSignal_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_sendSignal_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_sendSignal_Params) Signal() (Signal, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Signal(p.Struct()), err
}

func (s SystemTool_sendSignal_Params) HasSignal() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_sendSignal_Params) SetSignal(v Signal) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewSignal sets the signal field to a newly
// allocated Signal struct, preferring placement in s's segment.
func (s SystemTool_sendSignal_Params) NewSignal() (Signal, error) {
	ss, err := NewSignal(capnp.Struct(s).Segment())
	if err != nil {
		return Signal{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemTool_sendSignal_Params_List is a list of SystemTool_sendSignal_Params.
type SystemTool_sendSignal_Params_List = capnp.StructList[SystemTool_sendSignal_Params]

// NewSystemTool_sendSignal_Params creates a new list of SystemTool_sendSignal_Params.
func NewSystemTool_sendSignal_Params_List(s *capnp.Segment, sz int32) (SystemTool_sendSignal_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_sendSignal_Params](l), err
}

// SystemTool_sendSignal_Params_Future is a wrapper for a SystemTool_sendSignal_Params promised by a client call.
type SystemTool_sendSignal_Params_Future struct{ *capnp.Future }

func (f SystemTool_sendSignal_Params_Future) Struct() (SystemTool_sendSignal_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_sendSignal_Params(p.Struct()), err
}
func (p SystemTool_sendSignal_Params_Future) Signal() Signal_Future {
	return Signal_Future{Future: p.Future.Field(0, nil)}
}

type SystemTool_sendSignal_Results capnp.Struct

// SystemTool_sendSignal_Results_TypeID is the unique identifier for the type SystemTool_sendSignal_Results.
const SystemTool_sendSignal_Results_TypeID = 0xb8f8e1b648dabaf1

func NewSystemTool_sendSignal_Results(s *capnp.Segment) (SystemTool_sendSignal_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_sendSignal_Results(st), err
}

func NewRootSystemTool_sendSignal_Results(s *capnp.Segment) (SystemTool_sendSignal_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_sendSignal_Results(st), err
}

func ReadRootSystemTool_sendSignal_Results(msg *capnp.Message) (SystemTool_sendSignal_Results, error) {
	root, err := msg.Root()
	return SystemTool_sendSignal_Results(root.Struct()), err
}

func (s SystemTool_sendSignal_Results) String() string {
	str, _ := text.Marshal(0xb8f8e1b648dabaf1, capnp.Struct(s))
	return str
}

func (s SystemTool_sendSignal_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_sendSignal_Results) DecodeFromPtr(p capnp.Ptr) SystemTool_sendSignal_Results {
	return SystemTool_sendSignal_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_sendSignal_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_sendSignal_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_sendSignal_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_sendSignal_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_sendSignal_Results) Result() (Result, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result(p.Struct()), err
}

func (s SystemTool_sendSignal_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_sendSignal_Results) SetResult(v Result) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s SystemTool_sendSignal_Results) NewResult() (Result, error) {
	ss, err := NewResult(capnp.Struct(s).Segment())
	if err != nil {
		return Result{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemTool_sendSignal_Results_List is a list of SystemTool_sendSignal_Results.
type SystemTool_sendSignal_Results_List = capnp.StructList[SystemTool_sendSignal_Results]

// NewSystemTool_sendSignal_Results creates a new list of SystemTool_sendSignal_Results.
func NewSystemTool_sendSignal_Results_List(s *capnp.Segment, sz int32) (SystemTool_sendSignal_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_sendSignal_Results](l), err
}

// SystemTool_sendSignal_Results_Future is a wrapper for a SystemTool_sendSignal_Results promised by a client call.
type SystemTool_sendSignal_Results_Future struct{ *capnp.Future }

func (f SystemTool_sendSignal_Results_Future) Struct() (SystemTool_sendSignal_Results, error) {
	p, err := f.Future.Ptr()
	return SystemTool_sendSignal_Results(p.Struct()), err
}
func (p SystemTool_sendSignal_Results_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

type SystemTool_breakLoop_Params capnp.Struct

// SystemTool_breakLoop_Params_TypeID is the unique identifier for the type SystemTool_breakLoop_Params.
const SystemTool_breakLoop_Params_TypeID = 0x914d7b13f1aa6f22

func NewSystemTool_breakLoop_Params(s *capnp.Segment) (SystemTool_breakLoop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_breakLoop_Params(st), err
}

func NewRootSystemTool_breakLoop_Params(s *capnp.Segment) (SystemTool_breakLoop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_breakLoop_Params(st), err
}

func ReadRootSystemTool_breakLoop_Params(msg *capnp.Message) (SystemTool_breakLoop_Params, error) {
	root, err := msg.Root()
	return SystemTool_breakLoop_Params(root.Struct()), err
}

func (s SystemTool_breakLoop_Params) String() string {
	str, _ := text.Marshal(0x914d7b13f1aa6f22, capnp.Struct(s))
	return str
}

func (s SystemTool_breakLoop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_breakLoop_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_breakLoop_Params {
	return SystemTool_breakLoop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_breakLoop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_breakLoop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_breakLoop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_breakLoop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_breakLoop_Params) AgentId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s SystemTool_breakLoop_Params) HasAgentId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_breakLoop_Params) AgentIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s SystemTool_breakLoop_Params) SetAgentId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// SystemTool_breakLoop_Params_List is a list of SystemTool_breakLoop_Params.
type SystemTool_breakLoop_Params_List = capnp.StructList[SystemTool_breakLoop_Params]

// NewSystemTool_breakLoop_Params creates a new list of SystemTool_breakLoop_Params.
func NewSystemTool_breakLoop_Params_List(s *capnp.Segment, sz int32) (SystemTool_breakLoop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_breakLoop_Params](l), err
}

// SystemTool_breakLoop_Params_Future is a wrapper for a SystemTool_breakLoop_Params promised by a client call.
type SystemTool_breakLoop_Params_Future struct{ *capnp.Future }

func (f SystemTool_breakLoop_Params_Future) Struct() (SystemTool_breakLoop_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_breakLoop_Params(p.Struct()), err
}

type SystemTool_breakLoop_Results capnp.Struct

// SystemTool_breakLoop_Results_TypeID is the unique identifier for the type SystemTool_breakLoop_Results.
const SystemTool_breakLoop_Results_TypeID = 0x8f4a712a743b821f

func NewSystemTool_breakLoop_Results(s *capnp.Segment) (SystemTool_breakLoop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_breakLoop_Results(st), err
}

func NewRootSystemTool_breakLoop_Results(s *capnp.Segment) (SystemTool_breakLoop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SystemTool_breakLoop_Results(st), err
}

func ReadRootSystemTool_breakLoop_Results(msg *capnp.Message) (SystemTool_breakLoop_Results, error) {
	root, err := msg.Root()
	return SystemTool_breakLoop_Results(root.Struct()), err
}

func (s SystemTool_breakLoop_Results) String() string {
	str, _ := text.Marshal(0x8f4a712a743b821f, capnp.Struct(s))
	return str
}

func (s SystemTool_breakLoop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_breakLoop_Results) DecodeFromPtr(p capnp.Ptr) SystemTool_breakLoop_Results {
	return SystemTool_breakLoop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_breakLoop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_breakLoop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_breakLoop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_breakLoop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemTool_breakLoop_Results) Result() (Result, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Result(p.Struct()), err
}

func (s SystemTool_breakLoop_Results) HasResult() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemTool_breakLoop_Results) SetResult(v Result) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewResult sets the result field to a newly
// allocated Result struct, preferring placement in s's segment.
func (s SystemTool_breakLoop_Results) NewResult() (Result, error) {
	ss, err := NewResult(capnp.Struct(s).Segment())
	if err != nil {
		return Result{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemTool_breakLoop_Results_List is a list of SystemTool_breakLoop_Results.
type SystemTool_breakLoop_Results_List = capnp.StructList[SystemTool_breakLoop_Results]

// NewSystemTool_breakLoop_Results creates a new list of SystemTool_breakLoop_Results.
func NewSystemTool_breakLoop_Results_List(s *capnp.Segment, sz int32) (SystemTool_breakLoop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[SystemTool_breakLoop_Results](l), err
}

// SystemTool_breakLoop_Results_Future is a wrapper for a SystemTool_breakLoop_Results promised by a client call.
type SystemTool_breakLoop_Results_Future struct{ *capnp.Future }

func (f SystemTool_breakLoop_Results_Future) Struct() (SystemTool_breakLoop_Results, error) {
	p, err := f.Future.Ptr()
	return SystemTool_breakLoop_Results(p.Struct()), err
}
func (p SystemTool_breakLoop_Results_Future) Result() Result_Future {
	return Result_Future{Future: p.Future.Field(0, nil)}
}

type SystemTool_getSchema_Params capnp.Struct

// SystemTool_getSchema_Params_TypeID is the unique identifier for the type SystemTool_getSchema_Params.
const SystemTool_getSchema_Params_TypeID = 0xfbbfeb0472cbb700

func NewSystemTool_getSchema_Params(s *capnp.Segment) (SystemTool_getSchema_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_getSchema_Params(st), err
}

func NewRootSystemTool_getSchema_Params(s *capnp.Segment) (SystemTool_getSchema_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return SystemTool_getSchema_Params(st), err
}

func ReadRootSystemTool_getSchema_Params(msg *capnp.Message) (SystemTool_getSchema_Params, error) {
	root, err := msg.Root()
	return SystemTool_getSchema_Params(root.Struct()), err
}

func (s SystemTool_getSchema_Params) String() string {
	str, _ := text.Marshal(0xfbbfeb0472cbb700, capnp.Struct(s))
	return str
}

func (s SystemTool_getSchema_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemTool_getSchema_Params) DecodeFromPtr(p capnp.Ptr) SystemTool_getSchema_Params {
	return SystemTool_getSchema_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemTool_getSchema_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemTool_getSchema_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemTool_getSchema_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemTool_getSchema_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// SystemTool_getSchema_Params_List is a list of SystemTool_getSchema_Params.
type SystemTool_getSchema_Params_List = capnp.StructList[SystemTool_getSchema_Params]

// NewSystemTool_getSchema_Params creates a new list of SystemTool_getSchema_Params.
func NewSystemTool_getSchema_Params_List(s *capnp.Segment, sz int32) (SystemTool_getSchema_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[SystemTool_getSchema_Params](l), err
}

// SystemTool_getSchema_Params_Future is a wrapper for a SystemTool_getSchema_Params promised by a client call.
type SystemTool_getSchema_Params_Future struct{ *capnp.Future }

func (f SystemTool_getSchema_Params_Future) Struct() (SystemTool_getSchema_Params, error) {
	p, err := f.Future.Ptr()
	return SystemTool_getSchema_Params(p.Struct()), err
}

type Command capnp.Struct

// Command_TypeID is the unique identifier for the type Command.
const Command_TypeID = 0xb3118fb8880413b0

func NewCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Command(st), err
}

func NewRootCommand(s *capnp.Segment) (Command, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Command(st), err
}

func ReadRootCommand(msg *capnp.Message) (Command, error) {
	root, err := msg.Root()
	return Command(root.Struct()), err
}

func (s Command) String() string {
	str, _ := text.Marshal(0xb3118fb8880413b0, capnp.Struct(s))
	return str
}

func (s Command) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Command) DecodeFromPtr(p capnp.Ptr) Command {
	return Command(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Command) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Command) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Command) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Command) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Command) Type() Command_Type {
	return Command_Type(capnp.Struct(s).Uint16(0))
}

func (s Command) SetType(v Command_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Command) Payload() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(0)
}

func (s Command) HasPayload() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Command) SetPayload(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(0, v)
}

// Command_List is a list of Command.
type Command_List = capnp.StructList[Command]

// NewCommand creates a new list of Command.
func NewCommand_List(s *capnp.Segment, sz int32) (Command_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[Command](l), err
}

// Command_Future is a wrapper for a Command promised by a client call.
type Command_Future struct{ *capnp.Future }

func (f Command_Future) Struct() (Command, error) {
	p, err := f.Future.Ptr()
	return Command(p.Struct()), err
}
func (p Command_Future) Payload() *capnp.Future {
	return p.Future.Field(0, nil)
}

type Command_Type uint16

// Command_Type_TypeID is the unique identifier for the type Command_Type.
const Command_Type_TypeID = 0xefed8c3251756e9a

// Values of Command_Type.
const (
	Command_Type_listAgents Command_Type = 0
	Command_Type_listTopics Command_Type = 1
	Command_Type_sendSignal Command_Type = 2
	Command_Type_breakLoop  Command_Type = 3
)

// String returns the enum's constant name.
func (c Command_Type) String() string {
	switch c {
	case Command_Type_listAgents:
		return "listAgents"
	case Command_Type_listTopics:
		return "listTopics"
	case Command_Type_sendSignal:
		return "sendSignal"
	case Command_Type_breakLoop:
		return "breakLoop"

	default:
		return ""
	}
}

// Command_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Command_TypeFromString(c string) Command_Type {
	switch c {
	case "listAgents":
		return Command_Type_listAgents
	case "listTopics":
		return Command_Type_listTopics
	case "sendSignal":
		return Command_Type_sendSignal
	case "breakLoop":
		return Command_Type_breakLoop

	default:
		return 0
	}
}

type Command_Type_List = capnp.EnumList[Command_Type]

func NewCommand_Type_List(s *capnp.Segment, sz int32) (Command_Type_List, error) {
	return capnp.NewEnumList[Command_Type](s, sz)
}

type Result capnp.Struct

// Result_TypeID is the unique identifier for the type Result.
const Result_TypeID = 0xdf0aa4265613d8f2

func NewResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func NewRootResult(s *capnp.Segment) (Result, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Result(st), err
}

func ReadRootResult(msg *capnp.Message) (Result, error) {
	root, err := msg.Root()
	return Result(root.Struct()), err
}

func (s Result) String() string {
	str, _ := text.Marshal(0xdf0aa4265613d8f2, capnp.Struct(s))
	return str
}

func (s Result) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Result) DecodeFromPtr(p capnp.Ptr) Result {
	return Result(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Result) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Result) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Result) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Result) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Result) Success() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Result) SetSuccess(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

func (s Result) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Result) HasError() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Result) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Result) SetError(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Result) Data() (capnp.Ptr, error) {
	return capnp.Struct(s).Ptr(1)
}

func (s Result) HasData() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Result) SetData(v capnp.Ptr) error {
	return capnp.Struct(s).SetPtr(1, v)
}

// Result_List is a list of Result.
type Result_List = capnp.StructList[Result]

// NewResult creates a new list of Result.
func NewResult_List(s *capnp.Segment, sz int32) (Result_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Result](l), err
}

// Result_Future is a wrapper for a Result promised by a client call.
type Result_Future struct{ *capnp.Future }

func (f Result_Future) Struct() (Result, error) {
	p, err := f.Future.Ptr()
	return Result(p.Struct()), err
}
func (p Result_Future) Data() *capnp.Future {
	return p.Future.Field(1, nil)
}

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0xed106740f46e3497

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0xed106740f46e3497, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Agent) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Agent) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Agent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Agent) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Agent) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Agent) Status() Agent_Status {
	return Agent_Status(capnp.Struct(s).Uint16(0))
}

func (s Agent) SetStatus(v Agent_Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Agent) Topics() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Agent) HasTopics() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetTopics(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTopics sets the topics field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Agent) NewTopics(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}

type Agent_Status uint16

// Agent_Status_TypeID is the unique identifier for the type Agent_Status.
const Agent_Status_TypeID = 0xc6463c7455502dc1

// Values of Agent_Status.
const (
	Agent_Status_running Agent_Status = 0
	Agent_Status_stopped Agent_Status = 1
	Agent_Status_error   Agent_Status = 2
)

// String returns the enum's constant name.
func (c Agent_Status) String() string {
	switch c {
	case Agent_Status_running:
		return "running"
	case Agent_Status_stopped:
		return "stopped"
	case Agent_Status_error:
		return "error"

	default:
		return ""
	}
}

// Agent_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Agent_StatusFromString(c string) Agent_Status {
	switch c {
	case "running":
		return Agent_Status_running
	case "stopped":
		return Agent_Status_stopped
	case "error":
		return Agent_Status_error

	default:
		return 0
	}
}

type Agent_Status_List = capnp.EnumList[Agent_Status]

func NewAgent_Status_List(s *capnp.Segment, sz int32) (Agent_Status_List, error) {
	return capnp.NewEnumList[Agent_Status](s, sz)
}

type Topic capnp.Struct

// Topic_TypeID is the unique identifier for the type Topic.
const Topic_TypeID = 0xc89fe6090d124297

func NewTopic(s *capnp.Segment) (Topic, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Topic(st), err
}

func NewRootTopic(s *capnp.Segment) (Topic, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return Topic(st), err
}

func ReadRootTopic(msg *capnp.Message) (Topic, error) {
	root, err := msg.Root()
	return Topic(root.Struct()), err
}

func (s Topic) String() string {
	str, _ := text.Marshal(0xc89fe6090d124297, capnp.Struct(s))
	return str
}

func (s Topic) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Topic) DecodeFromPtr(p capnp.Ptr) Topic {
	return Topic(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Topic) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Topic) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Topic) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Topic) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Topic) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Topic) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Topic) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Topic) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Topic) Subscribers() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Topic) HasSubscribers() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Topic) SetSubscribers(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewSubscribers sets the subscribers field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Topic) NewSubscribers(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Topic) MessageCount() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Topic) SetMessageCount(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

// Topic_List is a list of Topic.
type Topic_List = capnp.StructList[Topic]

// NewTopic creates a new list of Topic.
func NewTopic_List(s *capnp.Segment, sz int32) (Topic_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[Topic](l), err
}

// Topic_Future is a wrapper for a Topic promised by a client call.
type Topic_Future struct{ *capnp.Future }

func (f Topic_Future) Struct() (Topic, error) {
	p, err := f.Future.Ptr()
	return Topic(p.Struct()), err
}

type Signal capnp.Struct

// Signal_TypeID is the unique identifier for the type Signal.
const Signal_TypeID = 0x877cd26353d8c6dc

func NewSignal(s *capnp.Segment) (Signal, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Signal(st), err
}

func NewRootSignal(s *capnp.Segment) (Signal, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Signal(st), err
}

func ReadRootSignal(msg *capnp.Message) (Signal, error) {
	root, err := msg.Root()
	return Signal(root.Struct()), err
}

func (s Signal) String() string {
	str, _ := text.Marshal(0x877cd26353d8c6dc, capnp.Struct(s))
	return str
}

func (s Signal) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Signal) DecodeFromPtr(p capnp.Ptr) Signal {
	return Signal(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Signal) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Signal) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Signal) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Signal) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Signal) Type() Signal_Type {
	return Signal_Type(capnp.Struct(s).Uint16(0))
}

func (s Signal) SetType(v Signal_Type) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

func (s Signal) TargetId() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Signal) HasTargetId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Signal) TargetIdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Signal) SetTargetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Signal) Payload() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Signal) HasPayload() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Signal) PayloadBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Signal) SetPayload(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Signal) Metadata() (Metadata_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Metadata_List(p.List()), err
}

func (s Signal) HasMetadata() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Signal) SetMetadata(v Metadata_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated Metadata_List, preferring placement in s's segment.
func (s Signal) NewMetadata(n int32) (Metadata_List, error) {
	l, err := NewMetadata_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Metadata_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Signal_List is a list of Signal.
type Signal_List = capnp.StructList[Signal]

// NewSignal creates a new list of Signal.
func NewSignal_List(s *capnp.Segment, sz int32) (Signal_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Signal](l), err
}

// Signal_Future is a wrapper for a Signal promised by a client call.
type Signal_Future struct{ *capnp.Future }

func (f Signal_Future) Struct() (Signal, error) {
	p, err := f.Future.Ptr()
	return Signal(p.Struct()), err
}

type Signal_Type uint16

// Signal_Type_TypeID is the unique identifier for the type Signal_Type.
const Signal_Type_TypeID = 0xef724cb1a0e4c68a

// Values of Signal_Type.
const (
	Signal_Type_stop    Signal_Type = 0
	Signal_Type_pause   Signal_Type = 1
	Signal_Type_resume  Signal_Type = 2
	Signal_Type_message Signal_Type = 3
	Signal_Type_custom  Signal_Type = 4
)

// String returns the enum's constant name.
func (c Signal_Type) String() string {
	switch c {
	case Signal_Type_stop:
		return "stop"
	case Signal_Type_pause:
		return "pause"
	case Signal_Type_resume:
		return "resume"
	case Signal_Type_message:
		return "message"
	case Signal_Type_custom:
		return "custom"

	default:
		return ""
	}
}

// Signal_TypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Signal_TypeFromString(c string) Signal_Type {
	switch c {
	case "stop":
		return Signal_Type_stop
	case "pause":
		return Signal_Type_pause
	case "resume":
		return Signal_Type_resume
	case "message":
		return Signal_Type_message
	case "custom":
		return Signal_Type_custom

	default:
		return 0
	}
}

type Signal_Type_List = capnp.EnumList[Signal_Type]

func NewSignal_Type_List(s *capnp.Segment, sz int32) (Signal_Type_List, error) {
	return capnp.NewEnumList[Signal_Type](s, sz)
}

type Metadata capnp.Struct

// Metadata_TypeID is the unique identifier for the type Metadata.
const Metadata_TypeID = 0xf0528fb4c0286c6c

func NewMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func NewRootMetadata(s *capnp.Segment) (Metadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Metadata(st), err
}

func ReadRootMetadata(msg *capnp.Message) (Metadata, error) {
	root, err := msg.Root()
	return Metadata(root.Struct()), err
}

func (s Metadata) String() string {
	str, _ := text.Marshal(0xf0528fb4c0286c6c, capnp.Struct(s))
	return str
}

func (s Metadata) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Metadata) DecodeFromPtr(p capnp.Ptr) Metadata {
	return Metadata(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Metadata) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Metadata) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Metadata) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Metadata) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Metadata) Key() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Metadata) HasKey() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Metadata) KeyBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Metadata) SetKey(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Metadata) Value() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Metadata) HasValue() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Metadata) ValueBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Metadata) SetValue(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// Metadata_List is a list of Metadata.
type Metadata_List = capnp.StructList[Metadata]

// NewMetadata creates a new list of Metadata.
func NewMetadata_List(s *capnp.Segment, sz int32) (Metadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Metadata](l), err
}

// Metadata_Future is a wrapper for a Metadata promised by a client call.
type Metadata_Future struct{ *capnp.Future }

func (f Metadata_Future) Struct() (Metadata, error) {
	p, err := f.Future.Ptr()
	return Metadata(p.Struct()), err
}

type SystemToolOptions capnp.Struct

// SystemToolOptions_TypeID is the unique identifier for the type SystemToolOptions.
const SystemToolOptions_TypeID = 0xa4c4d7f8d7ba7c08

func NewSystemToolOptions(s *capnp.Segment) (SystemToolOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SystemToolOptions(st), err
}

func NewRootSystemToolOptions(s *capnp.Segment) (SystemToolOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SystemToolOptions(st), err
}

func ReadRootSystemToolOptions(msg *capnp.Message) (SystemToolOptions, error) {
	root, err := msg.Root()
	return SystemToolOptions(root.Struct()), err
}

func (s SystemToolOptions) String() string {
	str, _ := text.Marshal(0xa4c4d7f8d7ba7c08, capnp.Struct(s))
	return str
}

func (s SystemToolOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (SystemToolOptions) DecodeFromPtr(p capnp.Ptr) SystemToolOptions {
	return SystemToolOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s SystemToolOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s SystemToolOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s SystemToolOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s SystemToolOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s SystemToolOptions) BufferSize() uint32 {
	return capnp.Struct(s).Uint32(0) ^ 1024
}

func (s SystemToolOptions) SetBufferSize(v uint32) {
	capnp.Struct(s).SetUint32(0, v^1024)
}

func (s SystemToolOptions) Registry() (Registry, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Registry(p.Struct()), err
}

func (s SystemToolOptions) HasRegistry() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s SystemToolOptions) SetRegistry(v Registry) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewRegistry sets the registry field to a newly
// allocated Registry struct, preferring placement in s's segment.
func (s SystemToolOptions) NewRegistry() (Registry, error) {
	ss, err := NewRegistry(capnp.Struct(s).Segment())
	if err != nil {
		return Registry{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// SystemToolOptions_List is a list of SystemToolOptions.
type SystemToolOptions_List = capnp.StructList[SystemToolOptions]

// NewSystemToolOptions creates a new list of SystemToolOptions.
func NewSystemToolOptions_List(s *capnp.Segment, sz int32) (SystemToolOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return capnp.StructList[SystemToolOptions](l), err
}

// SystemToolOptions_Future is a wrapper for a SystemToolOptions promised by a client call.
type SystemToolOptions_Future struct{ *capnp.Future }

func (f SystemToolOptions_Future) Struct() (SystemToolOptions, error) {
	p, err := f.Future.Ptr()
	return SystemToolOptions(p.Struct()), err
}
func (p SystemToolOptions_Future) Registry() Registry_Future {
	return Registry_Future{Future: p.Future.Field(0, nil)}
}

type Registry capnp.Struct

// Registry_TypeID is the unique identifier for the type Registry.
const Registry_TypeID = 0xd34247ee2cfed0e9

func NewRegistry(s *capnp.Segment) (Registry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry(st), err
}

func NewRootRegistry(s *capnp.Segment) (Registry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Registry(st), err
}

func ReadRootRegistry(msg *capnp.Message) (Registry, error) {
	root, err := msg.Root()
	return Registry(root.Struct()), err
}

func (s Registry) String() string {
	str, _ := text.Marshal(0xd34247ee2cfed0e9, capnp.Struct(s))
	return str
}

func (s Registry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Registry) DecodeFromPtr(p capnp.Ptr) Registry {
	return Registry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Registry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Registry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Registry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Registry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Registry) Entries() (RegistryEntry_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return RegistryEntry_List(p.List()), err
}

func (s Registry) HasEntries() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Registry) SetEntries(v RegistryEntry_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated RegistryEntry_List, preferring placement in s's segment.
func (s Registry) NewEntries(n int32) (RegistryEntry_List, error) {
	l, err := NewRegistryEntry_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return RegistryEntry_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Registry_List is a list of Registry.
type Registry_List = capnp.StructList[Registry]

// NewRegistry creates a new list of Registry.
func NewRegistry_List(s *capnp.Segment, sz int32) (Registry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Registry](l), err
}

// Registry_Future is a wrapper for a Registry promised by a client call.
type Registry_Future struct{ *capnp.Future }

func (f Registry_Future) Struct() (Registry, error) {
	p, err := f.Future.Ptr()
	return Registry(p.Struct()), err
}

type RegistryEntry capnp.Struct

// RegistryEntry_TypeID is the unique identifier for the type RegistryEntry.
const RegistryEntry_TypeID = 0xc69c96074e6c7ca8

func NewRegistryEntry(s *capnp.Segment) (RegistryEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RegistryEntry(st), err
}

func NewRootRegistryEntry(s *capnp.Segment) (RegistryEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return RegistryEntry(st), err
}

func ReadRootRegistryEntry(msg *capnp.Message) (RegistryEntry, error) {
	root, err := msg.Root()
	return RegistryEntry(root.Struct()), err
}

func (s RegistryEntry) String() string {
	str, _ := text.Marshal(0xc69c96074e6c7ca8, capnp.Struct(s))
	return str
}

func (s RegistryEntry) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RegistryEntry) DecodeFromPtr(p capnp.Ptr) RegistryEntry {
	return RegistryEntry(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RegistryEntry) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RegistryEntry) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RegistryEntry) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RegistryEntry) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RegistryEntry) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s RegistryEntry) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RegistryEntry) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s RegistryEntry) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s RegistryEntry) Command() (Command, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Command(p.Struct()), err
}

func (s RegistryEntry) HasCommand() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s RegistryEntry) SetCommand(v Command) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewCommand sets the command field to a newly
// allocated Command struct, preferring placement in s's segment.
func (s RegistryEntry) NewCommand() (Command, error) {
	ss, err := NewCommand(capnp.Struct(s).Segment())
	if err != nil {
		return Command{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s RegistryEntry) Timestamp() int64 {
	return int64(capnp.Struct(s).Uint64(0))
}

func (s RegistryEntry) SetTimestamp(v int64) {
	capnp.Struct(s).SetUint64(0, uint64(v))
}

// RegistryEntry_List is a list of RegistryEntry.
type RegistryEntry_List = capnp.StructList[RegistryEntry]

// NewRegistryEntry creates a new list of RegistryEntry.
func NewRegistryEntry_List(s *capnp.Segment, sz int32) (RegistryEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return capnp.StructList[RegistryEntry](l), err
}

// RegistryEntry_Future is a wrapper for a RegistryEntry promised by a client call.
type RegistryEntry_Future struct{ *capnp.Future }

func (f RegistryEntry_Future) Struct() (RegistryEntry, error) {
	p, err := f.Future.Ptr()
	return RegistryEntry(p.Struct()), err
}
func (p RegistryEntry_Future) Command() Command_Future {
	return Command_Future{Future: p.Future.Field(1, nil)}
}

const schema_d4c9c9f76e89a0d4 = "x\xda\xb4W}\x8c\x1ce\x1d\xfe=\xef\xec\xde\xec\xdd" +
	"\xed\xdd\xee\xdc\x1cQk\xc9\xa5\xf5\x8a\xb0\xda\xeb\xc7\xc1" +
	"\x1f\x9c\xe8n\xb7\xa2\xbdK\x0fn\xeeZ\"\x8dD\xe7" +
	"v\x87\xed\xd8\x9d\xd9\xe9\xcc\xac\xe6\xb0f\x83B*\x04" +
	"\xd34\x04\x1b\xc0\x0f441$DAPhL\xd4" +
	"\xaa\x17\x8a\x9a\x18D!\x04\x03%\xa21\xa6b\xfdH" +
	"\x9b\x10\x18\xf3\xbe\xbb\xf3\xd1e\xef\x8e\x12\xf9\xeb\xb27" +
	"O\xde\xe7\xf7\xf1\xfc\x9e\xdf\xfbn}(UJm\x1b" +
	"\xfa\xcc 1\xed\xb6t_\xf0\xe2\xf2\xf3\x0b\x95g\x0e" +
	"\x1d&m=\x10<\xfb\xc0\x1d\xf6\xb9S\xa7\x9e\xa5\xb4" +
	"$\x13M\xde\x93^\x07\xf5x\xfa=D\xea\xc3\xe9\xbf" +
	"\x12\x82\xd2\xd5\xd5?\xbe\xfe\xf8\xdd\x87I\xf9 \x88\xd2" +
	"\xe0\xa0{\xfb\x9e\x01A}\xb8\xafH\x08\xbey\xf7\xcc" +
	"\xb7\xd6\xfd\xe6+w$\x01\x7f\xea{\x94\x03\xce\x08\xc0" +
	"\xd8\x97?\xe2\x17\x0e\xce\x1cI\x02\x86\xe4\xa79`\x83" +
	"\xcc\x01\x1b\x1b\x0f\x9dU\xbf8{4\x09\xd8!\x9f\xe4" +
	"\x00M\x002\x87N<w\xfe\xb9_>\xd8\x1d\xb1@" +
	"\x1e\x94]\xa8\xb7\xcb2\x91z\xab\xfc\x05B\xf0\x035" +
	"\xf5\xd5'\x8e(?\xec\x89~U\xde\x08\xf5\xbf2\xcf" +
	"\xef\x0d\x81>{\xe2\x85]?:}\xfe\x89$\xf9\x8d" +
	"\x19\x91\x9f\x95\xe1\xe4\xf7\xff\xf6\xc9m\xbf8\xf7\xfe\x9f" +
	"\xb4\x01)\xfe\xfdk\x99\xa7A\xa9\xe0\xe7\x9b\xe7\xf6\xfa" +
	"\xd7|b\x99\x94\x8d,8v\xa5\xfd\x9fR-\x7f\x86" +
	"\x08\x93\xb7ff\xa0\xde\x93\xe1!\x1d\xcd\\O\x08\xbe" +
	"w\xa8~\x9d\xfc\xf5o,w\x87\xc4\xf8i\xc73\xf3" +
	"P\x9f\x14\xe8\xc73\xdf'\x04\xc7\xca#C\xfd\x7f\xf9" +
	"\xf6S=\xd1Z\xff\x08T\xbd\x9f\xa3o\xea\xe7\xe8\xbf" +
	"\xfd\xee\xcd\x0f\xff\xe3\x93\xe5\xdf\x93\xb2\xfe-\xd9\x0e\x0d" +
	"\x14\xa0^:\xc0\xc1\xef\x1b\xe0\xc9\xfc\xeby\xf5\x86\xcb" +
	"\x1e\x1cx\xa9\xe7\xd1\xd3\x03\xeb\xa0\xde(\xd0{\x07\xf8" +
	"\xd1\xe7\x9d\xd1\xfbGv\x99/%R?3 R\x7f" +
	"\xea\xb2\xc2\xa9;_\xb8\xee\xe5d\xd5N\x0f\x9c\xe0U" +
	";+\x88\xae^>|\xec\x06\xf3c\xaf$\x01\xca\xa0" +
	"(\xeb\xa6A\x0e\x88\xea\xd5K\x85{\x07G\xa0\x1a\x83" +
	"\xbcK\xd6 W\xe1\x9d\xcb\x7f~\xe0\x91\xdd\xeek\xa4" +
	"|\x80\xc5\x02&Lj\xd92T=+\xca\x91m\x11" +
	"\x82\xfb\xec\xa6\xb6\xfd\xae3\xaf\x912\xceb)\x10&" +
	"\x8ffg\xa0\x1e\x17\xc8\xefdk\x84\xa0^\xbf\xfcg" +
	"\x8f\x1d\x99\xffgW\xe1D)\xfe\x90-@}U\x80" +
	"Og\xb9L\xa0\xdd\xb2\xbc\xc9\xba\xef,)\xeb\xa5\x18" +
	"L\x98\xfc\xe8\xd0\x14\xd4\xd9!Q\xbf\xa1\xc3Pg\x87" +
	"e\xa2\xe0\xb1s\xdf}Y99\xf2\xefd\xfaW\x0d" +
	"\x0b\xcdO\x0f\x17\x09o\xfe\xf8\xd7n\xea\xef?}=" +
	".\xac9|\x12T\x0b\x9c\x03\xb5-\xbacn\x91\xbc" +
	"%\xcf7\xac-\xed?\x13\x15\xdd\xb1\x9d\xa9\x05\xb3f" +
	"Kz]K!Y\x11\x14r{\x96\x1cC\xcbK)" +
	"\xa2\x14\x88\x14\xbd@\xa4}Z\x82\xb6\x9f\x01\x18\x05\xff" +
	"\x9f1C\xa4U%h\x0e\x83\xc20\x0aF\xa4Xe" +
	"\"m\xbf\x04\xcdgP$6\x0a\x89H9\xc8\x91\x8e" +
	"\x04\xed.\x86\x9c\xbf\xe4\x18\xc8\xc5l\x04\xe4\x08\x81\xaf" +
	"\xbb5\xc3\x9f\xae\x12\x11\xb2\xc4\x90%\xb4\x1c}\xa9\xde" +
	"\xd0\xab\xe1\xef\xc02|\xbd\xaa\xfb:\xc7\x0c\x13\xe6$" +
	" \x1f\x17\x9d\xc0\xff\x19\xe5\xdb\xd73_\xf1cO\xa3" +
	"Q\x9f\xa8\x9b\x9e\xbf\xa7\xe1\x98\x15o|\xde\xf0\x9au" +
	"\x1f\x9e\x96\x8a\x12\x1e\x9a\"\xd22\x12\xb4q\x86\xa2/" +
	"`1e4N]\x94\xe95(\x1d\xb7Q1<o" +
	"|nLwu\xeb\x02\xbar\x87n\x94\xa1UiX" +
	"\x96nW\x91O\xaa\x0d\xf9\x8b\xc8m\xd15\xf4\x03\xbb" +
	"\x1b\x0d\xa7\x93\x9aG\xd4+\xb7Q\x86\xa2\xdb\xce=\x1f" +
	"\x0f\xf2;\xe6\x9a\x13Y\xd1Ji\xe95\xc3\xf6\xa7\xe3" +
	"n\x86\x04\xa9\xd5\x09\xaew\xc6|\xb3a{s\x80\x96" +
	"i\x9f\x0c(W\xec#\xd2.\x97\xa0]\x19\x0br\x1b" +
	"\x97\xd9V\x09\xda5\x0c\xc1b\xf3\xe6\x9b\x0dw\xc1$" +
	"\xe9\x16\x03\x19b\x1b2)B\xe0\x1a5\xd3\xf3\xdd%" +
	"\xae\xa0|lt])\xf7\x1c\x95\x9d\x0d\xcb\x92u\xbb" +
	"*f%\xf6\x84pV2Q\xd2W\xf0Y\x19\x97\xa0" +
	"m\x8dC\xdb\\\x8e\xc3\x0d' :\xa3=\x01\x91\xda" +
	"G\x88a\xe4\"\x1a\xe0\x19v\x95\xcf\xb1^_U\xc8" +
	"\xff\x97f'\x86\xa6\xd3mZ\xbd\x8f;x\xd3'\x16" +
	"|\xddozD\xbc\x87Y\xe1\x13\x97\x969\xb5r\x09" +
	"\xff\xc3\x94\xa1\xedD-\xb7i\xdb\xa6]ky~\xc3" +
	"q\x8c\xea\x98\xe1\xba\x0dw\xf5\xd3\xe7;\xed\xbc\xd6\xf6" +
	"],\x89\xd3\xa3\xc4\xaf\xe5m(I\xd0v3(a" +
	"\x1f\xa6y\x1f>.A\x9bc\x00k[\xd6\xec<\x91" +
	"\xb6[\x82\xf6)\x86\x9c\xad[F\xe4?+\x0f\xa2o" +
	"Z\x86\xe7\xeb\x16\xc1A\x9a\x18\xd2k\xa9\x87\x17\x0d\x95" +
	"\xb7\x13\xe1\"\x91\xb6K\x82V\x8d#\xd4?G\xa4}" +
	"V\x82V\xef\x8a0\xf0\x9a\x8b^\xc55\x17I6\xdc" +
	"\xc8\xa0\xf8\xc7aa\x97\x9e\xa7\xd7\x8c\x9d\x94k4m" +
	"\x1f\xfd\xc4\xd0\xbfV\x9c\xbc\xa29^R\x1ej\x8fA" +
	"\x1egh\x19\xb6\xef\x9aF\xc2\x0f\xa3\xcbH\x97\x1f\xae" +
	"\xc0\xe05\xa5\xba\xdfU\x8ar\\\x8a\xa8\x12\xdb\xe3^" +
	"E\xfbe\xb6\xd0)\xcf\x1e\x86\x96\xd7\xacp?\x05\x88" +
	"\x01\x84\xb6b\xc2\xda\xe4\xf8\xa6\xb8\xe8a\xe2\x02\x17\x9a" +
	"\xed!\xf0\xb7k\xef\xf3\xc5\xb6\xe9\xbe\xabS\xd8\x09r" +
	"\xad\xd5%L7\xb9\xba\xe2K\xe5\xda\xad\xe2\x1c\xf0\x85" +
	"\xe1\xc57SL\x15\xdb\xe3\x9c\xbc\x1e\xac\x8b\xaf\x07\x91" +
	"\x92\x8dB\xac\xdaP\xc9\xe6T\xe2\xce\x10^\x0f\xac\xa9" +
	"\xce\x9d\xe16\x06\xc9\x8c\x16\xc4\x05J/z\x82\x13\xb9" +
	"8\x92\xb6mv-\xe7P\xfb\xab/\x17\xe1\x96\x13\xdc" +
	"\xb7\x85%\xb5c\xbb\xaa ,i\xf3vaI\x9b\xa6" +
	"\x88 \xb5}*\xa5\\2E\x94\xe3\xc64\xe6\xe8M" +
	"\xcf\x10-\xb4\x8cVg\xc2\x8a\x95\xa6\xe77\xac\xd5I" +
	"w\xb6\xcd\xa4\xcd*h\xf3\x82\x96o2@\xd9\xb4O" +
	"\xd0n\xd8\xd7\xa6\x9d'\x0a\xc26\x93\xe4{A\xe8\xbc" +
	"$U\xbc \xb4|\x92\xf4z\x10.`\x82\xb3z;" +
	"g\x0d_\x17S\x91X\xa5<\x80\x8d\xf1\xbe\x8a\x9a\xc7" +
	"\xab\x10.,\xf9\x80\xb1\x14\xf6a\xec\xf3z\xbdi\xbc" +
	"e\x87K+)\xb6\xd8\x96,g|\xaf\x94&\x8a\x1e" +
	"w\x08/\xfc\xca#eb\xcaq\x19\xf1\xeb\x00\xe1]" +
	"_\xb9w\x1f1\xe5\xa8\x0c\x16=\x9a\x10>\x1f\x95\xdb" +
	"\xf9\xb7/\xc9\x90\xa2\xbb1\xc2\xa7\x97r\x90\x7f3e" +
	"\xa4\xa2\xa7 \xc2G\xa3r\xd3<1e\xaf\x8ctx" +
	"e\x0e^\x9c\xf8\xd0\xa3\xbfze\xec\x0dR\xa6\xf9\xb7" +
	"\x1dr\xab3\xca%\\\xd0\x84\xce\xcf\xb0\x0d%\\\xd0" +
	"\x88\x12\x92\xad(!\xa8\x19\xfeBe\xbfa\x11\xf4\x12" +
	"\xe6\xf0\x8e6zhB+y\x89'`\xc8'\x9f0" +
	"\x17\xe5%a\x90zH\xf5\xbf\x00\x00\x00\xff\xff\x14\x0a" +
	"w\xc2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d4,
		Nodes: []uint64{
			0x877cd26353d8c6dc,
			0x8793b5fbd6643940,
			0x8983cc1a9e4a939d,
			0x8f4a712a743b821f,
			0x914d7b13f1aa6f22,
			0xa4c4d7f8d7ba7c08,
			0xb3118fb8880413b0,
			0xb8f8e1b648dabaf1,
			0xbc1bf7c331b9cd9b,
			0xc6463c7455502dc1,
			0xc69c96074e6c7ca8,
			0xc89fe6090d124297,
			0xd34247ee2cfed0e9,
			0xdf0aa4265613d8f2,
			0xdf6948129b1470f8,
			0xe04eda8ac92a26c8,
			0xe23e69569787c639,
			0xed106740f46e3497,
			0xef724cb1a0e4c68a,
			0xefed8c3251756e9a,
			0xf0528fb4c0286c6c,
			0xf19a6d25c67a5101,
			0xf312c211e0a2f7b4,
			0xfbbfeb0472cbb700,
		},
		Compressed: true,
	})
}
