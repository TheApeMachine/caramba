// Code generated by capnpc-go. DO NOT EDIT.

package system

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x961bc3af9f616692

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x961bc3af9f616692, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Agent) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Agent) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}

type System capnp.Struct

// System_TypeID is the unique identifier for the type System.
const System_TypeID = 0xeee3100b05a60304

func NewSystem(s *capnp.Segment) (System, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return System(st), err
}

func NewRootSystem(s *capnp.Segment) (System, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return System(st), err
}

func ReadRootSystem(msg *capnp.Message) (System, error) {
	root, err := msg.Root()
	return System(root.Struct()), err
}

func (s System) String() string {
	str, _ := text.Marshal(0xeee3100b05a60304, capnp.Struct(s))
	return str
}

func (s System) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (System) DecodeFromPtr(p capnp.Ptr) System {
	return System(capnp.Struct{}.DecodeFromPtr(p))
}

func (s System) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s System) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s System) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s System) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s System) Agents() (Agent_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Agent_List(p.List()), err
}

func (s System) HasAgents() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s System) SetAgents(v Agent_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewAgents sets the agents field to a newly
// allocated Agent_List, preferring placement in s's segment.
func (s System) NewAgents(n int32) (Agent_List, error) {
	l, err := NewAgent_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Agent_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// System_List is a list of System.
type System_List = capnp.StructList[System]

// NewSystem creates a new list of System.
func NewSystem_List(s *capnp.Segment, sz int32) (System_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[System](l), err
}

// System_Future is a wrapper for a System promised by a client call.
type System_Future struct{ *capnp.Future }

func (f System_Future) Struct() (System, error) {
	p, err := f.Future.Ptr()
	return System(p.Struct()), err
}

const schema_efed8c3251756e9a = "x\xda\x12\xa8p`1\xe4\x15gb`\x0a\x94`e" +
	"\xfb?)-q\xfe\xfa\xc3\xd2\xd3\x18\x04e\x18\xff\xcf" +
	"\xca+\x0d4\xeay\xfb\x9e\x81\x95\x91\x9d\x81\xc1\xf0\xa3" +
	"\x10\xa30#\x88%\xf8\xd7\x9e\x81\xf1?\x0b\xf32V" +
	"n\x81\xc7\xef\xb0(5\x96e\x94b\x14\xd6\x051\x85" +
	"5\x19\xed\x19t\xff\x17d\xa7\xeb'\x16d\xea3\x17" +
	"W\x16\x97\xa4\xe6\xeaC(\xbd\xe4\xc4\x82\xbc\x02+\xc7" +
	"\xf4\xd4<\xc6\x92\x00F\xc6@\x16f\x16\x06\x06\x16F" +
	"\x06\x06A^-\x06\x86@\x0ef\xc6@\x11&F\xfe" +
	"\xbc\xc4\xdcTF\x1e\x06&F\x1e\x06F\xfcF\x05W" +
	"\x16\x970\xa7\xe6\xa2\x99e\x055K\x85\x89\xd1>1" +
	"=5\xaf\xa4\x98\x91\x8f\x811\x80\x99\x91Q\x00\xe1c" +
	"\x06F\x90  \x00\x00\xff\xff\xb9OCu"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_efed8c3251756e9a,
		Nodes: []uint64{
			0x961bc3af9f616692,
			0xeee3100b05a60304,
		},
		Compressed: true,
	})
}
