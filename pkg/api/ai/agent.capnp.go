// Code generated by capnpc-go. DO NOT EDIT.

package ai

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	provider "github.com/theapemachine/caramba/pkg/api/provider"
)

type Agent capnp.Client

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0xdda7805c3d0666d5

func (c Agent) Process(ctx context.Context, params func(Agent_process_Params) error) (provider.ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      0,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "process",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_process_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return provider.ProviderParams_Future{Future: ans.Future()}, release

}

func (c Agent) GetName(ctx context.Context, params func(Agent_getName_Params) error) (Agent_getName_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      1,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "getName",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_getName_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Agent_getName_Results_Future{Future: ans.Future()}, release

}

func (c Agent) GetContext(ctx context.Context, params func(Agent_getContext_Params) error) (provider.ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      2,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "getContext",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_getContext_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return provider.ProviderParams_Future{Future: ans.Future()}, release

}

func (c Agent) SetContext(ctx context.Context, params func(Agent_setContext_Params) error) (Agent_setContext_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      3,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "setContext",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_setContext_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Agent_setContext_Results_Future{Future: ans.Future()}, release

}

func (c Agent) AddTool(ctx context.Context, params func(Agent_addTool_Params) error) (Agent_addTool_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      4,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "addTool",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_addTool_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Agent_addTool_Results_Future{Future: ans.Future()}, release

}

func (c Agent) ListTools(ctx context.Context, params func(Agent_listTools_Params) error) (Agent_listTools_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      5,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "listTools",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Agent_listTools_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Agent_listTools_Results_Future{Future: ans.Future()}, release

}

func (c Agent) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Agent) String() string {
	return "Agent(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Agent) AddRef() Agent {
	return Agent(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Agent) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Agent) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Agent) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Agent) IsSame(other Agent) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Agent) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Agent) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Agent_Server is a Agent with a local implementation.
type Agent_Server interface {
	Process(context.Context, Agent_process) error

	GetName(context.Context, Agent_getName) error

	GetContext(context.Context, Agent_getContext) error

	SetContext(context.Context, Agent_setContext) error

	AddTool(context.Context, Agent_addTool) error

	ListTools(context.Context, Agent_listTools) error
}

// Agent_NewServer creates a new Server from an implementation of Agent_Server.
func Agent_NewServer(s Agent_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Agent_Methods(nil, s), s, c)
}

// Agent_ServerToClient creates a new Client from an implementation of Agent_Server.
// The caller is responsible for calling Release on the returned Client.
func Agent_ServerToClient(s Agent_Server) Agent {
	return Agent(capnp.NewClient(Agent_NewServer(s)))
}

// Agent_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Agent_Methods(methods []server.Method, s Agent_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 6)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      0,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "process",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Process(ctx, Agent_process{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      1,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "getName",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetName(ctx, Agent_getName{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      2,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "getContext",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.GetContext(ctx, Agent_getContext{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      3,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "setContext",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.SetContext(ctx, Agent_setContext{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      4,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "addTool",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.AddTool(ctx, Agent_addTool{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xdda7805c3d0666d5,
			MethodID:      5,
			InterfaceName: "pkg/api/ai/agent.capnp:Agent",
			MethodName:    "listTools",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.ListTools(ctx, Agent_listTools{call})
		},
	})

	return methods
}

// Agent_process holds the state for a server call to Agent.process.
// See server.Call for documentation.
type Agent_process struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_process) Args() Agent_process_Params {
	return Agent_process_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_process) AllocResults() (provider.ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return provider.ProviderParams(r), err
}

// Agent_getName holds the state for a server call to Agent.getName.
// See server.Call for documentation.
type Agent_getName struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_getName) Args() Agent_getName_Params {
	return Agent_getName_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_getName) AllocResults() (Agent_getName_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_getName_Results(r), err
}

// Agent_getContext holds the state for a server call to Agent.getContext.
// See server.Call for documentation.
type Agent_getContext struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_getContext) Args() Agent_getContext_Params {
	return Agent_getContext_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_getContext) AllocResults() (provider.ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return provider.ProviderParams(r), err
}

// Agent_setContext holds the state for a server call to Agent.setContext.
// See server.Call for documentation.
type Agent_setContext struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_setContext) Args() Agent_setContext_Params {
	return Agent_setContext_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_setContext) AllocResults() (Agent_setContext_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_setContext_Results(r), err
}

// Agent_addTool holds the state for a server call to Agent.addTool.
// See server.Call for documentation.
type Agent_addTool struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_addTool) Args() Agent_addTool_Params {
	return Agent_addTool_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_addTool) AllocResults() (Agent_addTool_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_addTool_Results(r), err
}

// Agent_listTools holds the state for a server call to Agent.listTools.
// See server.Call for documentation.
type Agent_listTools struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Agent_listTools) Args() Agent_listTools_Params {
	return Agent_listTools_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Agent_listTools) AllocResults() (Agent_listTools_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_listTools_Results(r), err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.CapList[Agent]

// NewAgent_List creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Agent](l), err
}

type Agent_process_Params capnp.Struct

// Agent_process_Params_TypeID is the unique identifier for the type Agent_process_Params.
const Agent_process_Params_TypeID = 0xf1debfe13d597fa5

func NewAgent_process_Params(s *capnp.Segment) (Agent_process_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_process_Params(st), err
}

func NewRootAgent_process_Params(s *capnp.Segment) (Agent_process_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_process_Params(st), err
}

func ReadRootAgent_process_Params(msg *capnp.Message) (Agent_process_Params, error) {
	root, err := msg.Root()
	return Agent_process_Params(root.Struct()), err
}

func (s Agent_process_Params) String() string {
	str, _ := text.Marshal(0xf1debfe13d597fa5, capnp.Struct(s))
	return str
}

func (s Agent_process_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_process_Params) DecodeFromPtr(p capnp.Ptr) Agent_process_Params {
	return Agent_process_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_process_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_process_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_process_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_process_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent_process_Params) Params() (provider.ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return provider.ProviderParams(p.Struct()), err
}

func (s Agent_process_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent_process_Params) SetParams(v provider.ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated provider.ProviderParams struct, preferring placement in s's segment.
func (s Agent_process_Params) NewParams() (provider.ProviderParams, error) {
	ss, err := provider.NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return provider.ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Agent_process_Params_List is a list of Agent_process_Params.
type Agent_process_Params_List = capnp.StructList[Agent_process_Params]

// NewAgent_process_Params creates a new list of Agent_process_Params.
func NewAgent_process_Params_List(s *capnp.Segment, sz int32) (Agent_process_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent_process_Params](l), err
}

// Agent_process_Params_Future is a wrapper for a Agent_process_Params promised by a client call.
type Agent_process_Params_Future struct{ *capnp.Future }

func (f Agent_process_Params_Future) Struct() (Agent_process_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_process_Params(p.Struct()), err
}
func (p Agent_process_Params_Future) Params() provider.ProviderParams_Future {
	return provider.ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Agent_getName_Params capnp.Struct

// Agent_getName_Params_TypeID is the unique identifier for the type Agent_getName_Params.
const Agent_getName_Params_TypeID = 0xc5f32592c77e9f55

func NewAgent_getName_Params(s *capnp.Segment) (Agent_getName_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_getName_Params(st), err
}

func NewRootAgent_getName_Params(s *capnp.Segment) (Agent_getName_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_getName_Params(st), err
}

func ReadRootAgent_getName_Params(msg *capnp.Message) (Agent_getName_Params, error) {
	root, err := msg.Root()
	return Agent_getName_Params(root.Struct()), err
}

func (s Agent_getName_Params) String() string {
	str, _ := text.Marshal(0xc5f32592c77e9f55, capnp.Struct(s))
	return str
}

func (s Agent_getName_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_getName_Params) DecodeFromPtr(p capnp.Ptr) Agent_getName_Params {
	return Agent_getName_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_getName_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_getName_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_getName_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_getName_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Agent_getName_Params_List is a list of Agent_getName_Params.
type Agent_getName_Params_List = capnp.StructList[Agent_getName_Params]

// NewAgent_getName_Params creates a new list of Agent_getName_Params.
func NewAgent_getName_Params_List(s *capnp.Segment, sz int32) (Agent_getName_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Agent_getName_Params](l), err
}

// Agent_getName_Params_Future is a wrapper for a Agent_getName_Params promised by a client call.
type Agent_getName_Params_Future struct{ *capnp.Future }

func (f Agent_getName_Params_Future) Struct() (Agent_getName_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_getName_Params(p.Struct()), err
}

type Agent_getName_Results capnp.Struct

// Agent_getName_Results_TypeID is the unique identifier for the type Agent_getName_Results.
const Agent_getName_Results_TypeID = 0x90133f239f4723ea

func NewAgent_getName_Results(s *capnp.Segment) (Agent_getName_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_getName_Results(st), err
}

func NewRootAgent_getName_Results(s *capnp.Segment) (Agent_getName_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_getName_Results(st), err
}

func ReadRootAgent_getName_Results(msg *capnp.Message) (Agent_getName_Results, error) {
	root, err := msg.Root()
	return Agent_getName_Results(root.Struct()), err
}

func (s Agent_getName_Results) String() string {
	str, _ := text.Marshal(0x90133f239f4723ea, capnp.Struct(s))
	return str
}

func (s Agent_getName_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_getName_Results) DecodeFromPtr(p capnp.Ptr) Agent_getName_Results {
	return Agent_getName_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_getName_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_getName_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_getName_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_getName_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent_getName_Results) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Agent_getName_Results) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent_getName_Results) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Agent_getName_Results) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Agent_getName_Results_List is a list of Agent_getName_Results.
type Agent_getName_Results_List = capnp.StructList[Agent_getName_Results]

// NewAgent_getName_Results creates a new list of Agent_getName_Results.
func NewAgent_getName_Results_List(s *capnp.Segment, sz int32) (Agent_getName_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent_getName_Results](l), err
}

// Agent_getName_Results_Future is a wrapper for a Agent_getName_Results promised by a client call.
type Agent_getName_Results_Future struct{ *capnp.Future }

func (f Agent_getName_Results_Future) Struct() (Agent_getName_Results, error) {
	p, err := f.Future.Ptr()
	return Agent_getName_Results(p.Struct()), err
}

type Agent_getContext_Params capnp.Struct

// Agent_getContext_Params_TypeID is the unique identifier for the type Agent_getContext_Params.
const Agent_getContext_Params_TypeID = 0x88fe6a87be76d78b

func NewAgent_getContext_Params(s *capnp.Segment) (Agent_getContext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_getContext_Params(st), err
}

func NewRootAgent_getContext_Params(s *capnp.Segment) (Agent_getContext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_getContext_Params(st), err
}

func ReadRootAgent_getContext_Params(msg *capnp.Message) (Agent_getContext_Params, error) {
	root, err := msg.Root()
	return Agent_getContext_Params(root.Struct()), err
}

func (s Agent_getContext_Params) String() string {
	str, _ := text.Marshal(0x88fe6a87be76d78b, capnp.Struct(s))
	return str
}

func (s Agent_getContext_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_getContext_Params) DecodeFromPtr(p capnp.Ptr) Agent_getContext_Params {
	return Agent_getContext_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_getContext_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_getContext_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_getContext_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_getContext_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Agent_getContext_Params_List is a list of Agent_getContext_Params.
type Agent_getContext_Params_List = capnp.StructList[Agent_getContext_Params]

// NewAgent_getContext_Params creates a new list of Agent_getContext_Params.
func NewAgent_getContext_Params_List(s *capnp.Segment, sz int32) (Agent_getContext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Agent_getContext_Params](l), err
}

// Agent_getContext_Params_Future is a wrapper for a Agent_getContext_Params promised by a client call.
type Agent_getContext_Params_Future struct{ *capnp.Future }

func (f Agent_getContext_Params_Future) Struct() (Agent_getContext_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_getContext_Params(p.Struct()), err
}

type Agent_setContext_Params capnp.Struct

// Agent_setContext_Params_TypeID is the unique identifier for the type Agent_setContext_Params.
const Agent_setContext_Params_TypeID = 0x975a49e8507de038

func NewAgent_setContext_Params(s *capnp.Segment) (Agent_setContext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_setContext_Params(st), err
}

func NewRootAgent_setContext_Params(s *capnp.Segment) (Agent_setContext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_setContext_Params(st), err
}

func ReadRootAgent_setContext_Params(msg *capnp.Message) (Agent_setContext_Params, error) {
	root, err := msg.Root()
	return Agent_setContext_Params(root.Struct()), err
}

func (s Agent_setContext_Params) String() string {
	str, _ := text.Marshal(0x975a49e8507de038, capnp.Struct(s))
	return str
}

func (s Agent_setContext_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_setContext_Params) DecodeFromPtr(p capnp.Ptr) Agent_setContext_Params {
	return Agent_setContext_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_setContext_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_setContext_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_setContext_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_setContext_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent_setContext_Params) Params() (provider.ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return provider.ProviderParams(p.Struct()), err
}

func (s Agent_setContext_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent_setContext_Params) SetParams(v provider.ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated provider.ProviderParams struct, preferring placement in s's segment.
func (s Agent_setContext_Params) NewParams() (provider.ProviderParams, error) {
	ss, err := provider.NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return provider.ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Agent_setContext_Params_List is a list of Agent_setContext_Params.
type Agent_setContext_Params_List = capnp.StructList[Agent_setContext_Params]

// NewAgent_setContext_Params creates a new list of Agent_setContext_Params.
func NewAgent_setContext_Params_List(s *capnp.Segment, sz int32) (Agent_setContext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent_setContext_Params](l), err
}

// Agent_setContext_Params_Future is a wrapper for a Agent_setContext_Params promised by a client call.
type Agent_setContext_Params_Future struct{ *capnp.Future }

func (f Agent_setContext_Params_Future) Struct() (Agent_setContext_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_setContext_Params(p.Struct()), err
}
func (p Agent_setContext_Params_Future) Params() provider.ProviderParams_Future {
	return provider.ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Agent_setContext_Results capnp.Struct

// Agent_setContext_Results_TypeID is the unique identifier for the type Agent_setContext_Results.
const Agent_setContext_Results_TypeID = 0xf0b5548e5c41edf2

func NewAgent_setContext_Results(s *capnp.Segment) (Agent_setContext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_setContext_Results(st), err
}

func NewRootAgent_setContext_Results(s *capnp.Segment) (Agent_setContext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_setContext_Results(st), err
}

func ReadRootAgent_setContext_Results(msg *capnp.Message) (Agent_setContext_Results, error) {
	root, err := msg.Root()
	return Agent_setContext_Results(root.Struct()), err
}

func (s Agent_setContext_Results) String() string {
	str, _ := text.Marshal(0xf0b5548e5c41edf2, capnp.Struct(s))
	return str
}

func (s Agent_setContext_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_setContext_Results) DecodeFromPtr(p capnp.Ptr) Agent_setContext_Results {
	return Agent_setContext_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_setContext_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_setContext_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_setContext_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_setContext_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Agent_setContext_Results_List is a list of Agent_setContext_Results.
type Agent_setContext_Results_List = capnp.StructList[Agent_setContext_Results]

// NewAgent_setContext_Results creates a new list of Agent_setContext_Results.
func NewAgent_setContext_Results_List(s *capnp.Segment, sz int32) (Agent_setContext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Agent_setContext_Results](l), err
}

// Agent_setContext_Results_Future is a wrapper for a Agent_setContext_Results promised by a client call.
type Agent_setContext_Results_Future struct{ *capnp.Future }

func (f Agent_setContext_Results_Future) Struct() (Agent_setContext_Results, error) {
	p, err := f.Future.Ptr()
	return Agent_setContext_Results(p.Struct()), err
}

type Agent_addTool_Params capnp.Struct

// Agent_addTool_Params_TypeID is the unique identifier for the type Agent_addTool_Params.
const Agent_addTool_Params_TypeID = 0xa9c4db0d9495364c

func NewAgent_addTool_Params(s *capnp.Segment) (Agent_addTool_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_addTool_Params(st), err
}

func NewRootAgent_addTool_Params(s *capnp.Segment) (Agent_addTool_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_addTool_Params(st), err
}

func ReadRootAgent_addTool_Params(msg *capnp.Message) (Agent_addTool_Params, error) {
	root, err := msg.Root()
	return Agent_addTool_Params(root.Struct()), err
}

func (s Agent_addTool_Params) String() string {
	str, _ := text.Marshal(0xa9c4db0d9495364c, capnp.Struct(s))
	return str
}

func (s Agent_addTool_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_addTool_Params) DecodeFromPtr(p capnp.Ptr) Agent_addTool_Params {
	return Agent_addTool_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_addTool_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_addTool_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_addTool_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_addTool_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent_addTool_Params) Tool() (provider.Tool, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return provider.Tool(p.Struct()), err
}

func (s Agent_addTool_Params) HasTool() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent_addTool_Params) SetTool(v provider.Tool) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewTool sets the tool field to a newly
// allocated provider.Tool struct, preferring placement in s's segment.
func (s Agent_addTool_Params) NewTool() (provider.Tool, error) {
	ss, err := provider.NewTool(capnp.Struct(s).Segment())
	if err != nil {
		return provider.Tool{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Agent_addTool_Params_List is a list of Agent_addTool_Params.
type Agent_addTool_Params_List = capnp.StructList[Agent_addTool_Params]

// NewAgent_addTool_Params creates a new list of Agent_addTool_Params.
func NewAgent_addTool_Params_List(s *capnp.Segment, sz int32) (Agent_addTool_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent_addTool_Params](l), err
}

// Agent_addTool_Params_Future is a wrapper for a Agent_addTool_Params promised by a client call.
type Agent_addTool_Params_Future struct{ *capnp.Future }

func (f Agent_addTool_Params_Future) Struct() (Agent_addTool_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_addTool_Params(p.Struct()), err
}
func (p Agent_addTool_Params_Future) Tool() provider.Tool_Future {
	return provider.Tool_Future{Future: p.Future.Field(0, nil)}
}

type Agent_addTool_Results capnp.Struct

// Agent_addTool_Results_TypeID is the unique identifier for the type Agent_addTool_Results.
const Agent_addTool_Results_TypeID = 0xcbcdab614f9353c2

func NewAgent_addTool_Results(s *capnp.Segment) (Agent_addTool_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_addTool_Results(st), err
}

func NewRootAgent_addTool_Results(s *capnp.Segment) (Agent_addTool_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_addTool_Results(st), err
}

func ReadRootAgent_addTool_Results(msg *capnp.Message) (Agent_addTool_Results, error) {
	root, err := msg.Root()
	return Agent_addTool_Results(root.Struct()), err
}

func (s Agent_addTool_Results) String() string {
	str, _ := text.Marshal(0xcbcdab614f9353c2, capnp.Struct(s))
	return str
}

func (s Agent_addTool_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_addTool_Results) DecodeFromPtr(p capnp.Ptr) Agent_addTool_Results {
	return Agent_addTool_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_addTool_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_addTool_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_addTool_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_addTool_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Agent_addTool_Results_List is a list of Agent_addTool_Results.
type Agent_addTool_Results_List = capnp.StructList[Agent_addTool_Results]

// NewAgent_addTool_Results creates a new list of Agent_addTool_Results.
func NewAgent_addTool_Results_List(s *capnp.Segment, sz int32) (Agent_addTool_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Agent_addTool_Results](l), err
}

// Agent_addTool_Results_Future is a wrapper for a Agent_addTool_Results promised by a client call.
type Agent_addTool_Results_Future struct{ *capnp.Future }

func (f Agent_addTool_Results_Future) Struct() (Agent_addTool_Results, error) {
	p, err := f.Future.Ptr()
	return Agent_addTool_Results(p.Struct()), err
}

type Agent_listTools_Params capnp.Struct

// Agent_listTools_Params_TypeID is the unique identifier for the type Agent_listTools_Params.
const Agent_listTools_Params_TypeID = 0xd580d849ce372d39

func NewAgent_listTools_Params(s *capnp.Segment) (Agent_listTools_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_listTools_Params(st), err
}

func NewRootAgent_listTools_Params(s *capnp.Segment) (Agent_listTools_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Agent_listTools_Params(st), err
}

func ReadRootAgent_listTools_Params(msg *capnp.Message) (Agent_listTools_Params, error) {
	root, err := msg.Root()
	return Agent_listTools_Params(root.Struct()), err
}

func (s Agent_listTools_Params) String() string {
	str, _ := text.Marshal(0xd580d849ce372d39, capnp.Struct(s))
	return str
}

func (s Agent_listTools_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_listTools_Params) DecodeFromPtr(p capnp.Ptr) Agent_listTools_Params {
	return Agent_listTools_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_listTools_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_listTools_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_listTools_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_listTools_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// Agent_listTools_Params_List is a list of Agent_listTools_Params.
type Agent_listTools_Params_List = capnp.StructList[Agent_listTools_Params]

// NewAgent_listTools_Params creates a new list of Agent_listTools_Params.
func NewAgent_listTools_Params_List(s *capnp.Segment, sz int32) (Agent_listTools_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[Agent_listTools_Params](l), err
}

// Agent_listTools_Params_Future is a wrapper for a Agent_listTools_Params promised by a client call.
type Agent_listTools_Params_Future struct{ *capnp.Future }

func (f Agent_listTools_Params_Future) Struct() (Agent_listTools_Params, error) {
	p, err := f.Future.Ptr()
	return Agent_listTools_Params(p.Struct()), err
}

type Agent_listTools_Results capnp.Struct

// Agent_listTools_Results_TypeID is the unique identifier for the type Agent_listTools_Results.
const Agent_listTools_Results_TypeID = 0x9f1b03ca60ddf5bf

func NewAgent_listTools_Results(s *capnp.Segment) (Agent_listTools_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_listTools_Results(st), err
}

func NewRootAgent_listTools_Results(s *capnp.Segment) (Agent_listTools_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Agent_listTools_Results(st), err
}

func ReadRootAgent_listTools_Results(msg *capnp.Message) (Agent_listTools_Results, error) {
	root, err := msg.Root()
	return Agent_listTools_Results(root.Struct()), err
}

func (s Agent_listTools_Results) String() string {
	str, _ := text.Marshal(0x9f1b03ca60ddf5bf, capnp.Struct(s))
	return str
}

func (s Agent_listTools_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent_listTools_Results) DecodeFromPtr(p capnp.Ptr) Agent_listTools_Results {
	return Agent_listTools_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent_listTools_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent_listTools_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent_listTools_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent_listTools_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent_listTools_Results) Tools() (provider.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return provider.Tool_List(p.List()), err
}

func (s Agent_listTools_Results) HasTools() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent_listTools_Results) SetTools(v provider.Tool_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated provider.Tool_List, preferring placement in s's segment.
func (s Agent_listTools_Results) NewTools(n int32) (provider.Tool_List, error) {
	l, err := provider.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return provider.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Agent_listTools_Results_List is a list of Agent_listTools_Results.
type Agent_listTools_Results_List = capnp.StructList[Agent_listTools_Results]

// NewAgent_listTools_Results creates a new list of Agent_listTools_Results.
func NewAgent_listTools_Results_List(s *capnp.Segment, sz int32) (Agent_listTools_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Agent_listTools_Results](l), err
}

// Agent_listTools_Results_Future is a wrapper for a Agent_listTools_Results promised by a client call.
type Agent_listTools_Results_Future struct{ *capnp.Future }

func (f Agent_listTools_Results_Future) Struct() (Agent_listTools_Results, error) {
	p, err := f.Future.Ptr()
	return Agent_listTools_Results(p.Struct()), err
}

type AgentOptions capnp.Struct

// AgentOptions_TypeID is the unique identifier for the type AgentOptions.
const AgentOptions_TypeID = 0x93888ff325537778

func NewAgentOptions(s *capnp.Segment) (AgentOptions, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AgentOptions(st), err
}

func NewRootAgentOptions(s *capnp.Segment) (AgentOptions, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return AgentOptions(st), err
}

func ReadRootAgentOptions(msg *capnp.Message) (AgentOptions, error) {
	root, err := msg.Root()
	return AgentOptions(root.Struct()), err
}

func (s AgentOptions) String() string {
	str, _ := text.Marshal(0x93888ff325537778, capnp.Struct(s))
	return str
}

func (s AgentOptions) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AgentOptions) DecodeFromPtr(p capnp.Ptr) AgentOptions {
	return AgentOptions(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AgentOptions) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AgentOptions) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AgentOptions) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AgentOptions) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s AgentOptions) Provider() provider.Provider {
	p, _ := capnp.Struct(s).Ptr(0)
	return provider.Provider(p.Interface().Client())
}

func (s AgentOptions) HasProvider() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s AgentOptions) SetProvider(v provider.Provider) error {
	if !v.IsValid() {
		return capnp.Struct(s).SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().CapTable().Add(capnp.Client(v)))
	return capnp.Struct(s).SetPtr(0, in.ToPtr())
}

func (s AgentOptions) Context() (provider.ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return provider.ProviderParams(p.Struct()), err
}

func (s AgentOptions) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s AgentOptions) SetContext(v provider.ProviderParams) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated provider.ProviderParams struct, preferring placement in s's segment.
func (s AgentOptions) NewContext() (provider.ProviderParams, error) {
	ss, err := provider.NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return provider.ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// AgentOptions_List is a list of AgentOptions.
type AgentOptions_List = capnp.StructList[AgentOptions]

// NewAgentOptions creates a new list of AgentOptions.
func NewAgentOptions_List(s *capnp.Segment, sz int32) (AgentOptions_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[AgentOptions](l), err
}

// AgentOptions_Future is a wrapper for a AgentOptions promised by a client call.
type AgentOptions_Future struct{ *capnp.Future }

func (f AgentOptions_Future) Struct() (AgentOptions, error) {
	p, err := f.Future.Ptr()
	return AgentOptions(p.Struct()), err
}
func (p AgentOptions_Future) Provider() provider.Provider {
	return provider.Provider(p.Future.Field(0, nil).Client())
}

func (p AgentOptions_Future) Context() provider.ProviderParams_Future {
	return provider.ProviderParams_Future{Future: p.Future.Field(1, nil)}
}

const schema_d4c9c9f76e89a0d3 = "x\xda\x94T]H\x14k\x18~\xdf\xf9\x15\xf1o\x18" +
	"\xc1s8x\xe4\x1cW\xd0s\x8e\xee\xd1s*\x15d" +
	"w\xed\"\x8c\xca\x9d\xd5\xa5\x14/\x9at\x925ww" +
	"\xd8\x99t\x8br\xad\x1b\x8d\xe8\x87,\xa2\x8b\xb0\x1b\x89" +
	"\xa8\x88\x82n\x93\"\x09+\xbb\xa8\xa4\xa0\x8c\xea*\x04" +
	"!\x93\x88.\xec\x8bowgw\xdc\x16\xd6\xee\xe6\x9b" +
	"\xe7\xf9\x9e\xf7\xe7{\xde\xf7\xdf\x9d\x8c\x9b\xab/\xbc\x91" +
	"\x0f\x8cr\x88\x17\xc8\xf1\x17Cw\xc6\x06\xbe\x8d\x83T" +
	"\x8e\x00\x9c\x08\xf0_\x0b\x7f\x10\x81#\x8b\x95[&+" +
	"]\xf2\xe9\x04\xc2#\x85j\xf8\x01\x04\x947\xf0.@" +
	"\x12\x1d\xee\xa8Z95>\x01R\x19\x92g\x97\x8e\x85" +
	"\xbe\xcc\xce>\x07\x9e\xa1D?\xff'\xca\x1a/\x02\xc8" +
	"*?\x0cH\x1a\xdf\x1e\xf6~h\xeb>oW\xbbK" +
	"\x03\xa1<\x17W\x9b\xfe\xbc\xb0\xfb!\xfb\xdb\xa4\x9d\xb0" +
	"\x94 |\x8d\x13\xb6m<w\xb6\xf0\xd5\xfd+k\xf2" +
	"\x11\xf6\xc4\xf3\x11(\xc1?9\xf2\xe0L\xd5\xca\x8c\xad" +
	"\x14?\xc59r\xafc\xa2]\xbd:\xf7\xc8\x86x\x84" +
	"\x01\x8a4\xd5nz\xd2\xf6rt\xde\x86\xd4\x0a\x11\x8a" +
	"\xcc\xef\x15ZzF//\x80T\xc6\xa6\xab\x03\x94\x7f" +
	"\x15\x16\xe5*\x812\xff\x10\xc6P.\x17E\x00\xf2i" +
	"\xc9\xd3s\xb2\xf3\xf6G\x9b\x0e/\x1e\xa5:S\xb1\xae" +
	"\x96w\xd3o\x96\xedi/'\xd2^\x15\\\xf0\x94\xe8" +
	"\xfb\xfa\x9d\xaa\x1eprj\xc0\xa9\xf6k!\xb3\xaeW" +
	"\xd5Cz\xb3'\xfe\xdd\xaf\x99\x9b\xc3!S\x8b\x9a\x0e" +
	"\x97W\x8d\xa8A#\xf7\x85\x1djPs\xf84\xa3x" +
	"\xff\xa0i(\x1c\xcb\x01p\x08 \x15\xfe\x05\xa0\xe4\xb1" +
	"\xa8\x942X\x1cR\x83\x1a\x16\x00\x83\x05\x80)I6" +
	"\x9bd\xbbn\x06\xc4p\xc8\xf0\"*y)\xb1\x9a\xad" +
	"\x00J5\x8b\xca\xff\x0cJ\x88\xa5H\x7f\xd6\xb7\x02(" +
	"\xff\xb0\xa842H\xf4Hx(\xd0\xa7E\x00\x00%" +
	"\xc2_w^\xbb\xe8\x1f\x99\x03@\x94\x00c\xbd\x89\xaa" +
	"\xb0\x844\xec\xfa\xbd::\x1dyL\x91\x12[2\xd9" +
	"\xeb3~h\x88\xbd\xc2\xe6t\x85.=\x8e\xfet\x80" +
	"\xc1\x80av\x86\xc3\x83\x86\xc3\xe7\xd2\x8c\xcc\x166$" +
	"\x038\x18\xac0)\x0b\x8b\x00\xbd,b\x09y]\xf7" +
	"\xf7\xad\x99\xf7\x15\xab4LQ\xce0j_\x1f\x8d\xe2" +
	"\xf0\xaa\x111\xa3\x08\xfb3\xd1\x18\x19\xda\xb9K\xb0<" +
	"\x90\xd4^g&\x96c\xd6\xdd\x1fo\xc5ZC2\x99" +
	"\xfcbz\xa0\xb6\xf9\x85\xe5\x01R\xa3\x80\xd6\x83H7" +
	"[\x81\x91\xa6DL\x0f/ZkG\xba@\xb1\x13\"" +
	"2\xa9\x1d\x95\xbew\xa4\x1b\x18\xe9\x80\x88lj\xaf\xa0" +
	"5\x81R\x90b\x9a\x88\\jc\xa05\xffR\x17\xd5" +
	"\xdc.\"\x9f\x1a|\xb4\xf6\x8e\xe4\xf1\x01#5\x891" +
	"=\x12\xee\xd5\x0c\xc3\x8d\xb1d\x1b\xddH\xac)\x046" +
	"j\xba\x91\x18k\x8e\xb1d\x03\xddH\xac\xde\x00\x1an" +
	"\xf4b\xfa\x9d\xf2sy\xd9\x97\xb0\x1aX\x17\xb2\xf2\x93" +
	"\xa9e\xf3\xccz\x8c\xff=\x00\x00\xff\xffXU\xcb#"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d3,
		Nodes: []uint64{
			0x88fe6a87be76d78b,
			0x90133f239f4723ea,
			0x93888ff325537778,
			0x975a49e8507de038,
			0x9f1b03ca60ddf5bf,
			0xa9c4db0d9495364c,
			0xc5f32592c77e9f55,
			0xcbcdab614f9353c2,
			0xd580d849ce372d39,
			0xdda7805c3d0666d5,
			0xf0b5548e5c41edf2,
			0xf1debfe13d597fa5,
		},
		Compressed: true,
	})
}
