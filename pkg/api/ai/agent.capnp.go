// Code generated by capnpc-go. DO NOT EDIT.

package ai

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	provider "github.com/theapemachine/caramba/pkg/api/provider"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0xdda7805c3d0666d5

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0xdda7805c3d0666d5, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Agent) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Agent) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Agent) Context() (provider.ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return provider.ProviderParams(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetContext(v provider.ProviderParams) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated provider.ProviderParams struct, preferring placement in s's segment.
func (s Agent) NewContext() (provider.ProviderParams, error) {
	ss, err := provider.NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return provider.ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Context() provider.ProviderParams_Future {
	return provider.ProviderParams_Future{Future: p.Future.Field(1, nil)}
}

const schema_d4c9c9f76e89a0d3 = "x\xda\x128\xef\xc0b\xc8\xab\xcf\xca\xc0\x14h\xc3\xca" +
	"\xf6\xffj\x1a\x9bmL\xc3\xf2\xbb\x0c\x82\xe2\x8c\xff/" +
	"/\xe8\xcc\xfb~\xf2\xe4\x15\x06V&v\x06\x06\xe1Z" +
	"\xa6W\xc2\x9d`V+S9\xc3\xec\xff\x05\xd9\xe9\xfa" +
	"\x89\x05\x99\xfaL\x89\x99\xfa\x89\xe9\xa9y%z\xc9\x89" +
	"\x05y\x05V\x8e\xfc N\x00#c \x073\x0b\x03" +
	"\x03\x0b#\x03\x83\xa0\xa6\x16\x03C\xa0\x0a3c\xa0\x01" +
	"\x13\xa3 #\xa3\x08#HP\xd7\x89\x81!P\x83\x99" +
	"1\xd0\x84\x89\x91?/17\x95\x91\x87\x81\x89\x91\x87" +
	"\x81\xb1>9?\xaf$\xb5\xa2\x84Q\xe0\xbfQ\x84\x9c" +
	"F\xc5\xfe\xa23\x0c\x0c\x8c\x8c\x02\x0c\x8c\x80\x00\x00\x00" +
	"\xff\xffy\x9b*\xb1"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d3,
		Nodes: []uint64{
			0xdda7805c3d0666d5,
		},
		Compressed: true,
	})
}
