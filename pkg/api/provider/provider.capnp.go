// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	tool "github.com/theapemachine/caramba/pkg/api/tool"
	math "math"
)

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0x942fcc9e60ff257a

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0x942fcc9e60ff257a, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Reference() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasReference() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) ReferenceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetReference(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Message) ToolCalls() (ToolCall_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ToolCall_List(p.List()), err
}

func (s Message) HasToolCalls() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Message) SetToolCalls(v ToolCall_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewToolCalls sets the toolCalls field to a newly
// allocated ToolCall_List, preferring placement in s's segment.
func (s Message) NewToolCalls(n int32) (ToolCall_List, error) {
	l, err := NewToolCall_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ToolCall_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type ToolCall capnp.Struct

// ToolCall_TypeID is the unique identifier for the type ToolCall.
const ToolCall_TypeID = 0xb91d22d2904e0368

func NewToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func NewRootToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func ReadRootToolCall(msg *capnp.Message) (ToolCall, error) {
	root, err := msg.Root()
	return ToolCall(root.Struct()), err
}

func (s ToolCall) String() string {
	str, _ := text.Marshal(0xb91d22d2904e0368, capnp.Struct(s))
	return str
}

func (s ToolCall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCall) DecodeFromPtr(p capnp.Ptr) ToolCall {
	return ToolCall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCall) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCall) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCall) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCall) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCall) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCall) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCall) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCall) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ToolCall) Function() (ToolCallFunction, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ToolCallFunction(p.Struct()), err
}

func (s ToolCall) HasFunction() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ToolCall) SetFunction(v ToolCallFunction) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewFunction sets the function field to a newly
// allocated ToolCallFunction struct, preferring placement in s's segment.
func (s ToolCall) NewFunction() (ToolCallFunction, error) {
	ss, err := NewToolCallFunction(capnp.Struct(s).Segment())
	if err != nil {
		return ToolCallFunction{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ToolCall_List is a list of ToolCall.
type ToolCall_List = capnp.StructList[ToolCall]

// NewToolCall creates a new list of ToolCall.
func NewToolCall_List(s *capnp.Segment, sz int32) (ToolCall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ToolCall](l), err
}

// ToolCall_Future is a wrapper for a ToolCall promised by a client call.
type ToolCall_Future struct{ *capnp.Future }

func (f ToolCall_Future) Struct() (ToolCall, error) {
	p, err := f.Future.Ptr()
	return ToolCall(p.Struct()), err
}
func (p ToolCall_Future) Function() ToolCallFunction_Future {
	return ToolCallFunction_Future{Future: p.Future.Field(2, nil)}
}

type ToolCallFunction capnp.Struct

// ToolCallFunction_TypeID is the unique identifier for the type ToolCallFunction.
const ToolCallFunction_TypeID = 0xf8bb1fb5874771c3

func NewToolCallFunction(s *capnp.Segment) (ToolCallFunction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ToolCallFunction(st), err
}

func NewRootToolCallFunction(s *capnp.Segment) (ToolCallFunction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ToolCallFunction(st), err
}

func ReadRootToolCallFunction(msg *capnp.Message) (ToolCallFunction, error) {
	root, err := msg.Root()
	return ToolCallFunction(root.Struct()), err
}

func (s ToolCallFunction) String() string {
	str, _ := text.Marshal(0xf8bb1fb5874771c3, capnp.Struct(s))
	return str
}

func (s ToolCallFunction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCallFunction) DecodeFromPtr(p capnp.Ptr) ToolCallFunction {
	return ToolCallFunction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCallFunction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCallFunction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCallFunction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCallFunction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCallFunction) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCallFunction) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCallFunction) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCallFunction) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCallFunction) Arguments() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCallFunction) HasArguments() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCallFunction) ArgumentsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCallFunction) SetArguments(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ToolCallFunction_List is a list of ToolCallFunction.
type ToolCallFunction_List = capnp.StructList[ToolCallFunction]

// NewToolCallFunction creates a new list of ToolCallFunction.
func NewToolCallFunction_List(s *capnp.Segment, sz int32) (ToolCallFunction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ToolCallFunction](l), err
}

// ToolCallFunction_Future is a wrapper for a ToolCallFunction promised by a client call.
type ToolCallFunction_Future struct{ *capnp.Future }

func (f ToolCallFunction_Future) Struct() (ToolCallFunction, error) {
	p, err := f.Future.Ptr()
	return ToolCallFunction(p.Struct()), err
}

type ResponseFormat capnp.Struct

// ResponseFormat_TypeID is the unique identifier for the type ResponseFormat.
const ResponseFormat_TypeID = 0xc2b2bb6dcf781b2e

func NewResponseFormat(s *capnp.Segment) (ResponseFormat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ResponseFormat(st), err
}

func NewRootResponseFormat(s *capnp.Segment) (ResponseFormat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ResponseFormat(st), err
}

func ReadRootResponseFormat(msg *capnp.Message) (ResponseFormat, error) {
	root, err := msg.Root()
	return ResponseFormat(root.Struct()), err
}

func (s ResponseFormat) String() string {
	str, _ := text.Marshal(0xc2b2bb6dcf781b2e, capnp.Struct(s))
	return str
}

func (s ResponseFormat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ResponseFormat) DecodeFromPtr(p capnp.Ptr) ResponseFormat {
	return ResponseFormat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ResponseFormat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ResponseFormat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ResponseFormat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ResponseFormat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ResponseFormat) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ResponseFormat) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ResponseFormat) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ResponseFormat) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ResponseFormat) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ResponseFormat) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ResponseFormat) Schema() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ResponseFormat) HasSchema() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ResponseFormat) SchemaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetSchema(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ResponseFormat) Strict() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ResponseFormat) SetStrict(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ResponseFormat_List is a list of ResponseFormat.
type ResponseFormat_List = capnp.StructList[ResponseFormat]

// NewResponseFormat creates a new list of ResponseFormat.
func NewResponseFormat_List(s *capnp.Segment, sz int32) (ResponseFormat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ResponseFormat](l), err
}

// ResponseFormat_Future is a wrapper for a ResponseFormat promised by a client call.
type ResponseFormat_Future struct{ *capnp.Future }

func (f ResponseFormat_Future) Struct() (ResponseFormat, error) {
	p, err := f.Future.Ptr()
	return ResponseFormat(p.Struct()), err
}

type ProviderParams capnp.Struct

// ProviderParams_TypeID is the unique identifier for the type ProviderParams.
const ProviderParams_TypeID = 0xcc72bf78281e5832

func NewProviderParams(s *capnp.Segment) (ProviderParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return ProviderParams(st), err
}

func NewRootProviderParams(s *capnp.Segment) (ProviderParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return ProviderParams(st), err
}

func ReadRootProviderParams(msg *capnp.Message) (ProviderParams, error) {
	root, err := msg.Root()
	return ProviderParams(root.Struct()), err
}

func (s ProviderParams) String() string {
	str, _ := text.Marshal(0xcc72bf78281e5832, capnp.Struct(s))
	return str
}

func (s ProviderParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProviderParams) DecodeFromPtr(p capnp.Ptr) ProviderParams {
	return ProviderParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProviderParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProviderParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProviderParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProviderParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProviderParams) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProviderParams) HasModel() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProviderParams) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProviderParams) SetModel(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ProviderParams) Messages() (Message_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Message_List(p.List()), err
}

func (s ProviderParams) HasMessages() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProviderParams) SetMessages(v Message_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated Message_List, preferring placement in s's segment.
func (s ProviderParams) NewMessages(n int32) (Message_List, error) {
	l, err := NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ProviderParams) Tools() (tool.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return tool.Tool_List(p.List()), err
}

func (s ProviderParams) HasTools() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProviderParams) SetTools(v tool.Tool_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tool.Tool_List, preferring placement in s's segment.
func (s ProviderParams) NewTools(n int32) (tool.Tool_List, error) {
	l, err := tool.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tool.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ProviderParams) ResponseFormat() (ResponseFormat, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ResponseFormat(p.Struct()), err
}

func (s ProviderParams) HasResponseFormat() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ProviderParams) SetResponseFormat(v ResponseFormat) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewResponseFormat sets the responseFormat field to a newly
// allocated ResponseFormat struct, preferring placement in s's segment.
func (s ProviderParams) NewResponseFormat() (ResponseFormat, error) {
	ss, err := NewResponseFormat(capnp.Struct(s).Segment())
	if err != nil {
		return ResponseFormat{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ProviderParams) Temperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s ProviderParams) SetTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s ProviderParams) TopP() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ProviderParams) SetTopP(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ProviderParams) TopK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s ProviderParams) SetTopK(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s ProviderParams) FrequencyPenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s ProviderParams) SetFrequencyPenalty(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s ProviderParams) PresencePenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s ProviderParams) SetPresencePenalty(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s ProviderParams) MaxTokens() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s ProviderParams) SetMaxTokens(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s ProviderParams) Stream() bool {
	return capnp.Struct(s).Bit(352)
}

func (s ProviderParams) SetStream(v bool) {
	capnp.Struct(s).SetBit(352, v)
}

// ProviderParams_List is a list of ProviderParams.
type ProviderParams_List = capnp.StructList[ProviderParams]

// NewProviderParams creates a new list of ProviderParams.
func NewProviderParams_List(s *capnp.Segment, sz int32) (ProviderParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 4}, sz)
	return capnp.StructList[ProviderParams](l), err
}

// ProviderParams_Future is a wrapper for a ProviderParams promised by a client call.
type ProviderParams_Future struct{ *capnp.Future }

func (f ProviderParams_Future) Struct() (ProviderParams, error) {
	p, err := f.Future.Ptr()
	return ProviderParams(p.Struct()), err
}
func (p ProviderParams_Future) ResponseFormat() ResponseFormat_Future {
	return ResponseFormat_Future{Future: p.Future.Field(3, nil)}
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcd7e559dac2fad05

func (c Provider) Complete(ctx context.Context, params func(Provider_complete_Params) error) (ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      0,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "complete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_complete_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProviderParams_Future{Future: ans.Future()}, release

}

func (c Provider) Stream(ctx context.Context, params func(Provider_stream_Params) error) (ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      1,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "stream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_stream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProviderParams_Future{Future: ans.Future()}, release

}

func (c Provider) Embed(ctx context.Context, params func(Provider_embed_Params) error) (Provider_embed_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      2,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "embed",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_embed_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_embed_Results_Future{Future: ans.Future()}, release

}

func (c Provider) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return "Provider(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Complete(context.Context, Provider_complete) error

	Stream(context.Context, Provider_stream) error

	Embed(context.Context, Provider_embed) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      0,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "complete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Complete(ctx, Provider_complete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      1,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "stream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stream(ctx, Provider_stream{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      2,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "embed",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Embed(ctx, Provider_embed{call})
		},
	})

	return methods
}

// Provider_complete holds the state for a server call to Provider.complete.
// See server.Call for documentation.
type Provider_complete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_complete) Args() Provider_complete_Params {
	return Provider_complete_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_complete) AllocResults() (ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return ProviderParams(r), err
}

// Provider_stream holds the state for a server call to Provider.stream.
// See server.Call for documentation.
type Provider_stream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_stream) Args() Provider_stream_Params {
	return Provider_stream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_stream) AllocResults() (ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 4})
	return ProviderParams(r), err
}

// Provider_embed holds the state for a server call to Provider.embed.
// See server.Call for documentation.
type Provider_embed struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_embed) Args() Provider_embed_Params {
	return Provider_embed_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_embed) AllocResults() (Provider_embed_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider_List creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_complete_Params capnp.Struct

// Provider_complete_Params_TypeID is the unique identifier for the type Provider_complete_Params.
const Provider_complete_Params_TypeID = 0xfeabc353a0085a4e

func NewProvider_complete_Params(s *capnp.Segment) (Provider_complete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_complete_Params(st), err
}

func NewRootProvider_complete_Params(s *capnp.Segment) (Provider_complete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_complete_Params(st), err
}

func ReadRootProvider_complete_Params(msg *capnp.Message) (Provider_complete_Params, error) {
	root, err := msg.Root()
	return Provider_complete_Params(root.Struct()), err
}

func (s Provider_complete_Params) String() string {
	str, _ := text.Marshal(0xfeabc353a0085a4e, capnp.Struct(s))
	return str
}

func (s Provider_complete_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_complete_Params) DecodeFromPtr(p capnp.Ptr) Provider_complete_Params {
	return Provider_complete_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_complete_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_complete_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_complete_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_complete_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_complete_Params) Params() (ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProviderParams(p.Struct()), err
}

func (s Provider_complete_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_complete_Params) SetParams(v ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated ProviderParams struct, preferring placement in s's segment.
func (s Provider_complete_Params) NewParams() (ProviderParams, error) {
	ss, err := NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_complete_Params_List is a list of Provider_complete_Params.
type Provider_complete_Params_List = capnp.StructList[Provider_complete_Params]

// NewProvider_complete_Params creates a new list of Provider_complete_Params.
func NewProvider_complete_Params_List(s *capnp.Segment, sz int32) (Provider_complete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_complete_Params](l), err
}

// Provider_complete_Params_Future is a wrapper for a Provider_complete_Params promised by a client call.
type Provider_complete_Params_Future struct{ *capnp.Future }

func (f Provider_complete_Params_Future) Struct() (Provider_complete_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_complete_Params(p.Struct()), err
}
func (p Provider_complete_Params_Future) Params() ProviderParams_Future {
	return ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Provider_stream_Params capnp.Struct

// Provider_stream_Params_TypeID is the unique identifier for the type Provider_stream_Params.
const Provider_stream_Params_TypeID = 0xe5e77612893edd84

func NewProvider_stream_Params(s *capnp.Segment) (Provider_stream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_stream_Params(st), err
}

func NewRootProvider_stream_Params(s *capnp.Segment) (Provider_stream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_stream_Params(st), err
}

func ReadRootProvider_stream_Params(msg *capnp.Message) (Provider_stream_Params, error) {
	root, err := msg.Root()
	return Provider_stream_Params(root.Struct()), err
}

func (s Provider_stream_Params) String() string {
	str, _ := text.Marshal(0xe5e77612893edd84, capnp.Struct(s))
	return str
}

func (s Provider_stream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_stream_Params) DecodeFromPtr(p capnp.Ptr) Provider_stream_Params {
	return Provider_stream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_stream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_stream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_stream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_stream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_stream_Params) Params() (ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProviderParams(p.Struct()), err
}

func (s Provider_stream_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_stream_Params) SetParams(v ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated ProviderParams struct, preferring placement in s's segment.
func (s Provider_stream_Params) NewParams() (ProviderParams, error) {
	ss, err := NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_stream_Params_List is a list of Provider_stream_Params.
type Provider_stream_Params_List = capnp.StructList[Provider_stream_Params]

// NewProvider_stream_Params creates a new list of Provider_stream_Params.
func NewProvider_stream_Params_List(s *capnp.Segment, sz int32) (Provider_stream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_stream_Params](l), err
}

// Provider_stream_Params_Future is a wrapper for a Provider_stream_Params promised by a client call.
type Provider_stream_Params_Future struct{ *capnp.Future }

func (f Provider_stream_Params_Future) Struct() (Provider_stream_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_stream_Params(p.Struct()), err
}
func (p Provider_stream_Params_Future) Params() ProviderParams_Future {
	return ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Provider_embed_Params capnp.Struct

// Provider_embed_Params_TypeID is the unique identifier for the type Provider_embed_Params.
const Provider_embed_Params_TypeID = 0xca578ca53d8688c9

func NewProvider_embed_Params(s *capnp.Segment) (Provider_embed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Params(st), err
}

func NewRootProvider_embed_Params(s *capnp.Segment) (Provider_embed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Params(st), err
}

func ReadRootProvider_embed_Params(msg *capnp.Message) (Provider_embed_Params, error) {
	root, err := msg.Root()
	return Provider_embed_Params(root.Struct()), err
}

func (s Provider_embed_Params) String() string {
	str, _ := text.Marshal(0xca578ca53d8688c9, capnp.Struct(s))
	return str
}

func (s Provider_embed_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_embed_Params) DecodeFromPtr(p capnp.Ptr) Provider_embed_Params {
	return Provider_embed_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_embed_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_embed_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_embed_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_embed_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_embed_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider_embed_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_embed_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider_embed_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_embed_Params_List is a list of Provider_embed_Params.
type Provider_embed_Params_List = capnp.StructList[Provider_embed_Params]

// NewProvider_embed_Params creates a new list of Provider_embed_Params.
func NewProvider_embed_Params_List(s *capnp.Segment, sz int32) (Provider_embed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_embed_Params](l), err
}

// Provider_embed_Params_Future is a wrapper for a Provider_embed_Params promised by a client call.
type Provider_embed_Params_Future struct{ *capnp.Future }

func (f Provider_embed_Params_Future) Struct() (Provider_embed_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_embed_Params(p.Struct()), err
}

type Provider_embed_Results capnp.Struct

// Provider_embed_Results_TypeID is the unique identifier for the type Provider_embed_Results.
const Provider_embed_Results_TypeID = 0xdbf6672690b19937

func NewProvider_embed_Results(s *capnp.Segment) (Provider_embed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(st), err
}

func NewRootProvider_embed_Results(s *capnp.Segment) (Provider_embed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(st), err
}

func ReadRootProvider_embed_Results(msg *capnp.Message) (Provider_embed_Results, error) {
	root, err := msg.Root()
	return Provider_embed_Results(root.Struct()), err
}

func (s Provider_embed_Results) String() string {
	str, _ := text.Marshal(0xdbf6672690b19937, capnp.Struct(s))
	return str
}

func (s Provider_embed_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_embed_Results) DecodeFromPtr(p capnp.Ptr) Provider_embed_Results {
	return Provider_embed_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_embed_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_embed_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_embed_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_embed_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_embed_Results) Embedding() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s Provider_embed_Results) HasEmbedding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_embed_Results) SetEmbedding(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEmbedding sets the embedding field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Provider_embed_Results) NewEmbedding(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Provider_embed_Results_List is a list of Provider_embed_Results.
type Provider_embed_Results_List = capnp.StructList[Provider_embed_Results]

// NewProvider_embed_Results creates a new list of Provider_embed_Results.
func NewProvider_embed_Results_List(s *capnp.Segment, sz int32) (Provider_embed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_embed_Results](l), err
}

// Provider_embed_Results_Future is a wrapper for a Provider_embed_Results promised by a client call.
type Provider_embed_Results_Future struct{ *capnp.Future }

func (f Provider_embed_Results_Future) Struct() (Provider_embed_Results, error) {
	p, err := f.Future.Ptr()
	return Provider_embed_Results(p.Struct()), err
}

const schema_d4c9c9f76e89a0d2 = "x\xda\x94U\xcdoTU\x14?\xbf{\xe7\xcdG)" +
	"\xd2\xe7{\x0b?\x82\xad\xa65@\x80\xf2\x11\xa34\xe2" +
	"T\x04\x0c\x15\xc8\xdc\x0eD4\x90\xf41si'\xcc" +
	"\xfb\xe8\x9b78m@\xc1T\xa4\x84\xc4\x9a\xb0q\xa1" +
	"\xc1\x85+1\x06\x12\x17\xcaB#\x0bS\xc4\x18\x89;" +
	"\xe3\x92\x10\xfe\x00\xbf\x16\xfa\xcc\x9d\xe9\xfb\xa0\xc4\x8c\xec" +
	"\xee\xfd\x9d\x93s\xce\xef\xdcs~w\xd3#|4\xb3" +
	"y\xe5{Ybb\xaf\x96\x0dg\x87\xc2\x89\x8fn\x0e" +
	"_$}\x00\xe1\xadK\xf3\xce\x1f\x8b\x8b?\x93\xa6\xe5" +
	"\x88\xb6n\xe0;`l\xe7\xea\xb8\x8d\xf7\x83\x10N\xf1" +
	"\xfd\x0b\xb7\x9eZ\xfd\xe52\xef\xb6\x8b\x95\x19\x83\xd1\xcc" +
	"\xe4\x88\x8c\xe9\xcc\xe7\x84p\xe3\xe3\xad\x1f\xedkW\xbf" +
	"%1\x80\xfb\xbcWj\xb30\x9eTi\x8c\xd5\xda\x1d" +
	"B\xb8x\xee\xec\xf6O.\xbcz\x83\xf4\xb5 \xd2\xa0" +
	"\x9c~\xd3\xae\x82`h\xd9\"!\xdcr\xe8\x895\xad" +
	"\xaf\xfd\x9b*\\6\x15Ne\xdc:\x94\x9d\x85\xb1-" +
	"\xab\x8e\xcfd]F\x08\xb5\xcf\x86/\x7fx\xf0\xcd\x1f" +
	"H\x1f\xe0\x897a\xeb\xdd\xfc\x18\x8c\xbf\xf3*\xf3_" +
	"\xf9\xef\x8cf!G\x14>\xfb\xc1\x95\x85\xa7'\x7f\xff" +
	"%\x9d\xfdH\xe1+\x95\xdd.\xa8\xecs\xbf\xbe0\xff" +
	"\xf0\x89;\xb7\xd3\x0e\x1fw\x1c\xae\xb4\x1d\xaeO\xbf\xfc" +
	"\xee\x17\xfd\xd7\xfe\\\xd6\x1a\xa6\x1c\x7f*\x9c\x87qW" +
	"%2n\x17\xde \x84\xfb_\xcf_*_\xff\xf4\x9f" +
	"t\xb4]=7T\xb4\xd7z\x8aT\x0d\xbd\xe3\x93\xc3" +
	"\x96W\x1b\xcex\xbe{\xa2V\x95\xfept\xd8X\xb1" +
	"<\xc7\x1b\xd9'\x1b\x0dkRR\x09\x10&\xcf\x10e" +
	"@\xa4\x9fZG$Z\x1cb\x8eA\x07L(\xf0\xcc" +
	"\x0e\"q\x92C\x9cc\xd0\x193\xc1\x88\xf4w\x94\xe7" +
	"i\x0eq\x81A\xe7\xdc\x04'\xd2\xe7\xc7\x89\xc49\x0e" +
	"q\x91A\xcfdLd\x88\xf4\xf7\x15\xb8\xc0!.3" +
	"\xac\xf2\xdd\xbaD/1\xf4\x12\xde\xaa\xb8N \x9d " +
	"\xba\xafr,;6\x86\xbe<&}\xe9T\x08\x09\x16" +
	"\xb8n\xfd%\xab^'4\xf0\x10\xa1\xc4\x81\xbed\xa6" +
	"\x08\x0a\xecN\xfd@\x14\xa5M\xbe7&\xbf\xeb1\"" +
	"1\xca!\xf6\xa6\xc8\xefQ<wr\x88R\x8a\xfc\xbe" +
	"1\"\xb1\x97C\x1cb\xe0\xb5jL \x98\xf1\x92b" +
	"\x8f5\x9dJPs\x1d\"B_\xf2\xbc\x04\xf4\xfd\x9f" +
	"*\xc7e\xc3s\x9d\x86,\xeev}\xdb\x0aT\xa9}" +
	"q\xa9\x96\xaa\xea0\x87\x98J\x95*\x8f\x12\x89*\x87" +
	"\xf0R\xa5\xda#Db\x8aC\x04\x0cXz\xa6i\x85" +
	"\xd59D\x8b-kzU6*~\xcd\x0b(Ws" +
	"\x9d\x08-6*S\xd2\xb6\x92k\xe0\xd7*\x01@\x0c" +
	"H1\xd1\xfe\x8bI)\xbaJ\xfb\xa8\xac\x0e\x96\xfa-" +
	"\xdf\xb2\x1b\"\x13\xb3Y\xa9\xd8\xe49\x84\xc9\xb0*\x90" +
	"\xadx\"\xbaw)\x8a],\xb5\x83\xaa.\xad\x8f\xe2" +
	"\x1aC\xd8BT\x1e\x00Gy=\x92F\x19k1F" +
	"T^\xa3\xf0\x9dHze\xbc\xd8\xf6\x7f^\xe1\x87\x90" +
	"\x8c\xb5q\x10\xb3D\xe5\x03\x0a\x9f\x00\x03:\x83m\x1c" +
	"\xc1Q\xa2\xf2a\x05O)w\x0d&4\"Cb\x1d" +
	"QyB\xe1u\x85g\x99\x89,\x91Qk\xe3U\x85" +
	"{\x0a\xcfqS-\xaea\xe3<Q\xd9S\xf8I\x85" +
	"\xe73&\xf2D\xc6\x0c\xde&*\xb7\x14>\xa7\xf0B" +
	"\x8f\x89\x02\x91q\x06\xe3D\xe5\xd3\x0a\xbf\x00\x86\xcd=" +
	"\x130\xd1Cd\xccc\x84\xa8<\xa7\x0c\x0b`\xe8\xb7" +
	"\xdd\xaa\xac\xc7\xbd\xb4;\x1b\xdfP\xf3\x18/O,\xdf" +
	"\x9d\xe5\xe9W\x1b\x96\xda\xad\x99\xb3\xa7\xbe\x0f\xcf\x7f\xb3" +
	"\x18\xed\x96\xbf4\x94\xb44\x95\xe8KTzi\xb0\x03" +
	"i{\xd2\xb7\x02\xca5}\x89\x15\xc4\xb0Bm\x86\xeb" +
	"\x95\xd2\x97W\xa2Kx\xcc\x97\xd3M\xe9T0S\x92" +
	"\x8eU\x0ff\x88b\x9b\xe7\xcb\x86t*\x12\x91)\xb6" +
	"\xd8V\xeb\x80{\\:J\x09\xf2\xc4\x90\xef\xcc\xa5\xb4" +
	"\xec\xfb\xe6\xb2\xeb\xecD:\xa0\x11\xc5\xc2\x8a\xe8\xb7\xd0" +
	"\xc5\x181}O\x0e\x89\x84'\xb6\xed#\xc4\xf4\xcd9" +
	"\xb0\xf8\xf7A\xf4\x11\xe8C[\x88\xe9\x8f\xe6\xc2\x8ak" +
	"{u\x19H\"\x1a\x8dj\x1cE\x7f{\x17FQ\xc2" +
	"\x83/\xd0xQ6\x9a\xf5\xe0\x9e\x0dR\x1a\xdb\xcb!" +
	"\xd60\x84m\xafj\xcd!LF/\xd9C\xec\x1em" +
	"\xec\x9e\xaaS\xe8\xe0\xd2^\xa5S\x8d$\xcbZ\xf4\xda" +
	"V\xf4%\x9f\xeb2y\xd3\xba\x89\xf0\xeeX%\xd5#" +
	"\xe4\xe34k\x95&\x0cr\x88M)\x85\xdb\xa0h\xae" +
	"\xe7\x10\xcf-\x17.\xcb\x9fl\xda\xd2\x09\xd4<,\x17" +
	"\x8flW\xb2\xd1\x1b\x0dv\xd8\x12=(\xdf\x7f\x03\x00" +
	"\x00\xff\xff]<9\xd1"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d2,
		Nodes: []uint64{
			0x942fcc9e60ff257a,
			0xb91d22d2904e0368,
			0xc2b2bb6dcf781b2e,
			0xca578ca53d8688c9,
			0xcc72bf78281e5832,
			0xcd7e559dac2fad05,
			0xdbf6672690b19937,
			0xe5e77612893edd84,
			0xf8bb1fb5874771c3,
			0xfeabc353a0085a4e,
		},
		Compressed: true,
	})
}
