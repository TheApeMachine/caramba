// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	math "math"
)

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0x942fcc9e60ff257a

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0x942fcc9e60ff257a, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Reference() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasReference() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) ReferenceBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetReference(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Message) ToolCalls() (ToolCall_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ToolCall_List(p.List()), err
}

func (s Message) HasToolCalls() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Message) SetToolCalls(v ToolCall_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewToolCalls sets the toolCalls field to a newly
// allocated ToolCall_List, preferring placement in s's segment.
func (s Message) NewToolCalls(n int32) (ToolCall_List, error) {
	l, err := NewToolCall_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ToolCall_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type ToolCall capnp.Struct

// ToolCall_TypeID is the unique identifier for the type ToolCall.
const ToolCall_TypeID = 0xb91d22d2904e0368

func NewToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func NewRootToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func ReadRootToolCall(msg *capnp.Message) (ToolCall, error) {
	root, err := msg.Root()
	return ToolCall(root.Struct()), err
}

func (s ToolCall) String() string {
	str, _ := text.Marshal(0xb91d22d2904e0368, capnp.Struct(s))
	return str
}

func (s ToolCall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCall) DecodeFromPtr(p capnp.Ptr) ToolCall {
	return ToolCall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCall) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCall) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCall) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCall) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCall) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCall) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCall) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCall) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ToolCall) Function() (ToolCallFunction, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return ToolCallFunction(p.Struct()), err
}

func (s ToolCall) HasFunction() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ToolCall) SetFunction(v ToolCallFunction) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewFunction sets the function field to a newly
// allocated ToolCallFunction struct, preferring placement in s's segment.
func (s ToolCall) NewFunction() (ToolCallFunction, error) {
	ss, err := NewToolCallFunction(capnp.Struct(s).Segment())
	if err != nil {
		return ToolCallFunction{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// ToolCall_List is a list of ToolCall.
type ToolCall_List = capnp.StructList[ToolCall]

// NewToolCall creates a new list of ToolCall.
func NewToolCall_List(s *capnp.Segment, sz int32) (ToolCall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ToolCall](l), err
}

// ToolCall_Future is a wrapper for a ToolCall promised by a client call.
type ToolCall_Future struct{ *capnp.Future }

func (f ToolCall_Future) Struct() (ToolCall, error) {
	p, err := f.Future.Ptr()
	return ToolCall(p.Struct()), err
}
func (p ToolCall_Future) Function() ToolCallFunction_Future {
	return ToolCallFunction_Future{Future: p.Future.Field(2, nil)}
}

type ToolCallFunction capnp.Struct

// ToolCallFunction_TypeID is the unique identifier for the type ToolCallFunction.
const ToolCallFunction_TypeID = 0xf8bb1fb5874771c3

func NewToolCallFunction(s *capnp.Segment) (ToolCallFunction, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ToolCallFunction(st), err
}

func NewRootToolCallFunction(s *capnp.Segment) (ToolCallFunction, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return ToolCallFunction(st), err
}

func ReadRootToolCallFunction(msg *capnp.Message) (ToolCallFunction, error) {
	root, err := msg.Root()
	return ToolCallFunction(root.Struct()), err
}

func (s ToolCallFunction) String() string {
	str, _ := text.Marshal(0xf8bb1fb5874771c3, capnp.Struct(s))
	return str
}

func (s ToolCallFunction) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCallFunction) DecodeFromPtr(p capnp.Ptr) ToolCallFunction {
	return ToolCallFunction(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCallFunction) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCallFunction) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCallFunction) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCallFunction) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCallFunction) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCallFunction) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCallFunction) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCallFunction) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCallFunction) Arguments() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCallFunction) HasArguments() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCallFunction) ArgumentsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCallFunction) SetArguments(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

// ToolCallFunction_List is a list of ToolCallFunction.
type ToolCallFunction_List = capnp.StructList[ToolCallFunction]

// NewToolCallFunction creates a new list of ToolCallFunction.
func NewToolCallFunction_List(s *capnp.Segment, sz int32) (ToolCallFunction_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[ToolCallFunction](l), err
}

// ToolCallFunction_Future is a wrapper for a ToolCallFunction promised by a client call.
type ToolCallFunction_Future struct{ *capnp.Future }

func (f ToolCallFunction_Future) Struct() (ToolCallFunction, error) {
	p, err := f.Future.Ptr()
	return ToolCallFunction(p.Struct()), err
}

type Tool capnp.Struct

// Tool_TypeID is the unique identifier for the type Tool.
const Tool_TypeID = 0xfd1fe2c5b22b2edc

func NewTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func NewRootTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func ReadRootTool(msg *capnp.Message) (Tool, error) {
	root, err := msg.Root()
	return Tool(root.Struct()), err
}

func (s Tool) String() string {
	str, _ := text.Marshal(0xfd1fe2c5b22b2edc, capnp.Struct(s))
	return str
}

func (s Tool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tool) DecodeFromPtr(p capnp.Ptr) Tool {
	return Tool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tool) Function() (Function, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Function(p.Struct()), err
}

func (s Tool) HasFunction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tool) SetFunction(v Function) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFunction sets the function field to a newly
// allocated Function struct, preferring placement in s's segment.
func (s Tool) NewFunction() (Function, error) {
	ss, err := NewFunction(capnp.Struct(s).Segment())
	if err != nil {
		return Function{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Tool_List is a list of Tool.
type Tool_List = capnp.StructList[Tool]

// NewTool creates a new list of Tool.
func NewTool_List(s *capnp.Segment, sz int32) (Tool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Tool](l), err
}

// Tool_Future is a wrapper for a Tool promised by a client call.
type Tool_Future struct{ *capnp.Future }

func (f Tool_Future) Struct() (Tool, error) {
	p, err := f.Future.Ptr()
	return Tool(p.Struct()), err
}
func (p Tool_Future) Function() Function_Future {
	return Function_Future{Future: p.Future.Field(0, nil)}
}

type Function capnp.Struct

// Function_TypeID is the unique identifier for the type Function.
const Function_TypeID = 0xf37ab2110076b105

func NewFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Function(st), err
}

func NewRootFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Function(st), err
}

func ReadRootFunction(msg *capnp.Message) (Function, error) {
	root, err := msg.Root()
	return Function(root.Struct()), err
}

func (s Function) String() string {
	str, _ := text.Marshal(0xf37ab2110076b105, capnp.Struct(s))
	return str
}

func (s Function) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Function) DecodeFromPtr(p capnp.Ptr) Function {
	return Function(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Function) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Function) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Function) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Function) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Function) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Function) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Function) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Function) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Function) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Function) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Function) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Function) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Function) Parameters() (Parameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Parameters(p.Struct()), err
}

func (s Function) HasParameters() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Function) SetParameters(v Parameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewParameters sets the parameters field to a newly
// allocated Parameters struct, preferring placement in s's segment.
func (s Function) NewParameters() (Parameters, error) {
	ss, err := NewParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Function_List is a list of Function.
type Function_List = capnp.StructList[Function]

// NewFunction creates a new list of Function.
func NewFunction_List(s *capnp.Segment, sz int32) (Function_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Function](l), err
}

// Function_Future is a wrapper for a Function promised by a client call.
type Function_Future struct{ *capnp.Future }

func (f Function_Future) Struct() (Function, error) {
	p, err := f.Future.Ptr()
	return Function(p.Struct()), err
}
func (p Function_Future) Parameters() Parameters_Future {
	return Parameters_Future{Future: p.Future.Field(2, nil)}
}

type Parameters capnp.Struct

// Parameters_TypeID is the unique identifier for the type Parameters.
const Parameters_TypeID = 0xdb8fb313a2bf1bbd

func NewParameters(s *capnp.Segment) (Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Parameters(st), err
}

func NewRootParameters(s *capnp.Segment) (Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Parameters(st), err
}

func ReadRootParameters(msg *capnp.Message) (Parameters, error) {
	root, err := msg.Root()
	return Parameters(root.Struct()), err
}

func (s Parameters) String() string {
	str, _ := text.Marshal(0xdb8fb313a2bf1bbd, capnp.Struct(s))
	return str
}

func (s Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Parameters) DecodeFromPtr(p capnp.Ptr) Parameters {
	return Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Parameters) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextDefault("object"), err
}

func (s Parameters) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Parameters) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytesDefault("object"), err
}

func (s Parameters) SetType(v string) error {
	return capnp.Struct(s).SetNewText(0, v)
}

func (s Parameters) Properties() (Property_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Property_List(p.List()), err
}

func (s Parameters) HasProperties() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Parameters) SetProperties(v Property_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Property_List, preferring placement in s's segment.
func (s Parameters) NewProperties(n int32) (Property_List, error) {
	l, err := NewProperty_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Property_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Parameters) Required() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Parameters) HasRequired() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Parameters) SetRequired(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewRequired sets the required field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Parameters) NewRequired(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Parameters_List is a list of Parameters.
type Parameters_List = capnp.StructList[Parameters]

// NewParameters creates a new list of Parameters.
func NewParameters_List(s *capnp.Segment, sz int32) (Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Parameters](l), err
}

// Parameters_Future is a wrapper for a Parameters promised by a client call.
type Parameters_Future struct{ *capnp.Future }

func (f Parameters_Future) Struct() (Parameters, error) {
	p, err := f.Future.Ptr()
	return Parameters(p.Struct()), err
}

type Property capnp.Struct

// Property_TypeID is the unique identifier for the type Property.
const Property_TypeID = 0xa6c2b4b8797daa9f

func NewProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func NewRootProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func ReadRootProperty(msg *capnp.Message) (Property, error) {
	root, err := msg.Root()
	return Property(root.Struct()), err
}

func (s Property) String() string {
	str, _ := text.Marshal(0xa6c2b4b8797daa9f, capnp.Struct(s))
	return str
}

func (s Property) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Property) DecodeFromPtr(p capnp.Ptr) Property {
	return Property(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Property) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Property) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Property) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Property) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Property) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Property) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Property) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Property) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Property) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Property) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Property) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Property) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Property) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Property) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Property) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Property) SetDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Property) Enum() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Property) HasEnum() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Property) SetEnum(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEnum sets the enum field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Property) NewEnum(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Property_List is a list of Property.
type Property_List = capnp.StructList[Property]

// NewProperty creates a new list of Property.
func NewProperty_List(s *capnp.Segment, sz int32) (Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Property](l), err
}

// Property_Future is a wrapper for a Property promised by a client call.
type Property_Future struct{ *capnp.Future }

func (f Property_Future) Struct() (Property, error) {
	p, err := f.Future.Ptr()
	return Property(p.Struct()), err
}

type ResponseFormat capnp.Struct

// ResponseFormat_TypeID is the unique identifier for the type ResponseFormat.
const ResponseFormat_TypeID = 0xc2b2bb6dcf781b2e

func NewResponseFormat(s *capnp.Segment) (ResponseFormat, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ResponseFormat(st), err
}

func NewRootResponseFormat(s *capnp.Segment) (ResponseFormat, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return ResponseFormat(st), err
}

func ReadRootResponseFormat(msg *capnp.Message) (ResponseFormat, error) {
	root, err := msg.Root()
	return ResponseFormat(root.Struct()), err
}

func (s ResponseFormat) String() string {
	str, _ := text.Marshal(0xc2b2bb6dcf781b2e, capnp.Struct(s))
	return str
}

func (s ResponseFormat) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ResponseFormat) DecodeFromPtr(p capnp.Ptr) ResponseFormat {
	return ResponseFormat(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ResponseFormat) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ResponseFormat) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ResponseFormat) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ResponseFormat) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ResponseFormat) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ResponseFormat) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ResponseFormat) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ResponseFormat) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ResponseFormat) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ResponseFormat) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ResponseFormat) Schema() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ResponseFormat) HasSchema() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ResponseFormat) SchemaBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ResponseFormat) SetSchema(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s ResponseFormat) Strict() bool {
	return capnp.Struct(s).Bit(0)
}

func (s ResponseFormat) SetStrict(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// ResponseFormat_List is a list of ResponseFormat.
type ResponseFormat_List = capnp.StructList[ResponseFormat]

// NewResponseFormat creates a new list of ResponseFormat.
func NewResponseFormat_List(s *capnp.Segment, sz int32) (ResponseFormat_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[ResponseFormat](l), err
}

// ResponseFormat_Future is a wrapper for a ResponseFormat promised by a client call.
type ResponseFormat_Future struct{ *capnp.Future }

func (f ResponseFormat_Future) Struct() (ResponseFormat, error) {
	p, err := f.Future.Ptr()
	return ResponseFormat(p.Struct()), err
}

type ProviderParams capnp.Struct

// ProviderParams_TypeID is the unique identifier for the type ProviderParams.
const ProviderParams_TypeID = 0xcc72bf78281e5832

func NewProviderParams(s *capnp.Segment) (ProviderParams, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return ProviderParams(st), err
}

func NewRootProviderParams(s *capnp.Segment) (ProviderParams, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return ProviderParams(st), err
}

func ReadRootProviderParams(msg *capnp.Message) (ProviderParams, error) {
	root, err := msg.Root()
	return ProviderParams(root.Struct()), err
}

func (s ProviderParams) String() string {
	str, _ := text.Marshal(0xcc72bf78281e5832, capnp.Struct(s))
	return str
}

func (s ProviderParams) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ProviderParams) DecodeFromPtr(p capnp.Ptr) ProviderParams {
	return ProviderParams(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ProviderParams) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ProviderParams) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ProviderParams) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ProviderParams) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ProviderParams) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ProviderParams) HasModel() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ProviderParams) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ProviderParams) SetModel(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ProviderParams) Messages() (Message_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Message_List(p.List()), err
}

func (s ProviderParams) HasMessages() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ProviderParams) SetMessages(v Message_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated Message_List, preferring placement in s's segment.
func (s ProviderParams) NewMessages(n int32) (Message_List, error) {
	l, err := NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s ProviderParams) Tools() (Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Tool_List(p.List()), err
}

func (s ProviderParams) HasTools() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ProviderParams) SetTools(v Tool_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated Tool_List, preferring placement in s's segment.
func (s ProviderParams) NewTools(n int32) (Tool_List, error) {
	l, err := NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s ProviderParams) ResponseFormat() (ResponseFormat, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return ResponseFormat(p.Struct()), err
}

func (s ProviderParams) HasResponseFormat() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s ProviderParams) SetResponseFormat(v ResponseFormat) error {
	return capnp.Struct(s).SetPtr(3, capnp.Struct(v).ToPtr())
}

// NewResponseFormat sets the responseFormat field to a newly
// allocated ResponseFormat struct, preferring placement in s's segment.
func (s ProviderParams) NewResponseFormat() (ResponseFormat, error) {
	ss, err := NewResponseFormat(capnp.Struct(s).Segment())
	if err != nil {
		return ResponseFormat{}, err
	}
	err = capnp.Struct(s).SetPtr(3, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ProviderParams) Temperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s ProviderParams) SetTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s ProviderParams) TopP() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s ProviderParams) SetTopP(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s ProviderParams) TopK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s ProviderParams) SetTopK(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s ProviderParams) FrequencyPenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s ProviderParams) SetFrequencyPenalty(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s ProviderParams) PresencePenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s ProviderParams) SetPresencePenalty(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s ProviderParams) MaxTokens() uint32 {
	return capnp.Struct(s).Uint32(40)
}

func (s ProviderParams) SetMaxTokens(v uint32) {
	capnp.Struct(s).SetUint32(40, v)
}

func (s ProviderParams) Stream() bool {
	return capnp.Struct(s).Bit(352)
}

func (s ProviderParams) SetStream(v bool) {
	capnp.Struct(s).SetBit(352, v)
}

func (s ProviderParams) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s ProviderParams) HasContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s ProviderParams) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s ProviderParams) SetContent(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s ProviderParams) ToolCall() (ToolCall, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return ToolCall(p.Struct()), err
}

func (s ProviderParams) HasToolCall() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s ProviderParams) SetToolCall(v ToolCall) error {
	return capnp.Struct(s).SetPtr(5, capnp.Struct(v).ToPtr())
}

// NewToolCall sets the toolCall field to a newly
// allocated ToolCall struct, preferring placement in s's segment.
func (s ProviderParams) NewToolCall() (ToolCall, error) {
	ss, err := NewToolCall(capnp.Struct(s).Segment())
	if err != nil {
		return ToolCall{}, err
	}
	err = capnp.Struct(s).SetPtr(5, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s ProviderParams) Done() bool {
	return capnp.Struct(s).Bit(353)
}

func (s ProviderParams) SetDone(v bool) {
	capnp.Struct(s).SetBit(353, v)
}

func (s ProviderParams) Error() (string, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.Text(), err
}

func (s ProviderParams) HasError() bool {
	return capnp.Struct(s).HasPtr(6)
}

func (s ProviderParams) ErrorBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(6)
	return p.TextBytes(), err
}

func (s ProviderParams) SetError(v string) error {
	return capnp.Struct(s).SetText(6, v)
}

// ProviderParams_List is a list of ProviderParams.
type ProviderParams_List = capnp.StructList[ProviderParams]

// NewProviderParams creates a new list of ProviderParams.
func NewProviderParams_List(s *capnp.Segment, sz int32) (ProviderParams_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 48, PointerCount: 7}, sz)
	return capnp.StructList[ProviderParams](l), err
}

// ProviderParams_Future is a wrapper for a ProviderParams promised by a client call.
type ProviderParams_Future struct{ *capnp.Future }

func (f ProviderParams_Future) Struct() (ProviderParams, error) {
	p, err := f.Future.Ptr()
	return ProviderParams(p.Struct()), err
}
func (p ProviderParams_Future) ResponseFormat() ResponseFormat_Future {
	return ResponseFormat_Future{Future: p.Future.Field(3, nil)}
}
func (p ProviderParams_Future) ToolCall() ToolCall_Future {
	return ToolCall_Future{Future: p.Future.Field(5, nil)}
}

type Provider capnp.Client

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xcd7e559dac2fad05

func (c Provider) Complete(ctx context.Context, params func(Provider_complete_Params) error) (ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      0,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "complete",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_complete_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProviderParams_Future{Future: ans.Future()}, release

}

func (c Provider) Stream(ctx context.Context, params func(Provider_stream_Params) error) (ProviderParams_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      1,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "stream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_stream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ProviderParams_Future{Future: ans.Future()}, release

}

func (c Provider) Embed(ctx context.Context, params func(Provider_embed_Params) error) (Provider_embed_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      2,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "embed",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Provider_embed_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Provider_embed_Results_Future{Future: ans.Future()}, release

}

func (c Provider) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Provider) String() string {
	return "Provider(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Provider) AddRef() Provider {
	return Provider(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Provider) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Provider) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Provider) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Provider) IsSame(other Provider) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Provider) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Provider) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Provider_Server is a Provider with a local implementation.
type Provider_Server interface {
	Complete(context.Context, Provider_complete) error

	Stream(context.Context, Provider_stream) error

	Embed(context.Context, Provider_embed) error
}

// Provider_NewServer creates a new Server from an implementation of Provider_Server.
func Provider_NewServer(s Provider_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Provider_Methods(nil, s), s, c)
}

// Provider_ServerToClient creates a new Client from an implementation of Provider_Server.
// The caller is responsible for calling Release on the returned Client.
func Provider_ServerToClient(s Provider_Server) Provider {
	return Provider(capnp.NewClient(Provider_NewServer(s)))
}

// Provider_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Provider_Methods(methods []server.Method, s Provider_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 3)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      0,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "complete",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Complete(ctx, Provider_complete{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      1,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "stream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stream(ctx, Provider_stream{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xcd7e559dac2fad05,
			MethodID:      2,
			InterfaceName: "pkg/api/provider/provider.capnp:Provider",
			MethodName:    "embed",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Embed(ctx, Provider_embed{call})
		},
	})

	return methods
}

// Provider_complete holds the state for a server call to Provider.complete.
// See server.Call for documentation.
type Provider_complete struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_complete) Args() Provider_complete_Params {
	return Provider_complete_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_complete) AllocResults() (ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return ProviderParams(r), err
}

// Provider_stream holds the state for a server call to Provider.stream.
// See server.Call for documentation.
type Provider_stream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_stream) Args() Provider_stream_Params {
	return Provider_stream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_stream) AllocResults() (ProviderParams, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 48, PointerCount: 7})
	return ProviderParams(r), err
}

// Provider_embed holds the state for a server call to Provider.embed.
// See server.Call for documentation.
type Provider_embed struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Provider_embed) Args() Provider_embed_Params {
	return Provider_embed_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Provider_embed) AllocResults() (Provider_embed_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(r), err
}

// Provider_List is a list of Provider.
type Provider_List = capnp.CapList[Provider]

// NewProvider_List creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Provider](l), err
}

type Provider_complete_Params capnp.Struct

// Provider_complete_Params_TypeID is the unique identifier for the type Provider_complete_Params.
const Provider_complete_Params_TypeID = 0xfeabc353a0085a4e

func NewProvider_complete_Params(s *capnp.Segment) (Provider_complete_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_complete_Params(st), err
}

func NewRootProvider_complete_Params(s *capnp.Segment) (Provider_complete_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_complete_Params(st), err
}

func ReadRootProvider_complete_Params(msg *capnp.Message) (Provider_complete_Params, error) {
	root, err := msg.Root()
	return Provider_complete_Params(root.Struct()), err
}

func (s Provider_complete_Params) String() string {
	str, _ := text.Marshal(0xfeabc353a0085a4e, capnp.Struct(s))
	return str
}

func (s Provider_complete_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_complete_Params) DecodeFromPtr(p capnp.Ptr) Provider_complete_Params {
	return Provider_complete_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_complete_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_complete_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_complete_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_complete_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_complete_Params) Params() (ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProviderParams(p.Struct()), err
}

func (s Provider_complete_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_complete_Params) SetParams(v ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated ProviderParams struct, preferring placement in s's segment.
func (s Provider_complete_Params) NewParams() (ProviderParams, error) {
	ss, err := NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_complete_Params_List is a list of Provider_complete_Params.
type Provider_complete_Params_List = capnp.StructList[Provider_complete_Params]

// NewProvider_complete_Params creates a new list of Provider_complete_Params.
func NewProvider_complete_Params_List(s *capnp.Segment, sz int32) (Provider_complete_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_complete_Params](l), err
}

// Provider_complete_Params_Future is a wrapper for a Provider_complete_Params promised by a client call.
type Provider_complete_Params_Future struct{ *capnp.Future }

func (f Provider_complete_Params_Future) Struct() (Provider_complete_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_complete_Params(p.Struct()), err
}
func (p Provider_complete_Params_Future) Params() ProviderParams_Future {
	return ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Provider_stream_Params capnp.Struct

// Provider_stream_Params_TypeID is the unique identifier for the type Provider_stream_Params.
const Provider_stream_Params_TypeID = 0xe5e77612893edd84

func NewProvider_stream_Params(s *capnp.Segment) (Provider_stream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_stream_Params(st), err
}

func NewRootProvider_stream_Params(s *capnp.Segment) (Provider_stream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_stream_Params(st), err
}

func ReadRootProvider_stream_Params(msg *capnp.Message) (Provider_stream_Params, error) {
	root, err := msg.Root()
	return Provider_stream_Params(root.Struct()), err
}

func (s Provider_stream_Params) String() string {
	str, _ := text.Marshal(0xe5e77612893edd84, capnp.Struct(s))
	return str
}

func (s Provider_stream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_stream_Params) DecodeFromPtr(p capnp.Ptr) Provider_stream_Params {
	return Provider_stream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_stream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_stream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_stream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_stream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_stream_Params) Params() (ProviderParams, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return ProviderParams(p.Struct()), err
}

func (s Provider_stream_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_stream_Params) SetParams(v ProviderParams) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated ProviderParams struct, preferring placement in s's segment.
func (s Provider_stream_Params) NewParams() (ProviderParams, error) {
	ss, err := NewProviderParams(capnp.Struct(s).Segment())
	if err != nil {
		return ProviderParams{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Provider_stream_Params_List is a list of Provider_stream_Params.
type Provider_stream_Params_List = capnp.StructList[Provider_stream_Params]

// NewProvider_stream_Params creates a new list of Provider_stream_Params.
func NewProvider_stream_Params_List(s *capnp.Segment, sz int32) (Provider_stream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_stream_Params](l), err
}

// Provider_stream_Params_Future is a wrapper for a Provider_stream_Params promised by a client call.
type Provider_stream_Params_Future struct{ *capnp.Future }

func (f Provider_stream_Params_Future) Struct() (Provider_stream_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_stream_Params(p.Struct()), err
}
func (p Provider_stream_Params_Future) Params() ProviderParams_Future {
	return ProviderParams_Future{Future: p.Future.Field(0, nil)}
}

type Provider_embed_Params capnp.Struct

// Provider_embed_Params_TypeID is the unique identifier for the type Provider_embed_Params.
const Provider_embed_Params_TypeID = 0xca578ca53d8688c9

func NewProvider_embed_Params(s *capnp.Segment) (Provider_embed_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Params(st), err
}

func NewRootProvider_embed_Params(s *capnp.Segment) (Provider_embed_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Params(st), err
}

func ReadRootProvider_embed_Params(msg *capnp.Message) (Provider_embed_Params, error) {
	root, err := msg.Root()
	return Provider_embed_Params(root.Struct()), err
}

func (s Provider_embed_Params) String() string {
	str, _ := text.Marshal(0xca578ca53d8688c9, capnp.Struct(s))
	return str
}

func (s Provider_embed_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_embed_Params) DecodeFromPtr(p capnp.Ptr) Provider_embed_Params {
	return Provider_embed_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_embed_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_embed_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_embed_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_embed_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_embed_Params) Text() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider_embed_Params) HasText() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_embed_Params) TextBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider_embed_Params) SetText(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_embed_Params_List is a list of Provider_embed_Params.
type Provider_embed_Params_List = capnp.StructList[Provider_embed_Params]

// NewProvider_embed_Params creates a new list of Provider_embed_Params.
func NewProvider_embed_Params_List(s *capnp.Segment, sz int32) (Provider_embed_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_embed_Params](l), err
}

// Provider_embed_Params_Future is a wrapper for a Provider_embed_Params promised by a client call.
type Provider_embed_Params_Future struct{ *capnp.Future }

func (f Provider_embed_Params_Future) Struct() (Provider_embed_Params, error) {
	p, err := f.Future.Ptr()
	return Provider_embed_Params(p.Struct()), err
}

type Provider_embed_Results capnp.Struct

// Provider_embed_Results_TypeID is the unique identifier for the type Provider_embed_Results.
const Provider_embed_Results_TypeID = 0xdbf6672690b19937

func NewProvider_embed_Results(s *capnp.Segment) (Provider_embed_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(st), err
}

func NewRootProvider_embed_Results(s *capnp.Segment) (Provider_embed_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider_embed_Results(st), err
}

func ReadRootProvider_embed_Results(msg *capnp.Message) (Provider_embed_Results, error) {
	root, err := msg.Root()
	return Provider_embed_Results(root.Struct()), err
}

func (s Provider_embed_Results) String() string {
	str, _ := text.Marshal(0xdbf6672690b19937, capnp.Struct(s))
	return str
}

func (s Provider_embed_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider_embed_Results) DecodeFromPtr(p capnp.Ptr) Provider_embed_Results {
	return Provider_embed_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider_embed_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider_embed_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider_embed_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider_embed_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider_embed_Results) Embedding() (capnp.Float32List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return capnp.Float32List(p.List()), err
}

func (s Provider_embed_Results) HasEmbedding() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider_embed_Results) SetEmbedding(v capnp.Float32List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewEmbedding sets the embedding field to a newly
// allocated capnp.Float32List, preferring placement in s's segment.
func (s Provider_embed_Results) NewEmbedding(n int32) (capnp.Float32List, error) {
	l, err := capnp.NewFloat32List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.Float32List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Provider_embed_Results_List is a list of Provider_embed_Results.
type Provider_embed_Results_List = capnp.StructList[Provider_embed_Results]

// NewProvider_embed_Results creates a new list of Provider_embed_Results.
func NewProvider_embed_Results_List(s *capnp.Segment, sz int32) (Provider_embed_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider_embed_Results](l), err
}

// Provider_embed_Results_Future is a wrapper for a Provider_embed_Results promised by a client call.
type Provider_embed_Results_Future struct{ *capnp.Future }

func (f Provider_embed_Results_Future) Struct() (Provider_embed_Results, error) {
	p, err := f.Future.Ptr()
	return Provider_embed_Results(p.Struct()), err
}

const schema_d4c9c9f76e89a0d2 = "x\xda\x94V\x7f\x88\x1cg\x19~\x9f\xef\x9b\xd9\xbd\xdc" +
	"\xee\xe6v\x9c\x11\xd4R7J*M\xf4r\xbd\x94P" +
	"9\x8c{FS\x9b\xb5\xa9;\xb7\x11K\xe8\x1f\x99\xec" +
	"~\xb9[\xbb;3\x99\x9d\x8dw\x87\xd5*U\x93R" +
	"0B\x0b\x06\xfcQ\x04\x055\"\x89\x15\x8c\xa5\x14[" +
	"\x8b\xa6$XK\x05K[(\x82TA\xc1`\xb1\x15" +
	"\x8c#\xef\xee\xce\x8f[\xcff\xf3\xdf|\xef\xf7\xcc\xf7" +
	"=\xcf\xfb\xbd\xdf\xf3~\xb7\xbcG[\xd4\xe6K\xb7\xe5" +
	"H\xd8w\xe8\xb9h\xfd\xa6\xe8\xc8\xb7/\xcd=L\xc6" +
	"6D\xcf?z\xca}\xe3\xe2\xc5\x17H\xd7\xf3D\xb7" +
	"B\xee\x83iH\xfe,\xc9\x0a\x08\xd1w~x\xdf\xda" +
	"\xcf\x1f{\xea\xfbch\x8d!{\xb4\x1a\xcc\x03\xfci" +
	"\xee\xd7^#D+\xf2\xae\xd3\xcf\xbf\xf7\xc6\x0bc\xe0" +
	"\xc1z\xb3z\x0d\xe6Gx\x17s\xaf\xfe\x13B\xb4\xeb" +
	"\x86\xd5\xdfv\x1f?\xff\x14\xd9\xdb\xf0?\xe8\x17\xf5u" +
	"\x98\x7f\x1b\xa0\xff\xa2\xf3\xd2\x17O~e\xef\xf7\x1e\xfa" +
	"\xf4\xb3d\xec\x00\x91\x0e\x06\xfd2w\x1e\x04\xf3w\xb9" +
	"*!\xda}\xf7\xbbo^}2\xb8\xc4\xcb\xe52\xcb" +
	"\xe5\x19y%\xb7\x0es\xf8\x89\xfc'%!\xd2\x7f<" +
	"w\xf6[\x9f\xfa\xfce2\xb6\xc9\x14M\xb8\xf5\x07\xd3" +
	"5\x98OL\xf3\xce\x17\xa6\x7fm\xee)\xe4\x89\xa2'" +
	"nx\xf2\xbb\xe6O\xbf\xf6\xd2f\xc2n,\x1c\x869" +
	"\xcf0s\xb6\xc0\xc2n;s\xee\xf4\xfb\x96\xff\xf9R" +
	"\x96\xea\x95\xc2/\x98*\x8aL\xf5\x81W>|\xeam" +
	"'^\xfbS\x16\xb0\xa78\x00\xecg\xc0\x1b\xfa\xb9\x13" +
	"\xc6\xf9\xf5\x7fl\xb2\x99*\xd6`\xae\x15y\xb3~\x91" +
	"7{\xfa\xf8\xc7\xbf\xfa\xb3\xca\xe3o\x8e1\x13\x0c~" +
	"{\xe9A\x98\xb3%\x06\xef(}\x96\x10\xbd\xbc\xeb\xfd" +
	"\xe7\x9f\xf9c\xe5\xea\x18x@\xe0Ti'\xcc3\x03" +
	"\xf0#%fy\xd7\xe1\xa9G\x1bO\xff\xe8?Y\x96" +
	"\x17J\xcf2\xcb\xcb\xa5*\xcdF\xfe\xbd\xcbs\x8e\xdf" +
	"\x9e\xd3\xfc\xc0;\xd1n\xa9`.\xfe\xd8\xd5t|\xd7" +
	"_8\xa8z=gYQ\x1d\xb0-\xa9\x11i 2" +
	"\xee\xdbId\xafJ\xd8\x0f\x08\x18\x80\x05\x0e~q\x1f" +
	"\x91\xfd9\x09\xfb\xa4\x80!\x84\x05Ad|\x99\x91\xf7" +
	"K\xd8\x0f\x09\x18RZ\x90D\xc6\xa9%\"\xfb\xa4\x84" +
	"\xfd\xb0\x80\xa1i\x164\"\xe3\xeb\x1c<-a\x9f\x15" +
	"\x98\x09\xbc\x8eB\x91\x04\x8a\x84/4=7Tn\x18" +
	"\x8fg\\\xa7\x9bLF\x81:\xa6\x02\xe56\x09i," +
	"\xf4\xbc\xceG\x9dN\x87\xd0\xc3VB]\x02\xe5\xb4\xb0" +
	"\x09\x1c\xbc\xb6\xf4z\xe0\xf9*\x08\xd7h \xbe\x9c\x88" +
	"wX\xd2=\x12\xf6JF\xbc\xe2\xe0\x11\x09\xbb\x93\x11" +
	"\xdf>Jd\xafH\xd8aF\xfcqFv\x86i\xda" +
	" e&\\\xf3S\x0d-\xd5k\x06m?\xa4|\xdb" +
	"s\x13\x88r\xfb\xddX\x12\xc7&\x12r(N\xc7@" +
	"H1\x11\xb2\xff]D\xf6\xa2\x84}gF\xc8\x01\xa6" +
	"\xf71\x09\xbb\x9e\x11r\xb0Fd\xdf)a\xdf- " +
	"\xdb\xad\xcd\x19\x1f\xeb\xbb\xcd\xb0\xed\xb9D\x84rZ\xd4" +
	"\x04\x94'a\xb9\xa4z\xbe\xe7\xf6T\xf5v/\xe8:" +
	"\xe1$9\xe7\xf4\xb6$l?C\xb5\xbb\x90\xe6\x1cq" +
	"\xca\x17F)_\x1dK\xf9\xe6Y\xae\xf6\x9a+\xaa\xeb" +
	"\xa4\xc30h7C\x80\x04\x90Q\xa2\xbfE\xe1\x0c\x87" +
	"\xaa{T\xb5\xb6\xd7+N\xe0t{\xb6\x96\xa8)\xb1" +
	"\x9a)\x09\xdb\x12\x98\x09\xd5jR\xda\x13\x15\xe5`X" +
	"\xad\x0f\x16\xe5,}(^\xd7|\x04\xbb\x89\x1a\xa7!" +
	"\xd1\xf8&\xd2D\x99gP#j|\x83\xe3\x8f!\xcd" +
	"\x95yn\x80?\xcb\xf1\xdf -Q\xf3\x19\xac\x135" +
	"~\xc5\xf1\xe7 \x80\xe1\x0d5/\xe3(Q\xe3\x12\x87" +
	"\xff\xc0p\x1d\x16t\"\xf3\xf7\xd8I\xd4x\x8e\xe3/" +
	"s<',\xe4\x88\xcc\x17\x07\xf1\x178\xfe*\xc7\xf3" +
	"\xd2b\x072_\xc1\x83D\x8dW9\xfeW\x8eOi" +
	"\x16\xa6\xb8K\xe0KD\x8d?s\xfcu\x8eo\x99\xb6" +
	"\xb0\x85\xc8\xbc\x82%\xa2\xc6\xdf9\xfeo\x08\xccO\x1f" +
	"\x81\x85i\"\xf3_X j\xbc\x0e\x89%!`\x14" +
	"4\x0b\x05\"\xf3*\xf6\x115\xded\xbc\xc6\xf1\xa2n" +
	"\xa1HdB\xd4\x88\x96\x84D\xa3(\x04\xe6K\x0e," +
	"\x94\x88\xcc-\x82yj<Qf\xfc\xd6\x9c\x85\xadD" +
	"fIpz\xa68n\x09\x81J\xd7k\xa9NrT" +
	"\xdd\xa13\xf6\xb8\xdc\x13\x93I\x1a\xf3\xd0d*\xecD" +
	"\x19\x0fJ\xcc{\xe4A\xc1\xa8\xe6iT\xf4(\xa7-" +
	"utoB\xd5\xf5U\xe0\x84\x94\xef\x07\x0a\x05\x12(" +
	"\xf0\xc5\xf3\xfczv\xf0\x89x\x10\x1d\x0b\xd4\xf1\xber" +
	"\x9bX\xab+\xd7\xe9\xb0}%s~\xa0z\xcam*" +
	"\xc4S\xc9L\xd7Y=\xe4\xdd\xab\\v\xcc)\x12\x98" +
	"\x1a\x96\xbdr\xbaq\xd9\x8f\xbbpj\xb2\x83\xeb\x9eu" +
	"\xd72a\xa6\xe5\xb9*\xfe\xb5\xa2\x82\xc0\x0b\xae\xbf\xc6" +
	"c\xbf\xd2\x89\x92N\x86\xf8\x8d`\xd85\x12\xc6\x81<" +
	"\xd2^\x9c\xce\xed] a\xcc\xe7!\x927\x07\xe2\x8e" +
	"n\xdc\xb4\x9b\x84\xf1\xce|\xd4\xf4\xba~G\x85\x8a\x88" +
	"\x16c\xb1\x8b\xa8\x0c\xee\xec\"\xea\x98\x84(\xdfA\x15" +
	"*\x19\xf42\xce\x0a\x18\xfbwn\xe2\xac\x07\x0f\x8fL" +
	"t%cW\xaa6\xf2\xb0\xfb\xc5\x06;%\x03\x0bU" +
	"\xef\xe8gT3\x8c\xfca#j\x93T\x99ZJ^" +
	"uI-\x1d\xef\xb7\x03\xd5\xca\xd4\xe3x\x87\x98\xd4\xb1" +
	"\x96\xaa\xaa\xd7\xef\x84\x1b,\x8b\xbbsQ\xc2\xbeY " +
	"\x1a\xa0Zm\x97\xb0\x1co5}\xdd[\x0d3\xbe}" +
	"dd\xd9\xad\x16Rw\xac\xfa\x83Y\x94\xd3\xb7\xe1\xa4" +
	"\xfd\xe4\xf6\xa4\x1d\x8du\xbd\xcd\xce\xe6\x00\xb7\x92;$" +
	"\xecC\x99\xb3\xb1\xf9\xc0\xea\x12\xf6=\x13\xb5\x8d\xc8\x1f" +
	"\x95\x03\xc9\x80\x19'\x0f\xce1\xc6\xfa\xb5\xfa\xf4F\xe6" +
	"S\x09\xf3\x1d\xcc|\xbb\x84}K\x86\xf9,\x1f\xcc\x07" +
	"$\xec\x0f\x8e\x93t\x82\xe5~W\xb9!\xdf\xe9\xf1\xbb" +
	"'\xff\x1f\x87\x19&\xc1\xdbf\xce\xa36:\xfaw\x88" +
	"\xb1&\x1f?r\xc7\x04\xe6\xaey\xf6\xf1\xdd\xdb><" +
	"|\xa2\xeb=\xfe\xff\x06\x00\x00\xff\xff\xa6\x971o"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d2,
		Nodes: []uint64{
			0x942fcc9e60ff257a,
			0xa6c2b4b8797daa9f,
			0xb91d22d2904e0368,
			0xc2b2bb6dcf781b2e,
			0xca578ca53d8688c9,
			0xcc72bf78281e5832,
			0xcd7e559dac2fad05,
			0xdb8fb313a2bf1bbd,
			0xdbf6672690b19937,
			0xe5e77612893edd84,
			0xf37ab2110076b105,
			0xf8bb1fb5874771c3,
			0xfd1fe2c5b22b2edc,
			0xfeabc353a0085a4e,
		},
		Compressed: true,
	})
}
