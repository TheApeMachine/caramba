// Code generated by capnpc-go. DO NOT EDIT.

package tool

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Tool capnp.Struct

// Tool_TypeID is the unique identifier for the type Tool.
const Tool_TypeID = 0xc9c08affcb7d8679

func NewTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func NewRootTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func ReadRootTool(msg *capnp.Message) (Tool, error) {
	root, err := msg.Root()
	return Tool(root.Struct()), err
}

func (s Tool) String() string {
	str, _ := text.Marshal(0xc9c08affcb7d8679, capnp.Struct(s))
	return str
}

func (s Tool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tool) DecodeFromPtr(p capnp.Ptr) Tool {
	return Tool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tool) Function() (Function, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Function(p.Struct()), err
}

func (s Tool) HasFunction() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tool) SetFunction(v Function) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewFunction sets the function field to a newly
// allocated Function struct, preferring placement in s's segment.
func (s Tool) NewFunction() (Function, error) {
	ss, err := NewFunction(capnp.Struct(s).Segment())
	if err != nil {
		return Function{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Tool_List is a list of Tool.
type Tool_List = capnp.StructList[Tool]

// NewTool creates a new list of Tool.
func NewTool_List(s *capnp.Segment, sz int32) (Tool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Tool](l), err
}

// Tool_Future is a wrapper for a Tool promised by a client call.
type Tool_Future struct{ *capnp.Future }

func (f Tool_Future) Struct() (Tool, error) {
	p, err := f.Future.Ptr()
	return Tool(p.Struct()), err
}
func (p Tool_Future) Function() Function_Future {
	return Function_Future{Future: p.Future.Field(0, nil)}
}

type Function capnp.Struct

// Function_TypeID is the unique identifier for the type Function.
const Function_TypeID = 0xb278a26b5a598719

func NewFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Function(st), err
}

func NewRootFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Function(st), err
}

func ReadRootFunction(msg *capnp.Message) (Function, error) {
	root, err := msg.Root()
	return Function(root.Struct()), err
}

func (s Function) String() string {
	str, _ := text.Marshal(0xb278a26b5a598719, capnp.Struct(s))
	return str
}

func (s Function) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Function) DecodeFromPtr(p capnp.Ptr) Function {
	return Function(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Function) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Function) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Function) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Function) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Function) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Function) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Function) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Function) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Function) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Function) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Function) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Function) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Function) Parameters() (Parameters, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Parameters(p.Struct()), err
}

func (s Function) HasParameters() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Function) SetParameters(v Parameters) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewParameters sets the parameters field to a newly
// allocated Parameters struct, preferring placement in s's segment.
func (s Function) NewParameters() (Parameters, error) {
	ss, err := NewParameters(capnp.Struct(s).Segment())
	if err != nil {
		return Parameters{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Function_List is a list of Function.
type Function_List = capnp.StructList[Function]

// NewFunction creates a new list of Function.
func NewFunction_List(s *capnp.Segment, sz int32) (Function_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Function](l), err
}

// Function_Future is a wrapper for a Function promised by a client call.
type Function_Future struct{ *capnp.Future }

func (f Function_Future) Struct() (Function, error) {
	p, err := f.Future.Ptr()
	return Function(p.Struct()), err
}
func (p Function_Future) Parameters() Parameters_Future {
	return Parameters_Future{Future: p.Future.Field(2, nil)}
}

type Parameters capnp.Struct

// Parameters_TypeID is the unique identifier for the type Parameters.
const Parameters_TypeID = 0xfffe985982de7cc9

func NewParameters(s *capnp.Segment) (Parameters, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Parameters(st), err
}

func NewRootParameters(s *capnp.Segment) (Parameters, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Parameters(st), err
}

func ReadRootParameters(msg *capnp.Message) (Parameters, error) {
	root, err := msg.Root()
	return Parameters(root.Struct()), err
}

func (s Parameters) String() string {
	str, _ := text.Marshal(0xfffe985982de7cc9, capnp.Struct(s))
	return str
}

func (s Parameters) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Parameters) DecodeFromPtr(p capnp.Ptr) Parameters {
	return Parameters(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Parameters) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Parameters) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Parameters) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Parameters) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Parameters) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextDefault("object"), err
}

func (s Parameters) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Parameters) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytesDefault("object"), err
}

func (s Parameters) SetType(v string) error {
	return capnp.Struct(s).SetNewText(0, v)
}

func (s Parameters) Properties() (Property_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Property_List(p.List()), err
}

func (s Parameters) HasProperties() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Parameters) SetProperties(v Property_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Property_List, preferring placement in s's segment.
func (s Parameters) NewProperties(n int32) (Property_List, error) {
	l, err := NewProperty_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Property_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Parameters) Required() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Parameters) HasRequired() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Parameters) SetRequired(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewRequired sets the required field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Parameters) NewRequired(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Parameters_List is a list of Parameters.
type Parameters_List = capnp.StructList[Parameters]

// NewParameters creates a new list of Parameters.
func NewParameters_List(s *capnp.Segment, sz int32) (Parameters_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Parameters](l), err
}

// Parameters_Future is a wrapper for a Parameters promised by a client call.
type Parameters_Future struct{ *capnp.Future }

func (f Parameters_Future) Struct() (Parameters, error) {
	p, err := f.Future.Ptr()
	return Parameters(p.Struct()), err
}

type Property capnp.Struct

// Property_TypeID is the unique identifier for the type Property.
const Property_TypeID = 0xc544d1a1520a8876

func NewProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func NewRootProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func ReadRootProperty(msg *capnp.Message) (Property, error) {
	root, err := msg.Root()
	return Property(root.Struct()), err
}

func (s Property) String() string {
	str, _ := text.Marshal(0xc544d1a1520a8876, capnp.Struct(s))
	return str
}

func (s Property) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Property) DecodeFromPtr(p capnp.Ptr) Property {
	return Property(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Property) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Property) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Property) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Property) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Property) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Property) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Property) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Property) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Property) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Property) HasType() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Property) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Property) SetType(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Property) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Property) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Property) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Property) SetDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Property) Enum() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Property) HasEnum() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Property) SetEnum(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEnum sets the enum field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Property) NewEnum(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Property_List is a list of Property.
type Property_List = capnp.StructList[Property]

// NewProperty creates a new list of Property.
func NewProperty_List(s *capnp.Segment, sz int32) (Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Property](l), err
}

// Property_Future is a wrapper for a Property promised by a client call.
type Property_Future struct{ *capnp.Future }

func (f Property_Future) Struct() (Property, error) {
	p, err := f.Future.Ptr()
	return Property(p.Struct()), err
}

const schema_d4c9c9f76e89a0d7 = "x\xda\x84\x92\xb1k\x13a\x18\xc6\x9f\xe7{\x13\x03%" +
	"mr\\\x84\xea\xa4\x83\x8b\xa0\xb1\xb8ui\x07\x15+" +
	"\x15\xf2I\x1dR:xM>\xed\xd9\xe4\xeez\xb9\x88" +
	"\x01\x05q\xd0\xea_\xe0\xa8\xfe\x03\x05\xff\x02\x17\x91\xe0" +
	"$\x08n\xae\xa2\x9bCq\xf3\x93/m\x934\xb4t" +
	"9\x8e\xf7\x1e\x8e\xdf\xefy\xdf+s\\\xcc\xcdM\x7f" +
	"VP\xfa\\\xfe\x94=\xf3\xb2\xbe\xba\xf9\xfe\xf1\x07x" +
	"\xb3\xb4\xdf\xdf\xbe\x8a\xfe\xf6\xfb\xdf\x90\x97\x02pu\x89" +
	"S\xf4\xeb,\x00\xfe]\xee\x80\xf6\xd1\xf6\xd4\x9dw_" +
	"\xaf}\x9a\x08\xe7\\x\xd7\x85\xf3\xca\x85\xa9~\x82\xb6" +
	"\xf7\xe2\xe9\x17\xfb\xfac\x7f\"<\xf8\xdd/\xf5\xdb\xdf" +
	"\x1dd\xff\xa8\x05\xd0\xf6\x9f\xfcx^\x7f\xf3\xcf\x1eE" +
	"qZ\xce\xd2\xbf\xe0^\xfd\xf3\xb2\x83K6\xd9|P" +
	"\x0d\x92\xb0*Y\x1c\xb7\xaa\xeeq\xb9\x11$Q2\x7f" +
	"\xa3\x1b5\xb20\x8e\x80\x1a\xa9\x8b\x92\x03r\x04\xbc\xeb" +
	"\x17\x01\xbd(\xd4\xcb\x8a\x1eY\xa1\x1b.\xad\x03\xfa\xa6" +
	"P\xaf(zJU\xa8\x00O\xaf\x02\xba&\xd4k\x8a" +
	"\xa5(h\x1b\x16\xa1X\x04m\xd3t\x1ai\x98d(" +
	"\x84q4\x9c&A\x1a\xb4Mf i\x87\xe5\x91\x06" +
	"\xc8\xb2\xfb|\x1ci-\x8d\x13\x93f\xbd=\xd2\xf2\x90" +
	"4p\xa4kB\xbd1Fj\xdc\xf0\x9eP\xb7\xc6H" +
	"C\x87\xbf!\xd4\x99\xa2'R\xa1\x00\xde\x96K\xb6\x84" +
	"z{\x02\xbf\x94\xf5\x92\x13\\J&\xea\xb69\x03\xd6" +
	"\x84\x83\xd9\xcc\x98\x80\x9a\x14(\xad\xc4q\xcb\xb1\xe7\x86" +
	"\xec\xd3\xb7\x00]\x14\xeaYE{\x7f\xb8\x0a\xb0<:" +
	"\xb2\x13{\xd9\xefS\xd2\xce\xd8\x0a\xc9\xa3Wx\xdbm" +
	"ky\xbf\xad\x83b\x8c\xc3h\x0a\xf53uH\x1b\x1e" +
	"\xe7\x17\xe2\xf5\x87\xa6\x91\xd9d\xaf\xfe\x10b:\x07\xca" +
	"\xe5\xd1u\x83\x03\xf9\xd4lu\xc3\xd44\x9d\xc3\xe1^" +
	"\xfe\x07\x00\x00\xff\xff\x14\x84\xca\x1b"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e89a0d7,
		Nodes: []uint64{
			0xb278a26b5a598719,
			0xc544d1a1520a8876,
			0xc9c08affcb7d8679,
			0xfffe985982de7cc9,
		},
		Compressed: true,
	})
}
