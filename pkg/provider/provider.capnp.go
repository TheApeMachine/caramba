// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Provider capnp.Struct

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xb115062fef4b0b89

func NewProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func NewRootProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func ReadRootProvider(msg *capnp.Message) (Provider, error) {
	root, err := msg.Root()
	return Provider(root.Struct()), err
}

func (s Provider) String() string {
	str, _ := text.Marshal(0xb115062fef4b0b89, capnp.Struct(s))
	return str
}

func (s Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_List is a list of Provider.
type Provider_List = capnp.StructList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider](l), err
}

// Provider_Future is a wrapper for a Provider promised by a client call.
type Provider_Future struct{ *capnp.Future }

func (f Provider_Future) Struct() (Provider, error) {
	p, err := f.Future.Ptr()
	return Provider(p.Struct()), err
}

const schema_d4c9c9f76e88a0d2 = "x\xda\x12\x08v`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6\xbf\x93\xdb\xfb\xbd>\x9b\xe8F\x06A\x19\xc6\xff\x97" +
	"\x16t\xe4}?y\xf2\x0a\x03+#;\x03\x83\xe1Q" +
	"-F\xc1\xab\xec\x0c\x0c\x82\x17\xed\x19t\xff\x17d\xa7" +
	"\xeb\x17\x14\xe5\x971g\xa6\xa4\x16\x81Y \x86^r" +
	"bA^\x81U@Q~\x19?\x88\x1f\xc0\xc8\x18\xc8" +
	"\xc2\xcc\xc2\xc0\xc0\xc2\xc8\xc0 \xc8\xab\xc5\xc0\x10\xc8\xc1" +
	"\xcc\x18(\xc2\xc4\xc8\x9f\x97\x98\x9b\xca\xc8\xc3\xc0\xc4\xc8" +
	"\xc3\xc0\x08\x08\x00\x00\xff\xff\x8e\xfc#\x14"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d2,
		Nodes: []uint64{
			0xb115062fef4b0b89,
		},
		Compressed: true,
	})
}
