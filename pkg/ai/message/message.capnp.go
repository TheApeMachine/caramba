// Code generated by capnpc-go. DO NOT EDIT.

package message

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	toolcall "github.com/theapemachine/caramba/pkg/ai/toolcall"
)

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0x82401d7c68f14b9e

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0x82401d7c68f14b9e, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Uuid() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasUuid() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) UuidBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetUuid(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) State() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Message) SetState(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Message) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasId() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetId(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(4, v)
}

func (s Message) ToolCalls() (toolcall.ToolCall_List, error) {
	p, err := capnp.Struct(s).Ptr(5)
	return toolcall.ToolCall_List(p.List()), err
}

func (s Message) HasToolCalls() bool {
	return capnp.Struct(s).HasPtr(5)
}

func (s Message) SetToolCalls(v toolcall.ToolCall_List) error {
	return capnp.Struct(s).SetPtr(5, v.ToPtr())
}

// NewToolCalls sets the toolCalls field to a newly
// allocated toolcall.ToolCall_List, preferring placement in s's segment.
func (s Message) NewToolCalls(n int32) (toolcall.ToolCall_List, error) {
	l, err := toolcall.NewToolCall_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return toolcall.ToolCall_List{}, err
	}
	err = capnp.Struct(s).SetPtr(5, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 6}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

const schema_d4c9c9f76e88a0d9 = "x\xdaD\xcb1K\xeb`\x14\xc6\xf1\xe7y\xdf$\x97" +
	"Bo\xdb\x97\x9b\xe9\xd2r\x97\xbbX\xd0\xa2nN\xc5" +
	"\x8e\"\xf4\xf8\x0dB\x0d\xb5\x98&\xc1\xa4\x9b \xb8(" +
	"8\xf8\x0d\xc4o\xa0\x83\x82B\x85\x0a\x15Z\xa8\xe0\xe0" +
	"\"\xf8\x01\\\x9d\x1c#A\xac\xd39\xbf\xff\xe1T&" +
	"Mk\xf9w\xa4\xa0\xa4j;\xd9\xd9\xc6\xfb\xce~\xad" +
	"y\x08\xa9\x91\xd9\xcb\xf9q\xf81\x9d>\xc3v~\x01" +
	"\xab5\xd6\xf9g\x91\xf9\xba\xc0S\xa2\x95\xc5\xbb\xdd\x86" +
	"\xd7k\xf4\xb5\x9f$^\xd7o\xf4\xbf\xe6R\xc7\x8b\xc3" +
	"xm\xd3O\xca9\xdb\xa4T\xb5\x05X\x04\xccu\x1d" +
	"\x90KM\x19*\x92.\xf3v\xbb\x02\xc8\x95\xa6\x8c\x14" +
	"\x8d\xa2K\x05\x98\xbb\xbf\x80\xdch\xcaX\xd1h\xe5R" +
	"\x03\xe6>\xff\x1ej\xcaD\xd1X\xda\xa5\x05\x98\x87<" +
	"\x8e4e\xa6hl\xcb\xa5\x0d\x98\xe9: cMy" +
	"R4\x8e\xed\xd2\x01\xcc\xe3\x16 3MyS,\x0f" +
	"\x06\xbdm\x16\xa1X\x04\xff%\xa9\x97\xfa,@\xb1\x00" +
	"\xea\x9fCy/\x0a\xfc9B\xaf?\xc7A'\x0aS" +
	"?L\xbf\x9d\xa5Q\x14\xb4\xbc \x00\x13\x96\xc0\xb6&" +
	"+\x99\xbc\x1e]\xfc/\xc5'\x00\xf3\xf8\x19\x00\x00\xff" +
	"\xff\x90\xcfMH"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d9,
		Nodes: []uint64{
			0x82401d7c68f14b9e,
		},
		Compressed: true,
	})
}
