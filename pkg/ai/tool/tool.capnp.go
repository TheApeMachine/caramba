// Code generated by capnpc-go. DO NOT EDIT.

package tool

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Tool capnp.Struct

// Tool_TypeID is the unique identifier for the type Tool.
const Tool_TypeID = 0xfaf8531d9ac7b460

func NewTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func NewRootTool(s *capnp.Segment) (Tool, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Tool(st), err
}

func ReadRootTool(msg *capnp.Message) (Tool, error) {
	root, err := msg.Root()
	return Tool(root.Struct()), err
}

func (s Tool) String() string {
	str, _ := text.Marshal(0xfaf8531d9ac7b460, capnp.Struct(s))
	return str
}

func (s Tool) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Tool) DecodeFromPtr(p capnp.Ptr) Tool {
	return Tool(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Tool) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Tool) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Tool) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Tool) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Tool) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Tool) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Tool) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Tool) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Tool_List is a list of Tool.
type Tool_List = capnp.StructList[Tool]

// NewTool creates a new list of Tool.
func NewTool_List(s *capnp.Segment, sz int32) (Tool_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Tool](l), err
}

// Tool_Future is a wrapper for a Tool promised by a client call.
type Tool_Future struct{ *capnp.Future }

func (f Tool_Future) Struct() (Tool, error) {
	p, err := f.Future.Ptr()
	return Tool(p.Struct()), err
}

const schema_d4c9c9f76e88a0d1 = "x\xda\x12\x08r`1\xe4\xdd\xcf\xc8\xc0\x14(\xc2\xca" +
	"\xf6?a\xcb\xf1Y\xb2\xc1?~1\x08\x8a3\xfe\xbf" +
	"\xb8\xa0#\xef\xfb\xc9\x93W\x18X\x19\xd9\x19\x18\x04\x8f" +
	">\x12\xbc\x08\xa2\xcf\xda3\xe8\xfe/\xc8N\xd7O\xcc" +
	"\xd4/a\xca\xcf\xcf\xd1/\xc9\xcf\xcf\xd1KN,\xc8" +
	"+\xb0\x0aa\xcf\xcf\xcf\x09`d\x0cdafa`" +
	"`ad`\x10\xe4\xd5b`\x08\xe4`f\x0c\x14a" +
	"b\xe4\xcfK\xccMe\xe4a`b\xe4a`\x04\x04" +
	"\x00\x00\xff\xff\xc8\x85!\x93"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d1,
		Nodes: []uint64{
			0xfaf8531d9ac7b460,
		},
		Compressed: true,
	})
}
