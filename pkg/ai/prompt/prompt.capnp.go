// Code generated by capnpc-go. DO NOT EDIT.

package prompt

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Prompt capnp.Struct

// Prompt_TypeID is the unique identifier for the type Prompt.
const Prompt_TypeID = 0xc7896392be5a07da

func NewPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func NewRootPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func ReadRootPrompt(msg *capnp.Message) (Prompt, error) {
	root, err := msg.Root()
	return Prompt(root.Struct()), err
}

func (s Prompt) String() string {
	str, _ := text.Marshal(0xc7896392be5a07da, capnp.Struct(s))
	return str
}

func (s Prompt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Prompt) DecodeFromPtr(p capnp.Ptr) Prompt {
	return Prompt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Prompt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Prompt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Prompt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Prompt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Prompt) Fragments() (Fragment_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Fragment_List(p.List()), err
}

func (s Prompt) HasFragments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Prompt) SetFragments(v Fragment_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFragments sets the fragments field to a newly
// allocated Fragment_List, preferring placement in s's segment.
func (s Prompt) NewFragments(n int32) (Fragment_List, error) {
	l, err := NewFragment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Fragment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Prompt_List is a list of Prompt.
type Prompt_List = capnp.StructList[Prompt]

// NewPrompt creates a new list of Prompt.
func NewPrompt_List(s *capnp.Segment, sz int32) (Prompt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Prompt](l), err
}

// Prompt_Future is a wrapper for a Prompt promised by a client call.
type Prompt_Future struct{ *capnp.Future }

func (f Prompt_Future) Struct() (Prompt, error) {
	p, err := f.Future.Ptr()
	return Prompt(p.Struct()), err
}

type Fragment capnp.Struct

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xbf8258fcf200d948

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.Root()
	return Fragment(root.Struct()), err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xbf8258fcf200d948, capnp.Struct(s))
	return str
}

func (s Fragment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Fragment) DecodeFromPtr(p capnp.Ptr) Fragment {
	return Fragment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Fragment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Fragment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Fragment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Fragment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Fragment) Template() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Fragment) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Fragment) TemplateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Fragment) SetTemplate(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Fragment) Variables() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Fragment) HasVariables() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Fragment) SetVariables(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVariables sets the variables field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Fragment) NewVariables(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Fragment_List is a list of Fragment.
type Fragment_List = capnp.StructList[Fragment]

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Fragment](l), err
}

// Fragment_Future is a wrapper for a Fragment promised by a client call.
type Fragment_Future struct{ *capnp.Future }

func (f Fragment_Future) Struct() (Fragment, error) {
	p, err := f.Future.Ptr()
	return Fragment(p.Struct()), err
}

const schema_d4c9c9f76e88a0e1 = "x\xda|\x901/\x04Q\x14\x85\xcfyo\xd6(f" +
	"7;FB\xa2S\xad\x821\xa1\xd2P\x89\x88b\x9e" +
	"Jt\xcffl6v\xc63&T\x0a*\x1a\x85_" +
	"\xe0\x97P\xca\xf6\x1a:?\x81F\x81<y\x93\x10\x9a" +
	"\xad\xee\xbd\xe7\x9e\xdc\xfb\xe5\xb4\xaf\xd7\xbc\xa49% " +
	"\xd4tc\xecc\xe3\xe9\xeds\xe7\xe2>\x9c\xa1}\xb9" +
	"\xbd,\xde\x87\xc3G4\x84\x0f$\xaf\xb3\x8cH\x1f\x08" +
	"\xbfNA\xfb\xec\xef\xde\xddt\xaf\x1e\xf0\xdf\xea\x0cK" +
	"G\x9c`t\xee\xda\xe8\x8c\xab\x98\xb7\xe6\xa0\x17\xeb~" +
	"ldy\x98\x9b*6uY\xe8jS\x98\x95\xf5R" +
	"\xf7r?+\xaa\x94T\xe3\xd2\x03<\x02\xe1\xdc&\xa0" +
	":\x92jY0$'\xe9\xc4d\x1bP\x8b\x92jK" +
	"\xd0VYn\x06\xba\xca\x000\x80`\x00\xda\x13]\xf6" +
	"\xf5\xde \x03\x8f\xd9\x02S\xc9z\xd5\x02G2\xa4n" +
	"`M\xe0\xfd\x124\xdd\xb3@Ru\x04\xed\xbe\xa3\xcc" +
	"\x8a\xea\xcf\xe1\xf6OX\xa0\x93\xbe\x03\x00\x00\xff\xffh" +
	"\x00W\x19"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0e1,
		Nodes: []uint64{
			0xbf8258fcf200d948,
			0xc7896392be5a07da,
		},
		Compressed: true,
	})
}
