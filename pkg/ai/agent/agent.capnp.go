// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	message "github.com/theapemachine/caramba/pkg/ai/message"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	provider "github.com/theapemachine/caramba/pkg/ai/provider"
	tool "github.com/theapemachine/caramba/pkg/ai/tool"
	datura "github.com/theapemachine/caramba/pkg/datura"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (tool.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return tool.Tool_List(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v tool.Tool_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tool.Tool_List, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (tool.Tool_List, error) {
	l, err := tool.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tool.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Agent) Provider() (provider.Provider, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return provider.Provider(p.Struct()), err
}

func (s Agent) HasProvider() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Agent) SetProvider(v provider.Provider) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewProvider sets the provider field to a newly
// allocated provider.Provider struct, preferring placement in s's segment.
func (s Agent) NewProvider() (provider.Provider, error) {
	ss, err := provider.NewProvider(capnp.Struct(s).Segment())
	if err != nil {
		return provider.Provider{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Status() Agent_Status {
	return Agent_Status(capnp.Struct(s).Uint16(0))
}

func (s Agent) SetStatus(v Agent_Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}
func (p Agent_Future) Provider() provider.Provider_Future {
	return provider.Provider_Future{Future: p.Future.Field(4, nil)}
}

type Agent_Status uint16

// Agent_Status_TypeID is the unique identifier for the type Agent_Status.
const Agent_Status_TypeID = 0xb08cef90775e4be3

// Values of Agent_Status.
const (
	Agent_Status_idle    Agent_Status = 0
	Agent_Status_ready   Agent_Status = 1
	Agent_Status_waiting Agent_Status = 2
	Agent_Status_pending Agent_Status = 3
	Agent_Status_working Agent_Status = 4
	Agent_Status_errored Agent_Status = 5
	Agent_Status_failed  Agent_Status = 6
)

// String returns the enum's constant name.
func (c Agent_Status) String() string {
	switch c {
	case Agent_Status_idle:
		return "idle"
	case Agent_Status_ready:
		return "ready"
	case Agent_Status_waiting:
		return "waiting"
	case Agent_Status_pending:
		return "pending"
	case Agent_Status_working:
		return "working"
	case Agent_Status_errored:
		return "errored"
	case Agent_Status_failed:
		return "failed"

	default:
		return ""
	}
}

// Agent_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Agent_StatusFromString(c string) Agent_Status {
	switch c {
	case "idle":
		return Agent_Status_idle
	case "ready":
		return Agent_Status_ready
	case "waiting":
		return Agent_Status_waiting
	case "pending":
		return Agent_Status_pending
	case "working":
		return Agent_Status_working
	case "errored":
		return Agent_Status_errored
	case "failed":
		return Agent_Status_failed

	default:
		return 0
	}
}

type Agent_Status_List = capnp.EnumList[Agent_Status]

func NewAgent_Status_List(s *capnp.Segment, sz int32) (Agent_Status_List, error) {
	return capnp.NewEnumList[Agent_Status](s, sz)
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0x9b1c2beb128e44da

func (c RPC) Send(ctx context.Context, params func(RPC_send_Params) error) (RPC_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_send_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Send(context.Context, RPC_send) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, RPC_send{call})
		},
	})

	return methods
}

// RPC_send holds the state for a server call to RPC.send.
// See server.Call for documentation.
type RPC_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_send) Args() RPC_send_Params {
	return RPC_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_send) AllocResults() (RPC_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_send_Params capnp.Struct

// RPC_send_Params_TypeID is the unique identifier for the type RPC_send_Params.
const RPC_send_Params_TypeID = 0xa53e5c96ae3372c1

func NewRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func NewRootRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func ReadRootRPC_send_Params(msg *capnp.Message) (RPC_send_Params, error) {
	root, err := msg.Root()
	return RPC_send_Params(root.Struct()), err
}

func (s RPC_send_Params) String() string {
	str, _ := text.Marshal(0xa53e5c96ae3372c1, capnp.Struct(s))
	return str
}

func (s RPC_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Params) DecodeFromPtr(p capnp.Ptr) RPC_send_Params {
	return RPC_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Params) Message_() (message.Message, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return message.Message(p.Struct()), err
}

func (s RPC_send_Params) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Params) SetMessage_(v message.Message) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMessage_ sets the message_ field to a newly
// allocated message.Message struct, preferring placement in s's segment.
func (s RPC_send_Params) NewMessage_() (message.Message, error) {
	ss, err := message.NewMessage(capnp.Struct(s).Segment())
	if err != nil {
		return message.Message{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Params_List is a list of RPC_send_Params.
type RPC_send_Params_List = capnp.StructList[RPC_send_Params]

// NewRPC_send_Params creates a new list of RPC_send_Params.
func NewRPC_send_Params_List(s *capnp.Segment, sz int32) (RPC_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Params](l), err
}

// RPC_send_Params_Future is a wrapper for a RPC_send_Params promised by a client call.
type RPC_send_Params_Future struct{ *capnp.Future }

func (f RPC_send_Params_Future) Struct() (RPC_send_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Params(p.Struct()), err
}
func (p RPC_send_Params_Future) Message_() message.Message_Future {
	return message.Message_Future{Future: p.Future.Field(0, nil)}
}

type RPC_send_Results capnp.Struct

// RPC_send_Results_TypeID is the unique identifier for the type RPC_send_Results.
const RPC_send_Results_TypeID = 0xd089d781c905d931

func NewRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func NewRootRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func ReadRootRPC_send_Results(msg *capnp.Message) (RPC_send_Results, error) {
	root, err := msg.Root()
	return RPC_send_Results(root.Struct()), err
}

func (s RPC_send_Results) String() string {
	str, _ := text.Marshal(0xd089d781c905d931, capnp.Struct(s))
	return str
}

func (s RPC_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Results) DecodeFromPtr(p capnp.Ptr) RPC_send_Results {
	return RPC_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Results) Out() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_send_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Results) SetOut(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOut sets the out field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_send_Results) NewOut() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Results_List is a list of RPC_send_Results.
type RPC_send_Results_List = capnp.StructList[RPC_send_Results]

// NewRPC_send_Results creates a new list of RPC_send_Results.
func NewRPC_send_Results_List(s *capnp.Segment, sz int32) (RPC_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Results](l), err
}

// RPC_send_Results_Future is a wrapper for a RPC_send_Results promised by a client call.
type RPC_send_Results_Future struct{ *capnp.Future }

func (f RPC_send_Results_Future) Struct() (RPC_send_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Results(p.Struct()), err
}
func (p RPC_send_Results_Future) Out() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

const schema_d4c9c9f76e88a0d0 = "x\xda\x8cR]h\\E\x18=g\xe6\xfeXM\xb2" +
	";\xdd\x15\x0dd\x0d\x88}i0\xb1\x09BX\xd0\x8d" +
	"\xb5\xc5\xda\xf8\xb3\x93\x08\x15\xff\xf0\xd2\x9d\xc6K7w" +
	"\x97{\xef\x9a\x06\x84P\xa1`\xea_}\xa8X\x15i" +
	"\xa1\xd5\x0a6Z\xf0EPH\x11\xd1\x80B\x1f\x14\xa9" +
	"\xe0\x83\x88/\xfaP\xf4\xa5R\x90+\xb3Iv\x17E" +
	"\xe9\xcb\xfd\xee\xcc\xf7\xcd9g\xce\x99;\x1e\x12S\xce" +
	"\x8e\xfe}\xd7C\xe8C\xae\x97\x1d\x19yx\xf2\xc5\xd5" +
	"\xbf^\x85\x1e$\xb3\x8b'_\x88\xae\xac\xad}\x0b\xd7" +
	"\xf5\x81\x82r\xaf\x16J\xeeM\xc0\xc46w\x1f\xc1\xec" +
	"\x87]\xafl\xfdmd\xe8-\xa8A\xd9\x1d\x06\x0b\xcb" +
	"\xde\xaf\x85\xe3\x9e=\xf3\x9aw_\xe1\x13\xfb\x97]\x88" +
	"'V^\x7f\xe2\xee3P%\x02.}`\xe2\x94\xb7" +
	"\x97`\xe1\x9cW\x01\xb3\x0b\xfd\xef\xf1\xd8\x1f\xc7\xcfB" +
	"\x0d\xf6RK;\xf8\x8d\xb7\x95\x85\x1f\xdb\x88\x97\xbc\x0f" +
	"\xc1\xec\xe7\xe9\xa7\x16\x8e]~\xe9#\xa8a\xd1U\x0d" +
	"N\xb4\xfcq\x16\x8e\xf8v\xf2\xb0o'w\\r\xd7" +
	"\x0e\x7f\xbf|\xb1\x97\xf7;\x7f\xc6\xf2\xfe\xe4W\x90a" +
	"K\xd6<87\x16\x84c\x81\x983Q:\x16\xd8\xef" +
	"\xe8\xfe\xa0\x195+\xe5{\xecB;\xeced\xb92" +
	"\x9b\x06i+\xd17K\x07p\x08\xa8\x13{\x01\xfd\x86" +
	"\xa4>-\xa8\xc8\"\xed\xe6\xa92\xa0\xdf\x96\xd4g\x05" +
	"\x95\x10E\x0a@\x9d\xd9\x09\xe8\x93\x92\xfa\x03A%e" +
	"\x91\x12P\xef\x8f\x03\xfa\xb4\xa4^\x15T\x8eS\xa4\x03" +
	"\xa8\xcf,\xe6\xa7\x92\xfa+A\xbaE\xba\x80\xfa\xc2B" +
	"\xaeJ\xea\xaf\x05\xb3\xb0f\xa24L\x17\x010\xdf\xf5" +
	"\x0fd\x1e\xac4\x838\x98O\x98\xcfn9zbr" +
	"\xcf\xd1\xc7?\xdfh,\xedoD\xa99\x942\x9f\x0d" +
	"\x9e\x9b|rh\xe5\xdd\x977:\xc3i\xa3QO8" +
	"\x00V%\x99\xcf\x9e\xfe\xf8\xcb7K\xb3\x7f^\xb5\xed" +
	"\x010k\xc6\x8dg\xc3\x9a\x89\xd7\xf9\x96o\x98\xbe<" +
	"\xe6\xddx~\x93/i{\xc2\\\xd7)\x909{\xec" +
	"\xbf\xec\xcd\x95g\xaa\xf7VI\xedH\xb7\xe7\x85p3" +
	"2\xa5\xb6C(\xd7\xcf%&\xaaM\xb1\xca.\x96\xf3" +
	"O,\x0b5j\xe7n\xab\xb6\xef\x0dh\xa7\x93N\xbf" +
	"\xf5\xfc:I]\x14\\\x9a7I\x12\xcc\x19\xe6\xb3w" +
	"\xa6\x7f\x7f\xe6\xb9\xd2\xd4\xf3\x1b7\xe8\x80\xcb\x7f\x81\xdf" +
	"\xbf\xee4\x17\xad\xda\xbe\x0e\xee\xee\xc7\x00\xbdKRW" +
	"{R\x7fp;\xa0\xf7H\xeaGzR\xd7v\xf3\x01" +
	"I\xfdh'\xb7\x03!\xa4\x89\xd9\x07\xc1>0\x17\x05" +
	"\xf3\xa6\xb3\x88\x1b\xf5\xce\xe2\x7fd\xb5_\xe7\xe8\xecp" +
	"\xdby+m\xa8Mf\x15\x90j\xf78@\xa1\xee\xda" +
	"\x09P\xaa;mq\xd4\xed\xb6\xb8j\x9b-\x9e*\x95" +
	"\x81\\X\xab\x9b\xe1\xd8\x04\xb5\xc5\xa5\x85 L\xc3h" +
	"n\xa9i\xa2\x9a\xad\x0b\x8d\xf8\xa0\xad&\x8e\x1b\xb1\xa9" +
	"U\x0e\x04a\xdd\xd4\xae%\x85\x19\x93\xb4\xea)\x93\xde" +
	"\x14n\xed\xa6\xe07Z)\xf3W~i\xad\x0c\x8cl" +
	"9\xbf\xee\xff\xdf\x01\x00\x00\xff\xff\xb7E7*"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0x9b1c2beb128e44da,
			0xa53e5c96ae3372c1,
			0xa895f29001a70dc1,
			0xb08cef90775e4be3,
			0xd089d781c905d931,
		},
		Compressed: true,
	})
}
