// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	tool "github.com/theapemachine/caramba/pkg/ai/tool"
	datura "github.com/theapemachine/caramba/pkg/datura"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) State() uint64 {
	return capnp.Struct(s).Uint64(0)
}

func (s Agent) SetState(v uint64) {
	capnp.Struct(s).SetUint64(0, v)
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (tool.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return tool.Tool_List(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v tool.Tool_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tool.Tool_List, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (tool.Tool_List, error) {
	l, err := tool.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tool.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 4}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0x9b1c2beb128e44da

func (c RPC) Send(ctx context.Context, params func(RPC_send_Params) error) (RPC_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_send_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Send(context.Context, RPC_send) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, RPC_send{call})
		},
	})

	return methods
}

// RPC_send holds the state for a server call to RPC.send.
// See server.Call for documentation.
type RPC_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_send) Args() RPC_send_Params {
	return RPC_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_send) AllocResults() (RPC_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_send_Params capnp.Struct

// RPC_send_Params_TypeID is the unique identifier for the type RPC_send_Params.
const RPC_send_Params_TypeID = 0xa53e5c96ae3372c1

func NewRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func NewRootRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func ReadRootRPC_send_Params(msg *capnp.Message) (RPC_send_Params, error) {
	root, err := msg.Root()
	return RPC_send_Params(root.Struct()), err
}

func (s RPC_send_Params) String() string {
	str, _ := text.Marshal(0xa53e5c96ae3372c1, capnp.Struct(s))
	return str
}

func (s RPC_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Params) DecodeFromPtr(p capnp.Ptr) RPC_send_Params {
	return RPC_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Params) Artifact() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_send_Params) HasArtifact() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Params) SetArtifact(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewArtifact sets the artifact field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_send_Params) NewArtifact() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Params_List is a list of RPC_send_Params.
type RPC_send_Params_List = capnp.StructList[RPC_send_Params]

// NewRPC_send_Params creates a new list of RPC_send_Params.
func NewRPC_send_Params_List(s *capnp.Segment, sz int32) (RPC_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Params](l), err
}

// RPC_send_Params_Future is a wrapper for a RPC_send_Params promised by a client call.
type RPC_send_Params_Future struct{ *capnp.Future }

func (f RPC_send_Params_Future) Struct() (RPC_send_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Params(p.Struct()), err
}
func (p RPC_send_Params_Future) Artifact() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

type RPC_send_Results capnp.Struct

// RPC_send_Results_TypeID is the unique identifier for the type RPC_send_Results.
const RPC_send_Results_TypeID = 0xd089d781c905d931

func NewRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func NewRootRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func ReadRootRPC_send_Results(msg *capnp.Message) (RPC_send_Results, error) {
	root, err := msg.Root()
	return RPC_send_Results(root.Struct()), err
}

func (s RPC_send_Results) String() string {
	str, _ := text.Marshal(0xd089d781c905d931, capnp.Struct(s))
	return str
}

func (s RPC_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Results) DecodeFromPtr(p capnp.Ptr) RPC_send_Results {
	return RPC_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Results) Out() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_send_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Results) SetOut(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOut sets the out field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_send_Results) NewOut() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Results_List is a list of RPC_send_Results.
type RPC_send_Results_List = capnp.StructList[RPC_send_Results]

// NewRPC_send_Results creates a new list of RPC_send_Results.
func NewRPC_send_Results_List(s *capnp.Segment, sz int32) (RPC_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Results](l), err
}

// RPC_send_Results_Future is a wrapper for a RPC_send_Results promised by a client call.
type RPC_send_Results_Future struct{ *capnp.Future }

func (f RPC_send_Results_Future) Struct() (RPC_send_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Results(p.Struct()), err
}
func (p RPC_send_Results_Future) Out() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

const schema_d4c9c9f76e88a0d0 = "x\xda\x8c\x91OHT_\x1c\xc5\xcf\xb9\xf7\xbd\xf17" +
	"0\xa3s}\xb3\xf8\x0dhB\xb4R\xd0\xcc\x8d\xb8h" +
	"\xac\x8cL\x0a\xe7Z\x8b\xe8\x0f\xf4\xd0\xa7\x0c\x8do\x86" +
	"\x99'$\x14\x15$\xa8i\x19d`m\xdaT\xb6\xc8" +
	"\x08j\xd1.\x89\x08w\x06A\x14\xb4lQ\xedj\xa1" +
	"\x08\xf1\xe2j\x8e\x83\x11\xb4y\xdc\xef}\xe7\xfby\xef" +
	"\x9c\xb3{\x95\x9dVk\xbc7\x0a\xa1sv$\x1ck" +
	"\xeam\xbf\xf6\xf2\xe7\x0d\xe8\x14\x19.\xdf\x1b\xf7W\x96" +
	"\x96\xde\xc1\xb6\xaa\x00g\xdaZs\xe6\xcc\xa9m\xd6j" +
	" \x18~\xec\xba^\xfb\xad\xa9\xee.TJn\x89A" +
	"\xe7\x85\xfd\xd5ym\x9b\x9dE\xfb\x90\xf3\xc5\x9c\xc2\xc5" +
	"b\xdb\xc2\xed\xd3{\xefC\xd5\x13\xb0i8o\xed\x1e" +
	"\x82\xce';\x0d\x86\x8b\xf1\x87\x9c\xf9>;\x0f\x95\xaa" +
	"\xfc\xb44BFj\xe9\xa8\x88!\xc6#O\xc0\xb0\xf5" +
	"\x83\xbdt\xe5\xfd\xc4r%\xedQ\xa4\xcf\xd0\x9eG\xd2" +
	"\xf8\x11\x16\xce\x0d\xb5\xb8\xd9\x16W\x0cy~\xd0\xe2\x9a" +
	"gs\xbf[\xf0\x0b\xe9\x8e}f\xc8\x90:)-\xc0" +
	"\"\xa0.\xf6\x00\xfa\x82\xa4\x1e\x17$\x934wc{" +
	"\x00}YRO\x09*\xc1$\x05\xa0&:\x00}U" +
	"R\xcf\x08*)\x92\x94\x80\x9a\xde\x0f\xe8qI}K" +
	"PY2I\x0bP7\xcd\xfa\x94\xa4\x9e\x17\x0c\xb3\x03" +
	"\x9e\x1fd\x83Q\x00Ll9\x05\x99\x00\x1bJ\x81\x1b" +
	"x\x8cB0\x0a\xa6\x0bn\xd1\x1d.1\x11\xee\x98\x9c" +
	"k\xef\x9e<\xf5\xea\xb7\xecR\x7f\xde\x0f\xbc\xf3\x01\x13" +
	"a\xeaq\xfb\x99\xba\x85\x07\xd3\x9b\x80 \x9f\xcf\x95X" +
	"\x0df$\x99\x08\xcf>{s\xa7\xfe\xd8\xea\x9ay]" +
	"\x0d\xfe=\x8b\x9a\x8e\xbe\xcc\x01\x93\x84%\xed\x8a\x8a\xb8" +
	"\x99\xaeR\x8d\x10\xca\xae\xaa)y\xfe@'3\xdcb" +
	"Y\xdbY\x06\xd5lt\xbb2\xeb\x06\x00m\x95\xf3\x8d" +
	"\x9b|c\x92\xfa\x7f\xc1\xd0-\x06\xd9A\xb7?X\x0f" +
	"c\xe5\xf3\xc8BuS\xf4\xe9\x86\x932^\xfe\x81?" +
	"\xbc\x11!G\xcd\xff\xc6\xca\xe4\x83'\x01\xdd%\xa93" +
	"\x82j\xb3\xba\xa3\x8d\x80\xee\x96\xd4\xc7Mub\xa3:" +
	"m.\x8fH\xea\x13\xe5B\x06\xb3\x90^\x911\x08\xc6" +
	"\xc0\x1a\xdf\x1d\xf6\xcaC1\x9f+\x0f\xff\xe2\xba\xcf+" +
	"\x8d\xe4\x02\x96*]\xef\x04\xf4\x7f\x92:)X\x95\x1f" +
	"\x09\xb6\xbb\xfd\x15\x00\x00\xff\xffv_\xe4\xe9"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0x9b1c2beb128e44da,
			0xa53e5c96ae3372c1,
			0xa895f29001a70dc1,
			0xd089d781c905d931,
		},
		Compressed: true,
	})
}
