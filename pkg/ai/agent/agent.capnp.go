// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	tools "github.com/theapemachine/caramba/pkg/tools"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (tools.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return tools.Tool_List(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v tools.Tool_List) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tools.Tool_List, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (tools.Tool_List, error) {
	l, err := tools.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tools.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type State capnp.Client

// State_TypeID is the unique identifier for the type State.
const State_TypeID = 0x9e6982bf11d6cbda

func (c State) Get(ctx context.Context, params func(State_get_Params) error) (State_get_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9e6982bf11d6cbda,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:State",
			MethodName:    "get",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(State_get_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return State_get_Results_Future{Future: ans.Future()}, release

}

func (c State) Set(ctx context.Context, params func(State_set_Params) error) (State_set_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9e6982bf11d6cbda,
			MethodID:      1,
			InterfaceName: "pkg/ai/agent/agent.capnp:State",
			MethodName:    "set",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 2}
		s.PlaceArgs = func(s capnp.Struct) error { return params(State_set_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return State_set_Results_Future{Future: ans.Future()}, release

}

func (c State) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c State) String() string {
	return "State(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c State) AddRef() State {
	return State(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c State) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c State) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c State) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (State) DecodeFromPtr(p capnp.Ptr) State {
	return State(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c State) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c State) IsSame(other State) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c State) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c State) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A State_Server is a State with a local implementation.
type State_Server interface {
	Get(context.Context, State_get) error

	Set(context.Context, State_set) error
}

// State_NewServer creates a new Server from an implementation of State_Server.
func State_NewServer(s State_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(State_Methods(nil, s), s, c)
}

// State_ServerToClient creates a new Client from an implementation of State_Server.
// The caller is responsible for calling Release on the returned Client.
func State_ServerToClient(s State_Server) State {
	return State(capnp.NewClient(State_NewServer(s)))
}

// State_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func State_Methods(methods []server.Method, s State_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9e6982bf11d6cbda,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:State",
			MethodName:    "get",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Get(ctx, State_get{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9e6982bf11d6cbda,
			MethodID:      1,
			InterfaceName: "pkg/ai/agent/agent.capnp:State",
			MethodName:    "set",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Set(ctx, State_set{call})
		},
	})

	return methods
}

// State_get holds the state for a server call to State.get.
// See server.Call for documentation.
type State_get struct {
	*server.Call
}

// Args returns the call's arguments.
func (c State_get) Args() State_get_Params {
	return State_get_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c State_get) AllocResults() (State_get_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return State_get_Results(r), err
}

// State_set holds the state for a server call to State.set.
// See server.Call for documentation.
type State_set struct {
	*server.Call
}

// Args returns the call's arguments.
func (c State_set) Args() State_set_Params {
	return State_set_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c State_set) AllocResults() (State_set_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return State_set_Results(r), err
}

// State_List is a list of State.
type State_List = capnp.CapList[State]

// NewState_List creates a new list of State.
func NewState_List(s *capnp.Segment, sz int32) (State_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[State](l), err
}

type State_get_Params capnp.Struct

// State_get_Params_TypeID is the unique identifier for the type State_get_Params.
const State_get_Params_TypeID = 0x884163e5f1e8a240

func NewState_get_Params(s *capnp.Segment) (State_get_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return State_get_Params(st), err
}

func NewRootState_get_Params(s *capnp.Segment) (State_get_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return State_get_Params(st), err
}

func ReadRootState_get_Params(msg *capnp.Message) (State_get_Params, error) {
	root, err := msg.Root()
	return State_get_Params(root.Struct()), err
}

func (s State_get_Params) String() string {
	str, _ := text.Marshal(0x884163e5f1e8a240, capnp.Struct(s))
	return str
}

func (s State_get_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (State_get_Params) DecodeFromPtr(p capnp.Ptr) State_get_Params {
	return State_get_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s State_get_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s State_get_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s State_get_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s State_get_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// State_get_Params_List is a list of State_get_Params.
type State_get_Params_List = capnp.StructList[State_get_Params]

// NewState_get_Params creates a new list of State_get_Params.
func NewState_get_Params_List(s *capnp.Segment, sz int32) (State_get_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[State_get_Params](l), err
}

// State_get_Params_Future is a wrapper for a State_get_Params promised by a client call.
type State_get_Params_Future struct{ *capnp.Future }

func (f State_get_Params_Future) Struct() (State_get_Params, error) {
	p, err := f.Future.Ptr()
	return State_get_Params(p.Struct()), err
}

type State_get_Results capnp.Struct

// State_get_Results_TypeID is the unique identifier for the type State_get_Results.
const State_get_Results_TypeID = 0x97aa2e405b565985

func NewState_get_Results(s *capnp.Segment) (State_get_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return State_get_Results(st), err
}

func NewRootState_get_Results(s *capnp.Segment) (State_get_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return State_get_Results(st), err
}

func ReadRootState_get_Results(msg *capnp.Message) (State_get_Results, error) {
	root, err := msg.Root()
	return State_get_Results(root.Struct()), err
}

func (s State_get_Results) String() string {
	str, _ := text.Marshal(0x97aa2e405b565985, capnp.Struct(s))
	return str
}

func (s State_get_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (State_get_Results) DecodeFromPtr(p capnp.Ptr) State_get_Results {
	return State_get_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s State_get_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s State_get_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s State_get_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s State_get_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s State_get_Results) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return params.Params(p.Struct()), err
}

func (s State_get_Results) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s State_get_Results) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s State_get_Results) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s State_get_Results) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return context2.Context(p.Struct()), err
}

func (s State_get_Results) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s State_get_Results) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s State_get_Results) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// State_get_Results_List is a list of State_get_Results.
type State_get_Results_List = capnp.StructList[State_get_Results]

// NewState_get_Results creates a new list of State_get_Results.
func NewState_get_Results_List(s *capnp.Segment, sz int32) (State_get_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[State_get_Results](l), err
}

// State_get_Results_Future is a wrapper for a State_get_Results promised by a client call.
type State_get_Results_Future struct{ *capnp.Future }

func (f State_get_Results_Future) Struct() (State_get_Results, error) {
	p, err := f.Future.Ptr()
	return State_get_Results(p.Struct()), err
}
func (p State_get_Results_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(0, nil)}
}
func (p State_get_Results_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(1, nil)}
}

type State_set_Params capnp.Struct

// State_set_Params_TypeID is the unique identifier for the type State_set_Params.
const State_set_Params_TypeID = 0xbf4e302fb59b0e43

func NewState_set_Params(s *capnp.Segment) (State_set_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return State_set_Params(st), err
}

func NewRootState_set_Params(s *capnp.Segment) (State_set_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return State_set_Params(st), err
}

func ReadRootState_set_Params(msg *capnp.Message) (State_set_Params, error) {
	root, err := msg.Root()
	return State_set_Params(root.Struct()), err
}

func (s State_set_Params) String() string {
	str, _ := text.Marshal(0xbf4e302fb59b0e43, capnp.Struct(s))
	return str
}

func (s State_set_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (State_set_Params) DecodeFromPtr(p capnp.Ptr) State_set_Params {
	return State_set_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s State_set_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s State_set_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s State_set_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s State_set_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s State_set_Params) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return params.Params(p.Struct()), err
}

func (s State_set_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s State_set_Params) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s State_set_Params) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s State_set_Params) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return context2.Context(p.Struct()), err
}

func (s State_set_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s State_set_Params) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s State_set_Params) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// State_set_Params_List is a list of State_set_Params.
type State_set_Params_List = capnp.StructList[State_set_Params]

// NewState_set_Params creates a new list of State_set_Params.
func NewState_set_Params_List(s *capnp.Segment, sz int32) (State_set_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[State_set_Params](l), err
}

// State_set_Params_Future is a wrapper for a State_set_Params promised by a client call.
type State_set_Params_Future struct{ *capnp.Future }

func (f State_set_Params_Future) Struct() (State_set_Params, error) {
	p, err := f.Future.Ptr()
	return State_set_Params(p.Struct()), err
}
func (p State_set_Params_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(0, nil)}
}
func (p State_set_Params_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(1, nil)}
}

type State_set_Results capnp.Struct

// State_set_Results_TypeID is the unique identifier for the type State_set_Results.
const State_set_Results_TypeID = 0x99fb52e21e1d3e9e

func NewState_set_Results(s *capnp.Segment) (State_set_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return State_set_Results(st), err
}

func NewRootState_set_Results(s *capnp.Segment) (State_set_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return State_set_Results(st), err
}

func ReadRootState_set_Results(msg *capnp.Message) (State_set_Results, error) {
	root, err := msg.Root()
	return State_set_Results(root.Struct()), err
}

func (s State_set_Results) String() string {
	str, _ := text.Marshal(0x99fb52e21e1d3e9e, capnp.Struct(s))
	return str
}

func (s State_set_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (State_set_Results) DecodeFromPtr(p capnp.Ptr) State_set_Results {
	return State_set_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s State_set_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s State_set_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s State_set_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s State_set_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// State_set_Results_List is a list of State_set_Results.
type State_set_Results_List = capnp.StructList[State_set_Results]

// NewState_set_Results creates a new list of State_set_Results.
func NewState_set_Results_List(s *capnp.Segment, sz int32) (State_set_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[State_set_Results](l), err
}

// State_set_Results_Future is a wrapper for a State_set_Results promised by a client call.
type State_set_Results_Future struct{ *capnp.Future }

func (f State_set_Results_Future) Struct() (State_set_Results, error) {
	p, err := f.Future.Ptr()
	return State_set_Results(p.Struct()), err
}

const schema_d4c9c9f76e88a0d0 = "x\xda\xb4\x92MHTQ\x14\xc7\xcf\xff\xde\xf7\x1c\x17" +
	"\x8e\xcd\xed\xd9b \x95\xc2\xa0\x0fr4[\x88\x8b\x1c" +
	"\xfb\x00\x8b\xac\xb9cDj\x82\x0f}MC\xe3\xcc\xe4" +
	"\xbba\xae\x82@\x12#j\x13a\x81D\x8b\x8a\xa0\"" +
	"\xa8E+\x8b\x88\x906\x05\xd5\"h\x13D\xed\xfa\x80" +
	"(\x8c\xb8q\xfdx\xf30(\x09\xda<\xee\xb9\xe7\xbc" +
	"{~\xe7\xfc\xff\x0d\x9f\x90\xb4\x1a\xa3\x1f#\xc4\xe4A" +
	"\xbbL'\xaf|\xf8\xfc\xae\xbfm\x8cD-\x88\xac\x08" +
	"Q\xd3\x1b\x9e\x06Yzt\xc3\xde\xe6\xd3\x0f~\x9e%" +
	"\x11\x87~vy,\xffmz\xfa\x05\xd9\xa6\xc4\x99\xe6" +
	"3\xceKnN\xcf\xf9{\x82\x1e\xed\xda\xdf\x93\xac\xbf" +
	"qa\xee\x15\x9b\x99g\xee[\xdd 8\x8f\xada\x82" +
	"\x9e\xdcR]\xf36\xfdc\"\xd4f\x95\xddm\xda\xbc" +
	"~\xfaJL\x9d\xccN\x92\x88\xf3R\x1b\x82\x13\xb5g" +
	"\x9c\xb8mz\xac\xb0O9\x9e9\xe9\x87\xd1k8\xf7" +
	"\xe5\xfc\xf5EL\x86\xa4\xa9\xc3^\x0e\xa7w\xf6\x87." +
	"\xfb6Ao\xab\xbct/\xd1\xb0g*\x0c\xf5\xd5N" +
	"\x1b(\x94\x0d\xd3\x1d]<\x92I\xb8\xd9\x84ke\xbc" +
	"\xbcJ\xb8\xe6[\xdf\xef\x16\xf3\xc5\x96N\xe5*\xaf>" +
	"\xe3\xa9\xba\x94;\xe4\x0e\xc2\x0fj\xd9\xe2\xda\xd6\x966" +
	"\x13\xa4\x00\x19\xe3\x16\x91\x05\"\xe1\xee\"\x92}\x1c2" +
	"\xc7 \x80*\x98\xcbl\x0b\x91\x1c\xe0\x90E\x06\xc1X" +
	"\x15\x18\x91\x18\xdcJ$\x0fsH\xc5 8\xaf\x02'" +
	"\x12G7\x11\xc9\x1c\x87\x1cc\xd0\xd9\x01/\xaf\xb2j" +
	"\x84\x88\x10+m\x80\x80\x18\xa1\xb5h\xf8|\xc4t\xcd" +
	"\xf8Ds\xfbx\xcf\xa3\xf9\xc4\x89\xfeB^y\xc7\x15" +
	"b:~\xb3\xb9w\xe5\xad\xabg\xe63\xb5\xaaP\xc8" +
	"\xf9\xa8$\xa48\x10\xd3}w\x9f\\\xac\xee\xfc>c" +
	"\xd2\x95\x84%m%\xed\xf9\xc7r\\\xf9\xb2<\x18y" +
	"\x9d\x99\xae\x8eC6\x84F\xdeh\xa6[\xcb!7\xb3" +
	"\x7fA\xfd+\x8b\x1fb\xf9\x93D\xb3\xd5F\xa2rn" +
	"\x13\x05\xa6\xc7\x82oE\xe3jbbM\x04%\xd7`" +
	"\xc1\xb2\"nr\xd1H$\xe3\xa9$\"\xbe\xf9\xa6P" +
	"b\xe3\xbf\xb1\xed\x9cS\x0c#\xa6cE\xb0\xa1\x1d\xdd" +
	"Dr;\x87L\x856\xd4\xb1\x9eH\xb6s\xc8}!" +
	"SHs\xb9\x9bC\x1e\x08\xf4?\x94%\xee\x0d\xa1\x82" +
	"\x18*\x08\xcb\xf2\xee\xa0\x17\x04C\x85\\\x10,ie" +
	"\xf3\xa6\xfe\xcf\xea\xfd\x0a\x00\x00\xff\xff\xde\xee,\xbc"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x884163e5f1e8a240,
			0x8ffdc08b384f2b85,
			0x97aa2e405b565985,
			0x99fb52e21e1d3e9e,
			0x9e6982bf11d6cbda,
			0xa895f29001a70dc1,
			0xbf4e302fb59b0e43,
		},
		Compressed: true,
	})
}
