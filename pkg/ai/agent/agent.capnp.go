// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	message "github.com/theapemachine/caramba/pkg/ai/message"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	provider "github.com/theapemachine/caramba/pkg/ai/provider"
	datura "github.com/theapemachine/caramba/pkg/datura"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Agent) Provider() (provider.Provider, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return provider.Provider(p.Struct()), err
}

func (s Agent) HasProvider() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Agent) SetProvider(v provider.Provider) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewProvider sets the provider field to a newly
// allocated provider.Provider struct, preferring placement in s's segment.
func (s Agent) NewProvider() (provider.Provider, error) {
	ss, err := provider.NewProvider(capnp.Struct(s).Segment())
	if err != nil {
		return provider.Provider{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}
func (p Agent_Future) Provider() provider.Provider_Future {
	return provider.Provider_Future{Future: p.Future.Field(4, nil)}
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0x9b1c2beb128e44da

func (c RPC) Send(ctx context.Context, params func(RPC_send_Params) error) (RPC_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_send_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Send(context.Context, RPC_send) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, RPC_send{call})
		},
	})

	return methods
}

// RPC_send holds the state for a server call to RPC.send.
// See server.Call for documentation.
type RPC_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_send) Args() RPC_send_Params {
	return RPC_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_send) AllocResults() (RPC_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_send_Params capnp.Struct

// RPC_send_Params_TypeID is the unique identifier for the type RPC_send_Params.
const RPC_send_Params_TypeID = 0xa53e5c96ae3372c1

func NewRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func NewRootRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func ReadRootRPC_send_Params(msg *capnp.Message) (RPC_send_Params, error) {
	root, err := msg.Root()
	return RPC_send_Params(root.Struct()), err
}

func (s RPC_send_Params) String() string {
	str, _ := text.Marshal(0xa53e5c96ae3372c1, capnp.Struct(s))
	return str
}

func (s RPC_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Params) DecodeFromPtr(p capnp.Ptr) RPC_send_Params {
	return RPC_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Params) Message_() (message.Message, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return message.Message(p.Struct()), err
}

func (s RPC_send_Params) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Params) SetMessage_(v message.Message) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMessage_ sets the message_ field to a newly
// allocated message.Message struct, preferring placement in s's segment.
func (s RPC_send_Params) NewMessage_() (message.Message, error) {
	ss, err := message.NewMessage(capnp.Struct(s).Segment())
	if err != nil {
		return message.Message{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Params_List is a list of RPC_send_Params.
type RPC_send_Params_List = capnp.StructList[RPC_send_Params]

// NewRPC_send_Params creates a new list of RPC_send_Params.
func NewRPC_send_Params_List(s *capnp.Segment, sz int32) (RPC_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Params](l), err
}

// RPC_send_Params_Future is a wrapper for a RPC_send_Params promised by a client call.
type RPC_send_Params_Future struct{ *capnp.Future }

func (f RPC_send_Params_Future) Struct() (RPC_send_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Params(p.Struct()), err
}
func (p RPC_send_Params_Future) Message_() message.Message_Future {
	return message.Message_Future{Future: p.Future.Field(0, nil)}
}

type RPC_send_Results capnp.Struct

// RPC_send_Results_TypeID is the unique identifier for the type RPC_send_Results.
const RPC_send_Results_TypeID = 0xd089d781c905d931

func NewRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func NewRootRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func ReadRootRPC_send_Results(msg *capnp.Message) (RPC_send_Results, error) {
	root, err := msg.Root()
	return RPC_send_Results(root.Struct()), err
}

func (s RPC_send_Results) String() string {
	str, _ := text.Marshal(0xd089d781c905d931, capnp.Struct(s))
	return str
}

func (s RPC_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Results) DecodeFromPtr(p capnp.Ptr) RPC_send_Results {
	return RPC_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Results) Out() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_send_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Results) SetOut(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOut sets the out field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_send_Results) NewOut() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Results_List is a list of RPC_send_Results.
type RPC_send_Results_List = capnp.StructList[RPC_send_Results]

// NewRPC_send_Results creates a new list of RPC_send_Results.
func NewRPC_send_Results_List(s *capnp.Segment, sz int32) (RPC_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Results](l), err
}

// RPC_send_Results_Future is a wrapper for a RPC_send_Results promised by a client call.
type RPC_send_Results_Future struct{ *capnp.Future }

func (f RPC_send_Results_Future) Struct() (RPC_send_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Results(p.Struct()), err
}
func (p RPC_send_Results_Future) Out() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

const schema_d4c9c9f76e88a0d0 = "x\xda\x8c\x91OH\x94A\x18\xc6\xdfg\xe6\x9b]#" +
	"\xff\xec\xf8m\x07A\x13\xa2\x93\x82\x9bI B\xad\x96" +
	"\x91i\xd1\x8et\x88\xca\xc3\x87\xfbeK\xee\xb7\xdb~" +
	"\x9f\x91\xa0X\x91\xe0Z\x96\x17\x83\x08\xca\xa0\xbfP\x86" +
	"\x87\x0e\xdd\x92N\xde<\x04Q\xd0%\xe8R\x87\xa8\x8b" +
	"\x10\xc4\xc4\xac\xb6\xbbl\x04]\x86yg\xde\xf9\xcd\xfb" +
	"<\xcf\xaeO\xe8\xb6\xdak\xeeU\x11SI\x11\xd2\xd3" +
	"\xad\xc7:\xaf\xbd\xfeu\x93d\x03\xf4\xda\xe2\x8c\xb7\xbe" +
	"\xba\xfa\x96\x84\x08\x13\xd9{\xac\x9fv\x8f\x15&\xea\xd8" +
	"k5\x83\xa0?\xf4\xde\xa8\xff\xda\xdax\x87d\x03/" +
	"5\x13lW|\xb1\xcf\x17\xde\xa4\xc5!{\xc1\xec\xf4" +
	"J\xaec\xe9\xd6\xe9}\x0fI6\x81H\xc0p&E" +
	"?\x08v^\xc4\x09z\xa5\xe61\xe6\x7f,<\xa9\xf8" +
	"\x9a\x9b\xc6\xa7\xa2\x1e\xf6\xab\x02\xf1\xa5xA\xd0\xed\xef" +
	"\xc5\xea\xe5w\xf9\xb5r\x9a\x0a\x0d\x1a\xdaP(N\x1f" +
	"u\xf6\xdcH\xccI\xc5\x1c6\xe2zA\xcc1k\xdb" +
	"\xb0\x93\xf5\xb2\xf1\xae\x1eS$\x00\x15\xe5\x16\x91\x05\"" +
	"9\xd9O\xa4&8\xd4\x0c\x83\x04\xa20\x87\xd3]D" +
	"\xea\x12\x87\xba\xce \x19\x8b\x82\x11\xc9\xfc~\"u\x95" +
	"C\xcd3H\xce\xa3\xe0Drn7\x91\x9a\xe1P\x0f" +
	"\x18\xa4eEa\x11\xc9\xfb\x86\xb9\xc8\xa1\x9e1\xe8T" +
	"\xd2\xf5\x82T0ND\x88\x94\xa4\x12\x10!\xc4\xb3N" +
	"\xceI\xfb\x88\xe8\xed\xb3\xb7;\xfbfO\xbd\xd9\xbc\x98" +
	"\x1a\xcex\x81{1@D7<\xef\x1cj\\z4" +
	"\xb7y\xd3\x1cd2\xa3>j\x09\x09\x0eT\x133[" +
	"\x9d\xcde.\xa4\x92nn\xe3\x97\xfc\xd6\x81o\xb1\xd0" +
	"\xb6\xe5\xcd'\xff\xb6\xa4\xaek0q\xc0\x18bqQ" +
	"\x96\x14\xfe\x98,e\x0b1)\xc2u\xbe\xeb%\xbb\x91" +
	"@\x89eU\xb2\x0c\xaa\xcd\xf4\xedL\x14D\x11)\xab" +
	"hs\x8d1\xaf\x8aCE\x19\xa6\xd2\xae\xef;#." +
	"\"\xfa\xee\xc0\xf7\xb3\x13M\xddW*\x07\xe5\x7f\xc1\x0f" +
	"o\xd8\x88q3mu\x91{\xf0$\x91\xea\xe5P\x89" +
	"\xb2\xf8\x8e\xb6\x10\xa9>\x0eu\xbc,>e\x0e\x8fp" +
	"\xa8\x13\xc5P\xce\xa4\x88\xbb\xb9\x82\x87\xd5\x84:\xcfI" +
	"\xbb\xc5\"\x97\x19-\x16\xff\xa3y\xd0\xf5\xc7F\x03\xf8" +
	"\xe5\x9aw\x944\x873c\x01\"\xeb\x9f\xc7\x96j[" +
	"\xb7,o\xa8\xfd\x1d\x00\x00\xff\xffAL\xe3D"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0x9b1c2beb128e44da,
			0xa53e5c96ae3372c1,
			0xa895f29001a70dc1,
			0xd089d781c905d931,
		},
		Compressed: true,
	})
}
