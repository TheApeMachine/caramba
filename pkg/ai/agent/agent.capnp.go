// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	params "github.com/theapemachine/caramba/pkg/ai/params"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type AgentRPC capnp.Client

// AgentRPC_TypeID is the unique identifier for the type AgentRPC.
const AgentRPC_TypeID = 0x9048af051e281d80

func (c AgentRPC) Run(ctx context.Context, params func(AgentRPC_run_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9048af051e281d80,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:AgentRPC",
			MethodName:    "run",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AgentRPC_run_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c AgentRPC) Stop(ctx context.Context, params func(AgentRPC_stop_Params) error) (AgentRPC_stop_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9048af051e281d80,
			MethodID:      1,
			InterfaceName: "pkg/ai/agent/agent.capnp:AgentRPC",
			MethodName:    "stop",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(AgentRPC_stop_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return AgentRPC_stop_Results_Future{Future: ans.Future()}, release

}

func (c AgentRPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c AgentRPC) String() string {
	return "AgentRPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c AgentRPC) AddRef() AgentRPC {
	return AgentRPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c AgentRPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c AgentRPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c AgentRPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (AgentRPC) DecodeFromPtr(p capnp.Ptr) AgentRPC {
	return AgentRPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c AgentRPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c AgentRPC) IsSame(other AgentRPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c AgentRPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c AgentRPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A AgentRPC_Server is a AgentRPC with a local implementation.
type AgentRPC_Server interface {
	Run(context.Context, AgentRPC_run) error

	Stop(context.Context, AgentRPC_stop) error
}

// AgentRPC_NewServer creates a new Server from an implementation of AgentRPC_Server.
func AgentRPC_NewServer(s AgentRPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(AgentRPC_Methods(nil, s), s, c)
}

// AgentRPC_ServerToClient creates a new Client from an implementation of AgentRPC_Server.
// The caller is responsible for calling Release on the returned Client.
func AgentRPC_ServerToClient(s AgentRPC_Server) AgentRPC {
	return AgentRPC(capnp.NewClient(AgentRPC_NewServer(s)))
}

// AgentRPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func AgentRPC_Methods(methods []server.Method, s AgentRPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9048af051e281d80,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:AgentRPC",
			MethodName:    "run",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Run(ctx, AgentRPC_run{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9048af051e281d80,
			MethodID:      1,
			InterfaceName: "pkg/ai/agent/agent.capnp:AgentRPC",
			MethodName:    "stop",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stop(ctx, AgentRPC_stop{call})
		},
	})

	return methods
}

// AgentRPC_run holds the state for a server call to AgentRPC.run.
// See server.Call for documentation.
type AgentRPC_run struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AgentRPC_run) Args() AgentRPC_run_Params {
	return AgentRPC_run_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AgentRPC_run) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// AgentRPC_stop holds the state for a server call to AgentRPC.stop.
// See server.Call for documentation.
type AgentRPC_stop struct {
	*server.Call
}

// Args returns the call's arguments.
func (c AgentRPC_stop) Args() AgentRPC_stop_Params {
	return AgentRPC_stop_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c AgentRPC_stop) AllocResults() (AgentRPC_stop_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_stop_Results(r), err
}

// AgentRPC_List is a list of AgentRPC.
type AgentRPC_List = capnp.CapList[AgentRPC]

// NewAgentRPC_List creates a new list of AgentRPC.
func NewAgentRPC_List(s *capnp.Segment, sz int32) (AgentRPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[AgentRPC](l), err
}

type AgentRPC_run_Params capnp.Struct

// AgentRPC_run_Params_TypeID is the unique identifier for the type AgentRPC_run_Params.
const AgentRPC_run_Params_TypeID = 0xb9bda85dc6f0a9e7

func NewAgentRPC_run_Params(s *capnp.Segment) (AgentRPC_run_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_run_Params(st), err
}

func NewRootAgentRPC_run_Params(s *capnp.Segment) (AgentRPC_run_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_run_Params(st), err
}

func ReadRootAgentRPC_run_Params(msg *capnp.Message) (AgentRPC_run_Params, error) {
	root, err := msg.Root()
	return AgentRPC_run_Params(root.Struct()), err
}

func (s AgentRPC_run_Params) String() string {
	str, _ := text.Marshal(0xb9bda85dc6f0a9e7, capnp.Struct(s))
	return str
}

func (s AgentRPC_run_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AgentRPC_run_Params) DecodeFromPtr(p capnp.Ptr) AgentRPC_run_Params {
	return AgentRPC_run_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AgentRPC_run_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AgentRPC_run_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AgentRPC_run_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AgentRPC_run_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AgentRPC_run_Params_List is a list of AgentRPC_run_Params.
type AgentRPC_run_Params_List = capnp.StructList[AgentRPC_run_Params]

// NewAgentRPC_run_Params creates a new list of AgentRPC_run_Params.
func NewAgentRPC_run_Params_List(s *capnp.Segment, sz int32) (AgentRPC_run_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AgentRPC_run_Params](l), err
}

// AgentRPC_run_Params_Future is a wrapper for a AgentRPC_run_Params promised by a client call.
type AgentRPC_run_Params_Future struct{ *capnp.Future }

func (f AgentRPC_run_Params_Future) Struct() (AgentRPC_run_Params, error) {
	p, err := f.Future.Ptr()
	return AgentRPC_run_Params(p.Struct()), err
}

type AgentRPC_stop_Params capnp.Struct

// AgentRPC_stop_Params_TypeID is the unique identifier for the type AgentRPC_stop_Params.
const AgentRPC_stop_Params_TypeID = 0xc3cd8b75d9d30639

func NewAgentRPC_stop_Params(s *capnp.Segment) (AgentRPC_stop_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_stop_Params(st), err
}

func NewRootAgentRPC_stop_Params(s *capnp.Segment) (AgentRPC_stop_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_stop_Params(st), err
}

func ReadRootAgentRPC_stop_Params(msg *capnp.Message) (AgentRPC_stop_Params, error) {
	root, err := msg.Root()
	return AgentRPC_stop_Params(root.Struct()), err
}

func (s AgentRPC_stop_Params) String() string {
	str, _ := text.Marshal(0xc3cd8b75d9d30639, capnp.Struct(s))
	return str
}

func (s AgentRPC_stop_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AgentRPC_stop_Params) DecodeFromPtr(p capnp.Ptr) AgentRPC_stop_Params {
	return AgentRPC_stop_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AgentRPC_stop_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AgentRPC_stop_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AgentRPC_stop_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AgentRPC_stop_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AgentRPC_stop_Params_List is a list of AgentRPC_stop_Params.
type AgentRPC_stop_Params_List = capnp.StructList[AgentRPC_stop_Params]

// NewAgentRPC_stop_Params creates a new list of AgentRPC_stop_Params.
func NewAgentRPC_stop_Params_List(s *capnp.Segment, sz int32) (AgentRPC_stop_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AgentRPC_stop_Params](l), err
}

// AgentRPC_stop_Params_Future is a wrapper for a AgentRPC_stop_Params promised by a client call.
type AgentRPC_stop_Params_Future struct{ *capnp.Future }

func (f AgentRPC_stop_Params_Future) Struct() (AgentRPC_stop_Params, error) {
	p, err := f.Future.Ptr()
	return AgentRPC_stop_Params(p.Struct()), err
}

type AgentRPC_stop_Results capnp.Struct

// AgentRPC_stop_Results_TypeID is the unique identifier for the type AgentRPC_stop_Results.
const AgentRPC_stop_Results_TypeID = 0xd0d73fbf288eff99

func NewAgentRPC_stop_Results(s *capnp.Segment) (AgentRPC_stop_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_stop_Results(st), err
}

func NewRootAgentRPC_stop_Results(s *capnp.Segment) (AgentRPC_stop_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return AgentRPC_stop_Results(st), err
}

func ReadRootAgentRPC_stop_Results(msg *capnp.Message) (AgentRPC_stop_Results, error) {
	root, err := msg.Root()
	return AgentRPC_stop_Results(root.Struct()), err
}

func (s AgentRPC_stop_Results) String() string {
	str, _ := text.Marshal(0xd0d73fbf288eff99, capnp.Struct(s))
	return str
}

func (s AgentRPC_stop_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (AgentRPC_stop_Results) DecodeFromPtr(p capnp.Ptr) AgentRPC_stop_Results {
	return AgentRPC_stop_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s AgentRPC_stop_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s AgentRPC_stop_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s AgentRPC_stop_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s AgentRPC_stop_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// AgentRPC_stop_Results_List is a list of AgentRPC_stop_Results.
type AgentRPC_stop_Results_List = capnp.StructList[AgentRPC_stop_Results]

// NewAgentRPC_stop_Results creates a new list of AgentRPC_stop_Results.
func NewAgentRPC_stop_Results_List(s *capnp.Segment, sz int32) (AgentRPC_stop_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[AgentRPC_stop_Results](l), err
}

// AgentRPC_stop_Results_Future is a wrapper for a AgentRPC_stop_Results promised by a client call.
type AgentRPC_stop_Results_Future struct{ *capnp.Future }

func (f AgentRPC_stop_Results_Future) Struct() (AgentRPC_stop_Results, error) {
	p, err := f.Future.Ptr()
	return AgentRPC_stop_Results(p.Struct()), err
}

const schema_d4c9c9f76e88a0d0 = "x\xda\x94\x90OKTQ\x18\xc6\x9f\xe7\x9c{\x9d\x16" +
	"\x9as\x1a7\x03\xa5 \x06b\xa0\xd9l\xd4\xcdX\x16" +
	"X$\xdd#.\xa2\x90\xba\xe8\xcd\xa6\xc6;\xb7;w" +
	"(\xdbT\x0bI\x14\xcb\x16\x11\xb6jU\xba(i\xe9" +
	"\"2\xa4\xc0E`\x14D\x9f\xc0m\xb4\x09\x82\xb8q" +
	"\xd4\xae\x83P\xd4\xe6\xf0\xbe\xef\xf3\xfe9\xcf\xef\xf0#" +
	"\xf6Z\x9du\xf9\x14\x84\x1e\xb2k\xe2\xc9Cg\xbaf" +
	"V~\xde\x87\xca2^\x7f2\xe5\x7f_[\xfb\x04\xdb" +
	"J\x01\x99I\xf9#\xf3@\x9ahVn\x80\xf1\xed\x03" +
	"\xad\x8d\xf6R\xff\x1cTV\xee\xf4\x82\xb9\x8a\xb5\x8f\x99" +
	"\xc9\xcd\x99;\xd6\xdd\xcc\x07\x13\xc5o\xea\x9eq\xee\xdb" +
	"\xc3\x85]\x9b\xcd\xbe\xdc\xb2\x19X\xdb\x1cxk-\x81" +
	"\xf1\xc6\xe2\xd7w\xc3\x0b\xaf\x96\xa1\x9a\x09\x18!\xe7\xda" +
	"W\x08+\xee\xae\xf9\xf8\xa52\xf3~\xb5J\x19\xb0C" +
	"\xa3\xcc\xc7\xf7Z_\xe7?\xafW)\xdd\xf6Mb1" +
	"\x0e\xae\x8eu\xb8\x85\x0eW\x8cy~\xd4\xe1\x9a\xb7}" +
	"\xc4\x0d\xfc \xdfs\xd4$\x0e\xa9\xd3\xd2\x02,\x02\xca" +
	"=\x05\xe8\x8b\x92\xba(\xa8\xc8\x06\x9ab\xa1\x07\xd0\xa3" +
	"\x92:\x10TB4P\x00j\xfc\x18\xa0/K\xeaH" +
	"PI\xd9@\x09\xa8kG\x00]\x94\xd4S\x82qa" +
	"\xd4\xf3\xa3B4\x01\x80\xe9\x1d\x04 \xd3`>pC" +
	"w\xbc\xcct\xdc8=\xdf\xd5?}~u[\xb85" +
	"R\xf2#\xefF\xc4t\x9c}\xde5\xbc\xff\xc5\xd3\xd9" +
	"m\xa5)*\x95\x8ae\xee\x05\x1dI\xd6B\x980\xf1" +
	"'w\xfb\xdb\xb27\xe8\xb0\xcfX\xdc#m AK" +
	"\xff\xe5\xca\xf5\xdc\xe3\x0b\xf3\xaa\xb3\x19B\x1dL\x91\x09" +
	"\\\xfef\xa9\xb2m\x10\xaa.\x95\x0a+~/\xeb\xcb" +
	"Q)\xe8\xa5\xc3\xbf\x9d<\xb9e\x99\x13\xe6dmB" +
	"\xf5\xc49@\x1f\x97\xd4N\x15\xd5\x816@\xf7K\xea" +
	"\xa1*\xaa\xda\x14OK\xea\xb3\x09\xc0K\x05H/\xdc" +
	"\xf4[\x0b\xd6\xfb\xee\xb8\x97$a\xa9\x98$\xc9\xb7\xac" +
	"?\x91\xe8k\x0f+~\x8b\xe3\xd6\x1b\xf2\xff\xd2n," +
	"\xb78M\xee\x7f\xf5\x0f\xe6\xbdr\xa5\x18\x95\x7f\x05\x00" +
	"\x00\xff\xff\x1e\x19\xf2\xdc"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0x9048af051e281d80,
			0xa895f29001a70dc1,
			0xb9bda85dc6f0a9e7,
			0xc3cd8b75d9d30639,
			0xd0d73fbf288eff99,
		},
		Compressed: true,
	})
}
