// Code generated by capnpc-go. DO NOT EDIT.

package agent

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	message "github.com/theapemachine/caramba/pkg/ai/message"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	provider "github.com/theapemachine/caramba/pkg/ai/provider"
	datura "github.com/theapemachine/caramba/pkg/datura"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return params.Params(p.Struct()), err
}

func (s Agent) HasParams() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Agent) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return context2.Context(p.Struct()), err
}

func (s Agent) HasContext() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Agent) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(2, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Agent) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(2, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Agent) SetTools(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}
func (s Agent) Provider() (provider.Provider, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return provider.Provider(p.Struct()), err
}

func (s Agent) HasProvider() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Agent) SetProvider(v provider.Provider) error {
	return capnp.Struct(s).SetPtr(4, capnp.Struct(v).ToPtr())
}

// NewProvider sets the provider field to a newly
// allocated provider.Provider struct, preferring placement in s's segment.
func (s Agent) NewProvider() (provider.Provider, error) {
	ss, err := provider.NewProvider(capnp.Struct(s).Segment())
	if err != nil {
		return provider.Provider{}, err
	}
	err = capnp.Struct(s).SetPtr(4, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Status() Agent_Status {
	return Agent_Status(capnp.Struct(s).Uint16(0))
}

func (s Agent) SetStatus(v Agent_Status) {
	capnp.Struct(s).SetUint16(0, uint16(v))
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}
func (p Agent_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(1, nil)}
}
func (p Agent_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(2, nil)}
}
func (p Agent_Future) Provider() provider.Provider_Future {
	return provider.Provider_Future{Future: p.Future.Field(4, nil)}
}

type Agent_Status uint16

// Agent_Status_TypeID is the unique identifier for the type Agent_Status.
const Agent_Status_TypeID = 0xb08cef90775e4be3

// Values of Agent_Status.
const (
	Agent_Status_idle    Agent_Status = 0
	Agent_Status_ready   Agent_Status = 1
	Agent_Status_waiting Agent_Status = 2
	Agent_Status_pending Agent_Status = 3
	Agent_Status_working Agent_Status = 4
	Agent_Status_errored Agent_Status = 5
	Agent_Status_failed  Agent_Status = 6
)

// String returns the enum's constant name.
func (c Agent_Status) String() string {
	switch c {
	case Agent_Status_idle:
		return "idle"
	case Agent_Status_ready:
		return "ready"
	case Agent_Status_waiting:
		return "waiting"
	case Agent_Status_pending:
		return "pending"
	case Agent_Status_working:
		return "working"
	case Agent_Status_errored:
		return "errored"
	case Agent_Status_failed:
		return "failed"

	default:
		return ""
	}
}

// Agent_StatusFromString returns the enum value with a name,
// or the zero value if there's no such value.
func Agent_StatusFromString(c string) Agent_Status {
	switch c {
	case "idle":
		return Agent_Status_idle
	case "ready":
		return Agent_Status_ready
	case "waiting":
		return Agent_Status_waiting
	case "pending":
		return Agent_Status_pending
	case "working":
		return Agent_Status_working
	case "errored":
		return Agent_Status_errored
	case "failed":
		return Agent_Status_failed

	default:
		return 0
	}
}

type Agent_Status_List = capnp.EnumList[Agent_Status]

func NewAgent_Status_List(s *capnp.Segment, sz int32) (Agent_Status_List, error) {
	return capnp.NewEnumList[Agent_Status](s, sz)
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0x9b1c2beb128e44da

func (c RPC) Send(ctx context.Context, params func(RPC_send_Params) error) (RPC_send_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_send_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_send_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Send(context.Context, RPC_send) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9b1c2beb128e44da,
			MethodID:      0,
			InterfaceName: "pkg/ai/agent/agent.capnp:RPC",
			MethodName:    "send",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Send(ctx, RPC_send{call})
		},
	})

	return methods
}

// RPC_send holds the state for a server call to RPC.send.
// See server.Call for documentation.
type RPC_send struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_send) Args() RPC_send_Params {
	return RPC_send_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_send) AllocResults() (RPC_send_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_send_Params capnp.Struct

// RPC_send_Params_TypeID is the unique identifier for the type RPC_send_Params.
const RPC_send_Params_TypeID = 0xa53e5c96ae3372c1

func NewRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func NewRootRPC_send_Params(s *capnp.Segment) (RPC_send_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Params(st), err
}

func ReadRootRPC_send_Params(msg *capnp.Message) (RPC_send_Params, error) {
	root, err := msg.Root()
	return RPC_send_Params(root.Struct()), err
}

func (s RPC_send_Params) String() string {
	str, _ := text.Marshal(0xa53e5c96ae3372c1, capnp.Struct(s))
	return str
}

func (s RPC_send_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Params) DecodeFromPtr(p capnp.Ptr) RPC_send_Params {
	return RPC_send_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Params) Message_() (message.Message, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return message.Message(p.Struct()), err
}

func (s RPC_send_Params) HasMessage_() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Params) SetMessage_(v message.Message) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewMessage_ sets the message_ field to a newly
// allocated message.Message struct, preferring placement in s's segment.
func (s RPC_send_Params) NewMessage_() (message.Message, error) {
	ss, err := message.NewMessage(capnp.Struct(s).Segment())
	if err != nil {
		return message.Message{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Params_List is a list of RPC_send_Params.
type RPC_send_Params_List = capnp.StructList[RPC_send_Params]

// NewRPC_send_Params creates a new list of RPC_send_Params.
func NewRPC_send_Params_List(s *capnp.Segment, sz int32) (RPC_send_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Params](l), err
}

// RPC_send_Params_Future is a wrapper for a RPC_send_Params promised by a client call.
type RPC_send_Params_Future struct{ *capnp.Future }

func (f RPC_send_Params_Future) Struct() (RPC_send_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Params(p.Struct()), err
}
func (p RPC_send_Params_Future) Message_() message.Message_Future {
	return message.Message_Future{Future: p.Future.Field(0, nil)}
}

type RPC_send_Results capnp.Struct

// RPC_send_Results_TypeID is the unique identifier for the type RPC_send_Results.
const RPC_send_Results_TypeID = 0xd089d781c905d931

func NewRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func NewRootRPC_send_Results(s *capnp.Segment) (RPC_send_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_send_Results(st), err
}

func ReadRootRPC_send_Results(msg *capnp.Message) (RPC_send_Results, error) {
	root, err := msg.Root()
	return RPC_send_Results(root.Struct()), err
}

func (s RPC_send_Results) String() string {
	str, _ := text.Marshal(0xd089d781c905d931, capnp.Struct(s))
	return str
}

func (s RPC_send_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_send_Results) DecodeFromPtr(p capnp.Ptr) RPC_send_Results {
	return RPC_send_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_send_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_send_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_send_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_send_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_send_Results) Out() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_send_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_send_Results) SetOut(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOut sets the out field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_send_Results) NewOut() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_send_Results_List is a list of RPC_send_Results.
type RPC_send_Results_List = capnp.StructList[RPC_send_Results]

// NewRPC_send_Results creates a new list of RPC_send_Results.
func NewRPC_send_Results_List(s *capnp.Segment, sz int32) (RPC_send_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_send_Results](l), err
}

// RPC_send_Results_Future is a wrapper for a RPC_send_Results promised by a client call.
type RPC_send_Results_Future struct{ *capnp.Future }

func (f RPC_send_Results_Future) Struct() (RPC_send_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_send_Results(p.Struct()), err
}
func (p RPC_send_Results_Future) Out() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

const schema_d4c9c9f76e88a0d0 = "x\xda\x8cR]h\x1cU\x18=\xe7\xde\x99\xdd\x16\x93" +
	"\xee\xde\xce\x8a\x06\x12\x03\xc5>\xd8\xd0\xc4$\x08aA" +
	"7\xd6\x16k\xa3\xb87\x15\x14\xff`\xe8\xdc\xa6C7" +
	"3\xcb\xcc\xac1 \x04\x05\xc1\xd6\xbf\xbe(\x16E*" +
	"\xb4ZA\xa3}WH\x91\x82\x01\x1f*(R\xc1\x07" +
	"\x91\xbe\xe8C\xa9/\x01\xa1\x8c\xdcI\xba\xbb(J_" +
	"\xe6\x9b\xef\xde\xef\x9es\xee9\xf7\xde]b\xd6\x99\x1c" +
	"\xdc\xd8\x06\xa1\x8f\xb9\xa5\xfc\xd5\xb1\xc7g^_\xbb\xf1" +
	"6\xf4\x10\x99_>\xf3Z\xb4\xb1\xbe\xfe\x03\\\xb7\x0c" +
	"x\xbe\xf3\x97\xb7\xe8\xdc\x01Lw\x9c'\x09\xe6?\xef" +
	"\x7fk\xe7\x1fc\xc3\xefC\x0d\xc9\xde0\xe8]q\x7f" +
	"\xf7\xae\x16g~u\x1f\xf6\xb6\x97\xca@~1\x99^" +
	"}\xf7\xd9\x07\xceA\x8d\x10pY\x06\xa6\xaf\xbb\x87\x08" +
	"z7\xdc\x06\x98_\x1c\xfc\x84\xa7\xfe|\xe7<\xd4P" +
	"?\xb5\xb4\x83#\xa5\x9d\xf4\xf6Z\x1c\xef\x9e\xd2\x17`" +
	"\xfe\xdb\xdc\xf3K\xa7\xae\xbd\xf1%\xd4\xa8\xe8\xa9\x06\xa7" +
	"/\x95\xa6\xe8\xfdXL~_LN^q\xd7_\xfe" +
	"\xe9\xc4\xe5~\xde\xdd\xe5y\xcb;Yn\xe0\x97\xbc}" +
	"|a\xc2\x0f'|\xb1`\xa2l\xc2\xb7\xdf\xf1#~" +
	";j7\xea\x0f\xdaF;\xec\xe7c\xbdq8\xf3\xb3" +
	"N\xaa\xef\x94\x0e\xe0\x10P\xa7\x0f\x01\xfa=I}V" +
	"P\x915\xda\xc5\x8f\xea\x80\xfe@R\x9f\x17TB\xd4" +
	"(\x00un\x1f\xa0\xcfH\xea\xcf\x04\x95\x945J@" +
	"}:\x05\xe8\xb3\x92zMP9N\x8d\x0e\xa0\xbe\xb6" +
	"\x98_I\xeao\x05\xe9\xd6\xe8\x02\xea\x92\x85\\\x93\xd4" +
	"\xdf\x09\xe6a`\xa2,\xcc\x96\x01\xb0\xdas\x0fd\x15" +
	"l\xb4\xfd\xc4_LY\xcd\xef:yz\xe6\xe0\xc9g" +
	"\xbe\xd9\xdaX9\x12G\x99y1c5\x1f\xfa|\xe6" +
	"\xb9\xe1\xd5\x8f\xdf\xdc\xda\x19\xcd\xe2\xb8\x95r\x07\xd8\x94" +
	"\xe4\x00\x84\xfd\xcd\xdbI\xfcB\x18\x98d\x93\xe5\xc4m" +
	"s\xd7&J\xb7_\xb8\xc9\x92\x16N\xb0\xd2\xf3\x07d" +
	"\xc5\x1e\xfb/S+\xf5\xf9\xe6CMR;\xd2\xed{" +
	"\x15\xbc\x19\x93R{ \x94[\xae\xa4&\x0af\xd9d" +
	"\x0f\xcb\xf9'\x96\x85\x1a\xb7sw7\x8b\xdb\x02\xda\xe9" +
	"f2h\x9d\xde&\xa9k\x82+\x8b&M\xfd\x05\xc3" +
	"j\xfe\xe1\xdc\xf5c/\x8d\xcc\xbe\xb2u\x83.\xb8\xfc" +
	"\x17\xf8#\x9b\xfer\xd9\xaa\x1d\xe8\xe2\x1ex\x1a\xd0\xfb" +
	"%u\xb3/\xeb\xc7\xf6\x00\xfa\xa0\xa4~\xa2/km" +
	"\x17\x1f\x95\xd4Ou\xd3:\x1aB\x9a\xa40w\x00\xac" +
	"D\xfe\xa2\xe96I\xdc\xea6\xff#\xabx\x93\xe3\x87" +
	"G\x0b\xe7\xad\xb4\xe1\x82\xcc* \xd5\x81)\x80B\xdd" +
	"\xbf\x0f\xa0T\xf7\xd9\xe2\xa8\xbd\xb6\xb8j\xb7-%5" +
	"R\x07*a\xd02\xa3\x89\xf1\x83\xe5\x95%?\xcc\xc2" +
	"ha\xa5m\xa2\xc0\xd6\xa589n\xabI\x9281" +
	"A\xe3\xa8\x1f\xb6Lp+)\xcc\x9b\xb4\xd3\xca\x98\xf6" +
	"\xa7\xb0\xab\x97B9\xeed\xacn\\\xed\xac\xee\x18\xdb" +
	"~a\xd3\xff\xbf\x03\x00\x00\xff\xffk\xcd0\xcd"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0x9b1c2beb128e44da,
			0xa53e5c96ae3372c1,
			0xa895f29001a70dc1,
			0xb08cef90775e4be3,
			0xd089d781c905d931,
		},
		Compressed: true,
	})
}
