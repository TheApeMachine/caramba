// Code generated by capnpc-go. DO NOT EDIT.

package ai

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	tools "github.com/theapemachine/caramba/pkg/tools"
)

type Agent capnp.Struct

// Agent_TypeID is the unique identifier for the type Agent.
const Agent_TypeID = 0x8ffdc08b384f2b85

func NewAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Agent(st), err
}

func NewRootAgent(s *capnp.Segment) (Agent, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Agent(st), err
}

func ReadRootAgent(msg *capnp.Message) (Agent, error) {
	root, err := msg.Root()
	return Agent(root.Struct()), err
}

func (s Agent) String() string {
	str, _ := text.Marshal(0x8ffdc08b384f2b85, capnp.Struct(s))
	return str
}

func (s Agent) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Agent) DecodeFromPtr(p capnp.Ptr) Agent {
	return Agent(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Agent) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Agent) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Agent) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Agent) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Agent) Identity() (Identity, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Identity(p.Struct()), err
}

func (s Agent) HasIdentity() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Agent) SetIdentity(v Identity) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewIdentity sets the identity field to a newly
// allocated Identity struct, preferring placement in s's segment.
func (s Agent) NewIdentity() (Identity, error) {
	ss, err := NewIdentity(capnp.Struct(s).Segment())
	if err != nil {
		return Identity{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Agent) Tools() (tools.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return tools.Tool_List(p.List()), err
}

func (s Agent) HasTools() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Agent) SetTools(v tools.Tool_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tools.Tool_List, preferring placement in s's segment.
func (s Agent) NewTools(n int32) (tools.Tool_List, error) {
	l, err := tools.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tools.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Agent_List is a list of Agent.
type Agent_List = capnp.StructList[Agent]

// NewAgent creates a new list of Agent.
func NewAgent_List(s *capnp.Segment, sz int32) (Agent_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Agent](l), err
}

// Agent_Future is a wrapper for a Agent promised by a client call.
type Agent_Future struct{ *capnp.Future }

func (f Agent_Future) Struct() (Agent, error) {
	p, err := f.Future.Ptr()
	return Agent(p.Struct()), err
}
func (p Agent_Future) Identity() Identity_Future {
	return Identity_Future{Future: p.Future.Field(0, nil)}
}

type Identity capnp.Struct

// Identity_TypeID is the unique identifier for the type Identity.
const Identity_TypeID = 0xa895f29001a70dc1

func NewIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func NewRootIdentity(s *capnp.Segment) (Identity, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Identity(st), err
}

func ReadRootIdentity(msg *capnp.Message) (Identity, error) {
	root, err := msg.Root()
	return Identity(root.Struct()), err
}

func (s Identity) String() string {
	str, _ := text.Marshal(0xa895f29001a70dc1, capnp.Struct(s))
	return str
}

func (s Identity) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Identity) DecodeFromPtr(p capnp.Ptr) Identity {
	return Identity(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Identity) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Identity) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Identity) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Identity) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Identity) Identifier() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Identity) HasIdentifier() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Identity) IdentifierBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Identity) SetIdentifier(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Identity) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Identity) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Identity) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Identity) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Identity) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Identity) HasRole() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Identity) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Identity) SetRole(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// Identity_List is a list of Identity.
type Identity_List = capnp.StructList[Identity]

// NewIdentity creates a new list of Identity.
func NewIdentity_List(s *capnp.Segment, sz int32) (Identity_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Identity](l), err
}

// Identity_Future is a wrapper for a Identity promised by a client call.
type Identity_Future struct{ *capnp.Future }

func (f Identity_Future) Struct() (Identity, error) {
	p, err := f.Future.Ptr()
	return Identity(p.Struct()), err
}

const schema_d4c9c9f76e88a0d0 = "x\xdal\x8e\xbfJ3Q\x14\xc4g\xeeM\xbe|E" +
	"\x12w\xd9\xb4b\xeb\x9f`\x88X\x88\x95\x82\x81(\x06" +
	"s\xd0B\xac\\\xcc\x1a\x16\xe3f\x89\x0b\x92\x07\x10\x04" +
	"\x0bml\xac\xec\xb4\xb3\xf1\x01\xb4\x92\x08\xa2\x85\x16\x82" +
	"\x95\x8f`\xa3\x08\xb2r-V\x11\xbb\x999s\x86\x9f" +
	"\xf54\x95*\xe7n5\x94\x14\xd3\xff\xe2\x9d\x91\x85\x89" +
	"\xbd\x8b\x8f}\xd8\x0e\xe3\xbb\xe3\xdd\xe0\xb5\xd7\xbbGZ" +
	"e\x00\xe7\x86\xd7\xce#\x8dz\xe06\x18_\xe6Nx" +
	"\xf0rx\xfa\xab\xabM\xa3\xa2\x9e\x1d\xf9\xfa\xaa\xa93" +
	"4\xe2p\xa3Yr\xfd\x92\xab\x9a^\x10\x8d\xae\xb9a" +
	"\x10NN\x1b\x0d\xd4I\xf9\xafS@\x8a\x80=4\x07" +
	"\xc8\xa0\xa6\x8c+\xdad\x81&,\x8f\x01R\xd4\x94\xaa" +
	"b\xec7\xbc \xf2\xa3.\x00Z\xdf\x10 -p " +
	"j\xb7[[\xcc\x83uMZ\xf1\xea\xf9\xd5Q\xff\xe2" +
	"\xdb\xbb9\xe7\xc1?9f\xcd`\xc6\x8f\xba\x86$\x9b" +
	"\x90TV\x00\x99\xd1\x94\xfa\x0f\x92\xda0 UMY" +
	"R\xb4\x95*P\x01\xb6\x98p^S\x96\x13\xbcu\x1f" +
	"\xda\xeb0\x0b\xc5,\xd8\x17\xb8\x9b^b:\xedVb" +
	">\x03\x00\x00\xff\xffV\x98]4"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d0,
		Nodes: []uint64{
			0x8ffdc08b384f2b85,
			0xa895f29001a70dc1,
		},
		Compressed: true,
	})
}
