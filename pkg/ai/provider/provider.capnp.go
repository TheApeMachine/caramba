// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	datura "github.com/theapemachine/caramba/pkg/datura"
)

type Provider capnp.Struct

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xb115062fef4b0b89

func NewProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func NewRootProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func ReadRootProvider(msg *capnp.Message) (Provider, error) {
	root, err := msg.Root()
	return Provider(root.Struct()), err
}

func (s Provider) String() string {
	str, _ := text.Marshal(0xb115062fef4b0b89, capnp.Struct(s))
	return str
}

func (s Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_List is a list of Provider.
type Provider_List = capnp.StructList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider](l), err
}

// Provider_Future is a wrapper for a Provider promised by a client call.
type Provider_Future struct{ *capnp.Future }

func (f Provider_Future) Struct() (Provider, error) {
	p, err := f.Future.Ptr()
	return Provider(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0xc5bc642f2dd0f9cb

func (c RPC) Generate(ctx context.Context, params func(RPC_generate_Params) error) (RPC_generate_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xc5bc642f2dd0f9cb,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:RPC",
			MethodName:    "generate",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_generate_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_generate_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Generate(context.Context, RPC_generate) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xc5bc642f2dd0f9cb,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:RPC",
			MethodName:    "generate",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Generate(ctx, RPC_generate{call})
		},
	})

	return methods
}

// RPC_generate holds the state for a server call to RPC.generate.
// See server.Call for documentation.
type RPC_generate struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_generate) Args() RPC_generate_Params {
	return RPC_generate_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_generate) AllocResults() (RPC_generate_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_generate_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_generate_Params capnp.Struct

// RPC_generate_Params_TypeID is the unique identifier for the type RPC_generate_Params.
const RPC_generate_Params_TypeID = 0xe08f292ca43e53ad

func NewRPC_generate_Params(s *capnp.Segment) (RPC_generate_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_generate_Params(st), err
}

func NewRootRPC_generate_Params(s *capnp.Segment) (RPC_generate_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_generate_Params(st), err
}

func ReadRootRPC_generate_Params(msg *capnp.Message) (RPC_generate_Params, error) {
	root, err := msg.Root()
	return RPC_generate_Params(root.Struct()), err
}

func (s RPC_generate_Params) String() string {
	str, _ := text.Marshal(0xe08f292ca43e53ad, capnp.Struct(s))
	return str
}

func (s RPC_generate_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_generate_Params) DecodeFromPtr(p capnp.Ptr) RPC_generate_Params {
	return RPC_generate_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_generate_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_generate_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_generate_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_generate_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_generate_Params) Artifact() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_generate_Params) HasArtifact() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_generate_Params) SetArtifact(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewArtifact sets the artifact field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_generate_Params) NewArtifact() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_generate_Params_List is a list of RPC_generate_Params.
type RPC_generate_Params_List = capnp.StructList[RPC_generate_Params]

// NewRPC_generate_Params creates a new list of RPC_generate_Params.
func NewRPC_generate_Params_List(s *capnp.Segment, sz int32) (RPC_generate_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_generate_Params](l), err
}

// RPC_generate_Params_Future is a wrapper for a RPC_generate_Params promised by a client call.
type RPC_generate_Params_Future struct{ *capnp.Future }

func (f RPC_generate_Params_Future) Struct() (RPC_generate_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_generate_Params(p.Struct()), err
}
func (p RPC_generate_Params_Future) Artifact() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

type RPC_generate_Results capnp.Struct

// RPC_generate_Results_TypeID is the unique identifier for the type RPC_generate_Results.
const RPC_generate_Results_TypeID = 0xe0a6c8f21681b1f9

func NewRPC_generate_Results(s *capnp.Segment) (RPC_generate_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_generate_Results(st), err
}

func NewRootRPC_generate_Results(s *capnp.Segment) (RPC_generate_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_generate_Results(st), err
}

func ReadRootRPC_generate_Results(msg *capnp.Message) (RPC_generate_Results, error) {
	root, err := msg.Root()
	return RPC_generate_Results(root.Struct()), err
}

func (s RPC_generate_Results) String() string {
	str, _ := text.Marshal(0xe0a6c8f21681b1f9, capnp.Struct(s))
	return str
}

func (s RPC_generate_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_generate_Results) DecodeFromPtr(p capnp.Ptr) RPC_generate_Results {
	return RPC_generate_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_generate_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_generate_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_generate_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_generate_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_generate_Results) Out() (datura.Artifact, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return datura.Artifact(p.Struct()), err
}

func (s RPC_generate_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_generate_Results) SetOut(v datura.Artifact) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewOut sets the out field to a newly
// allocated datura.Artifact struct, preferring placement in s's segment.
func (s RPC_generate_Results) NewOut() (datura.Artifact, error) {
	ss, err := datura.NewArtifact(capnp.Struct(s).Segment())
	if err != nil {
		return datura.Artifact{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_generate_Results_List is a list of RPC_generate_Results.
type RPC_generate_Results_List = capnp.StructList[RPC_generate_Results]

// NewRPC_generate_Results creates a new list of RPC_generate_Results.
func NewRPC_generate_Results_List(s *capnp.Segment, sz int32) (RPC_generate_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_generate_Results](l), err
}

// RPC_generate_Results_Future is a wrapper for a RPC_generate_Results promised by a client call.
type RPC_generate_Results_Future struct{ *capnp.Future }

func (f RPC_generate_Results_Future) Struct() (RPC_generate_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_generate_Results(p.Struct()), err
}
func (p RPC_generate_Results_Future) Out() datura.Artifact_Future {
	return datura.Artifact_Future{Future: p.Future.Field(0, nil)}
}

const schema_d4c9c9f76e88a0d2 = "x\xda\x94\x90\xbdO\xf2P\x1c\x85\xcf\xef\xb6\xa5/y" +
	"Ai\xaa\xc6\xb8\x90\xf81\xf8EC\xd0\xc5A\x88\x0c" +
	"&\xb8\xb48;\xdc@%D)\xb5\x14W\xc3&\x93" +
	"\xbb\x931\xea\xa6\x09\x83\x9b\xab\x89\xc4\xc5\x18\xff\x00\x17" +
	"Gc\xe2B\x98j@\x100ap;7y\xees" +
	"\xce\xbd\xa1\xf7\x84\x18\x0d\x1e\x89`\xc6\x8a\xe4\xf3\xaa\xff" +
	"\xb7>4\xdfx\x0dJ\x98\xbc\xe7\xb3c\xabQ\xaf\xbf" +
	"@\"\x19\x88\xcd\xb1\x0dRW\x99\x0c\xa8Q\x16\x07y" +
	"\x8f\xcd\xa7e-{w\x0f%,\xf4`P\xcc`S" +
	"\xa4\xf26\xb9\xc36\xd5j+y\xd7\xdb\xeb\x17K\xf3" +
	"'\xafPf\x08\x1d\xe5\x01;%\x90Zi\xeb\x9a\xb5" +
	"\xca\xc4\xe7\xc3\xd5\x00p\xc9\xce[\xc0-\x8b#\xeb\xd9" +
	"{9\x8d\xe75[t\x8a\x87\xf9\xac\xe9hv'D" +
	"2\xdc\xb6\xec5\xbds\x84Nd\x88\x82\x08\x88\x04(" +
	"\xc1\x05\xc0\xf8'\x901\xc6h\xd4\xe2\x05\x93\x02`\x14" +
	"\x00\xfd\x08\x85!\xc2\xb4\xa0'\xbf]R\xdf\x03\xa8;" +
	"TQR`\x8a_\xf6r\xa6e:\xdc5\x01$H" +
	"\xa7\x9eX\x1a&\xd6\x93\x91\xee\xa5Y\x9d;\\(\x94" +
	"\xfa\x17\xa7\x00# \x901\xc9\xc8\xe3\x8e\x9b\xdf\xe5\x19" +
	"\x17\x00\x85\x1ao\xe5\x9b\x91E\x7f\x0dD!\xfc\xb1'" +
	"m\x96\xca\xf2\xbe;P4\xdd\xfb\x1a\xb9Xv\x7f\x17" +
	"|\x05\x00\x00\xff\xff\xb4I\x99\xb2"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d2,
		Nodes: []uint64{
			0xb115062fef4b0b89,
			0xc5bc642f2dd0f9cb,
			0xe08f292ca43e53ad,
			0xe0a6c8f21681b1f9,
		},
		Compressed: true,
	})
}
