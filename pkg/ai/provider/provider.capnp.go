// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	stream "capnproto.org/go/capnp/v3/std/capnp/stream"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	tool "github.com/theapemachine/caramba/pkg/ai/tool"
)

type Provider capnp.Struct

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xb115062fef4b0b89

func NewProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func NewRootProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func ReadRootProvider(msg *capnp.Message) (Provider, error) {
	root, err := msg.Root()
	return Provider(root.Struct()), err
}

func (s Provider) String() string {
	str, _ := text.Marshal(0xb115062fef4b0b89, capnp.Struct(s))
	return str
}

func (s Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_List is a list of Provider.
type Provider_List = capnp.StructList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider](l), err
}

// Provider_Future is a wrapper for a Provider promised by a client call.
type Provider_Future struct{ *capnp.Future }

func (f Provider_Future) Struct() (Provider, error) {
	p, err := f.Future.Ptr()
	return Provider(p.Struct()), err
}

type Generate capnp.Client

// Generate_TypeID is the unique identifier for the type Generate.
const Generate_TypeID = 0xbc1e9719e5979ce2

func (c Generate) Call(ctx context.Context, params func(Generate_call_Params) error) (Generate_call_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Generate_call_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Generate_call_Results_Future{Future: ans.Future()}, release

}

func (c Generate) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Generate) String() string {
	return "Generate(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Generate) AddRef() Generate {
	return Generate(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Generate) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Generate) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Generate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Generate) DecodeFromPtr(p capnp.Ptr) Generate {
	return Generate(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Generate) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Generate) IsSame(other Generate) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Generate) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Generate) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Generate_Server is a Generate with a local implementation.
type Generate_Server interface {
	Call(context.Context, Generate_call) error
}

// Generate_NewServer creates a new Server from an implementation of Generate_Server.
func Generate_NewServer(s Generate_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Generate_Methods(nil, s), s, c)
}

// Generate_ServerToClient creates a new Client from an implementation of Generate_Server.
// The caller is responsible for calling Release on the returned Client.
func Generate_ServerToClient(s Generate_Server) Generate {
	return Generate(capnp.NewClient(Generate_NewServer(s)))
}

// Generate_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Generate_Methods(methods []server.Method, s Generate_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Generate_call{call})
		},
	})

	return methods
}

// Generate_call holds the state for a server call to Generate.call.
// See server.Call for documentation.
type Generate_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Generate_call) Args() Generate_call_Params {
	return Generate_call_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Generate_call) AllocResults() (Generate_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(r), err
}

// Generate_List is a list of Generate.
type Generate_List = capnp.CapList[Generate]

// NewGenerate_List creates a new list of Generate.
func NewGenerate_List(s *capnp.Segment, sz int32) (Generate_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Generate](l), err
}

type Generate_call_Params capnp.Struct

// Generate_call_Params_TypeID is the unique identifier for the type Generate_call_Params.
const Generate_call_Params_TypeID = 0x8d7da7a151f963b9

func NewGenerate_call_Params(s *capnp.Segment) (Generate_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_call_Params(st), err
}

func NewRootGenerate_call_Params(s *capnp.Segment) (Generate_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_call_Params(st), err
}

func ReadRootGenerate_call_Params(msg *capnp.Message) (Generate_call_Params, error) {
	root, err := msg.Root()
	return Generate_call_Params(root.Struct()), err
}

func (s Generate_call_Params) String() string {
	str, _ := text.Marshal(0x8d7da7a151f963b9, capnp.Struct(s))
	return str
}

func (s Generate_call_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_call_Params) DecodeFromPtr(p capnp.Ptr) Generate_call_Params {
	return Generate_call_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_call_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_call_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_call_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_call_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_call_Params) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return params.Params(p.Struct()), err
}

func (s Generate_call_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_call_Params) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Generate_call_Params) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_call_Params) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return context2.Context(p.Struct()), err
}

func (s Generate_call_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Generate_call_Params) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Generate_call_Params) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_call_Params) Tools() (tool.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return tool.Tool_List(p.List()), err
}

func (s Generate_call_Params) HasTools() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Generate_call_Params) SetTools(v tool.Tool_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tool.Tool_List, preferring placement in s's segment.
func (s Generate_call_Params) NewTools(n int32) (tool.Tool_List, error) {
	l, err := tool.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tool.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Generate_call_Params_List is a list of Generate_call_Params.
type Generate_call_Params_List = capnp.StructList[Generate_call_Params]

// NewGenerate_call_Params creates a new list of Generate_call_Params.
func NewGenerate_call_Params_List(s *capnp.Segment, sz int32) (Generate_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Generate_call_Params](l), err
}

// Generate_call_Params_Future is a wrapper for a Generate_call_Params promised by a client call.
type Generate_call_Params_Future struct{ *capnp.Future }

func (f Generate_call_Params_Future) Struct() (Generate_call_Params, error) {
	p, err := f.Future.Ptr()
	return Generate_call_Params(p.Struct()), err
}
func (p Generate_call_Params_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(0, nil)}
}
func (p Generate_call_Params_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(1, nil)}
}

type Generate_call_Results capnp.Struct

// Generate_call_Results_TypeID is the unique identifier for the type Generate_call_Results.
const Generate_call_Results_TypeID = 0xfeaa7ae3fc604a1e

func NewGenerate_call_Results(s *capnp.Segment) (Generate_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(st), err
}

func NewRootGenerate_call_Results(s *capnp.Segment) (Generate_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(st), err
}

func ReadRootGenerate_call_Results(msg *capnp.Message) (Generate_call_Results, error) {
	root, err := msg.Root()
	return Generate_call_Results(root.Struct()), err
}

func (s Generate_call_Results) String() string {
	str, _ := text.Marshal(0xfeaa7ae3fc604a1e, capnp.Struct(s))
	return str
}

func (s Generate_call_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_call_Results) DecodeFromPtr(p capnp.Ptr) Generate_call_Results {
	return Generate_call_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_call_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_call_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_call_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_call_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_call_Results) Out() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Generate_call_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_call_Results) OutBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Generate_call_Results) SetOut(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Generate_call_Results_List is a list of Generate_call_Results.
type Generate_call_Results_List = capnp.StructList[Generate_call_Results]

// NewGenerate_call_Results creates a new list of Generate_call_Results.
func NewGenerate_call_Results_List(s *capnp.Segment, sz int32) (Generate_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Generate_call_Results](l), err
}

// Generate_call_Results_Future is a wrapper for a Generate_call_Results promised by a client call.
type Generate_call_Results_Future struct{ *capnp.Future }

func (f Generate_call_Results_Future) Struct() (Generate_call_Results, error) {
	p, err := f.Future.Ptr()
	return Generate_call_Results(p.Struct()), err
}

type ByteStream capnp.Client

// ByteStream_TypeID is the unique identifier for the type ByteStream.
const ByteStream_TypeID = 0x83b1043674507938

func (c ByteStream) Write(ctx context.Context, params func(ByteStream_write_Params) error) error {
	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x83b1043674507938,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:ByteStream",
			MethodName:    "write",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_write_Params(s)) }
	}

	return capnp.Client(c).SendStreamCall(ctx, s)

}

func (c ByteStream) Done(ctx context.Context, params func(ByteStream_done_Params) error) (ByteStream_done_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x83b1043674507938,
			MethodID:      1,
			InterfaceName: "pkg/ai/provider/provider.capnp:ByteStream",
			MethodName:    "done",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		s.PlaceArgs = func(s capnp.Struct) error { return params(ByteStream_done_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return ByteStream_done_Results_Future{Future: ans.Future()}, release

}

func (c ByteStream) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c ByteStream) String() string {
	return "ByteStream(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c ByteStream) AddRef() ByteStream {
	return ByteStream(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c ByteStream) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c ByteStream) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c ByteStream) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (ByteStream) DecodeFromPtr(p capnp.Ptr) ByteStream {
	return ByteStream(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c ByteStream) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c ByteStream) IsSame(other ByteStream) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c ByteStream) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c ByteStream) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A ByteStream_Server is a ByteStream with a local implementation.
type ByteStream_Server interface {
	Write(context.Context, ByteStream_write) error

	Done(context.Context, ByteStream_done) error
}

// ByteStream_NewServer creates a new Server from an implementation of ByteStream_Server.
func ByteStream_NewServer(s ByteStream_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(ByteStream_Methods(nil, s), s, c)
}

// ByteStream_ServerToClient creates a new Client from an implementation of ByteStream_Server.
// The caller is responsible for calling Release on the returned Client.
func ByteStream_ServerToClient(s ByteStream_Server) ByteStream {
	return ByteStream(capnp.NewClient(ByteStream_NewServer(s)))
}

// ByteStream_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func ByteStream_Methods(methods []server.Method, s ByteStream_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83b1043674507938,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:ByteStream",
			MethodName:    "write",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Write(ctx, ByteStream_write{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x83b1043674507938,
			MethodID:      1,
			InterfaceName: "pkg/ai/provider/provider.capnp:ByteStream",
			MethodName:    "done",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Done(ctx, ByteStream_done{call})
		},
	})

	return methods
}

// ByteStream_write holds the state for a server call to ByteStream.write.
// See server.Call for documentation.
type ByteStream_write struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_write) Args() ByteStream_write_Params {
	return ByteStream_write_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_write) AllocResults() (stream.StreamResult, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return stream.StreamResult(r), err
}

// ByteStream_done holds the state for a server call to ByteStream.done.
// See server.Call for documentation.
type ByteStream_done struct {
	*server.Call
}

// Args returns the call's arguments.
func (c ByteStream_done) Args() ByteStream_done_Params {
	return ByteStream_done_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c ByteStream_done) AllocResults() (ByteStream_done_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(r), err
}

// ByteStream_List is a list of ByteStream.
type ByteStream_List = capnp.CapList[ByteStream]

// NewByteStream_List creates a new list of ByteStream.
func NewByteStream_List(s *capnp.Segment, sz int32) (ByteStream_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[ByteStream](l), err
}

type ByteStream_write_Params capnp.Struct

// ByteStream_write_Params_TypeID is the unique identifier for the type ByteStream_write_Params.
const ByteStream_write_Params_TypeID = 0xebe3db889e40a9ab

func NewByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func NewRootByteStream_write_Params(s *capnp.Segment) (ByteStream_write_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ByteStream_write_Params(st), err
}

func ReadRootByteStream_write_Params(msg *capnp.Message) (ByteStream_write_Params, error) {
	root, err := msg.Root()
	return ByteStream_write_Params(root.Struct()), err
}

func (s ByteStream_write_Params) String() string {
	str, _ := text.Marshal(0xebe3db889e40a9ab, capnp.Struct(s))
	return str
}

func (s ByteStream_write_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_write_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_write_Params {
	return ByteStream_write_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_write_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_write_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_write_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_write_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ByteStream_write_Params) Data() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return []byte(p.Data()), err
}

func (s ByteStream_write_Params) HasData() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ByteStream_write_Params) SetData(v []byte) error {
	return capnp.Struct(s).SetData(0, v)
}

// ByteStream_write_Params_List is a list of ByteStream_write_Params.
type ByteStream_write_Params_List = capnp.StructList[ByteStream_write_Params]

// NewByteStream_write_Params creates a new list of ByteStream_write_Params.
func NewByteStream_write_Params_List(s *capnp.Segment, sz int32) (ByteStream_write_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[ByteStream_write_Params](l), err
}

// ByteStream_write_Params_Future is a wrapper for a ByteStream_write_Params promised by a client call.
type ByteStream_write_Params_Future struct{ *capnp.Future }

func (f ByteStream_write_Params_Future) Struct() (ByteStream_write_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_write_Params(p.Struct()), err
}

type ByteStream_done_Params capnp.Struct

// ByteStream_done_Params_TypeID is the unique identifier for the type ByteStream_done_Params.
const ByteStream_done_Params_TypeID = 0xbd009879705bd55e

func NewByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func NewRootByteStream_done_Params(s *capnp.Segment) (ByteStream_done_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Params(st), err
}

func ReadRootByteStream_done_Params(msg *capnp.Message) (ByteStream_done_Params, error) {
	root, err := msg.Root()
	return ByteStream_done_Params(root.Struct()), err
}

func (s ByteStream_done_Params) String() string {
	str, _ := text.Marshal(0xbd009879705bd55e, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Params) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Params {
	return ByteStream_done_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Params_List is a list of ByteStream_done_Params.
type ByteStream_done_Params_List = capnp.StructList[ByteStream_done_Params]

// NewByteStream_done_Params creates a new list of ByteStream_done_Params.
func NewByteStream_done_Params_List(s *capnp.Segment, sz int32) (ByteStream_done_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Params](l), err
}

// ByteStream_done_Params_Future is a wrapper for a ByteStream_done_Params promised by a client call.
type ByteStream_done_Params_Future struct{ *capnp.Future }

func (f ByteStream_done_Params_Future) Struct() (ByteStream_done_Params, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Params(p.Struct()), err
}

type ByteStream_done_Results capnp.Struct

// ByteStream_done_Results_TypeID is the unique identifier for the type ByteStream_done_Results.
const ByteStream_done_Results_TypeID = 0xda6a129a69d84593

func NewByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func NewRootByteStream_done_Results(s *capnp.Segment) (ByteStream_done_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return ByteStream_done_Results(st), err
}

func ReadRootByteStream_done_Results(msg *capnp.Message) (ByteStream_done_Results, error) {
	root, err := msg.Root()
	return ByteStream_done_Results(root.Struct()), err
}

func (s ByteStream_done_Results) String() string {
	str, _ := text.Marshal(0xda6a129a69d84593, capnp.Struct(s))
	return str
}

func (s ByteStream_done_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ByteStream_done_Results) DecodeFromPtr(p capnp.Ptr) ByteStream_done_Results {
	return ByteStream_done_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ByteStream_done_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ByteStream_done_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ByteStream_done_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ByteStream_done_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// ByteStream_done_Results_List is a list of ByteStream_done_Results.
type ByteStream_done_Results_List = capnp.StructList[ByteStream_done_Results]

// NewByteStream_done_Results creates a new list of ByteStream_done_Results.
func NewByteStream_done_Results_List(s *capnp.Segment, sz int32) (ByteStream_done_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[ByteStream_done_Results](l), err
}

// ByteStream_done_Results_Future is a wrapper for a ByteStream_done_Results promised by a client call.
type ByteStream_done_Results_Future struct{ *capnp.Future }

func (f ByteStream_done_Results_Future) Struct() (ByteStream_done_Results, error) {
	p, err := f.Future.Ptr()
	return ByteStream_done_Results(p.Struct()), err
}

const schema_d4c9c9f76e88a0d2 = "x\xda\x94ROH\x14a\x1c\xfd\xbd\x99\xf9\x1c!\xd7" +
	"\xddi\xec \x94\x0ba\x10\x1e\xdcT\x0c\xf1\xb2\x9b\xb4" +
	"\xa8\xfd\x81\x19=\x8a\xe5\xc7\xee\x10[;\xb3\xd3\xec\x98" +
	"\x19H\x87\x0e\x99\xb0\xa7\x10S\xfa\x7f(2*\x8c." +
	"\x85Q\xd0!\xbc\xf6\x07\xa2nI\xa7\x0e\x1d\xfbC4" +
	"\xf1\x8d\xbb\xab\x10\x92{\xfbf\xde\xfb\xde{\xdf\xfb\xfd" +
	"\xf6\xbdEJ\xe9\x88\xdc\xa8'\xc9\xcc\xb2\xba\xa0g\xd2" +
	"\xf0\xf7+K\x17H\x8b\xcb\xc1\x9b\x9b\xd3\xce\xf7\x95\x95" +
	"wD\xe8\xeaV\x86\xa0\x0f**\x91\x9eV.\xea\xb3" +
	"\xe2\x14<\xcd\xfc4o\xdd\x9d*\x91\xb6\x17DLV" +
	"\x89\xba\xa6\x94\xdb \xe8%\xe5\x11!\xb8\xb4\xed\xf0\xb7" +
	"D\xdd\x8e%\xd2\xe2X\x97c\x10\xc4n\xd6\x07=\xcd" +
	"\x84\xe2\x01\x96$\x04\x9f\xaf\xce}i\x9ekY\xfe\xc7" +
	"\x9b\x0b\xe6\xe9\x90i\xb3~}V\x9c^\x1c{?\xe2" +
	"N^y\xae\xb5\x81H\x09\x8d\xd9c\x90\x12\\N\x7f" +
	"\xc8-l?\xf9\x91\xd6\x11\x9b=\x13\xc8\xfd{\xa9\xeb" +
	"\xd3\x9fV\xbf\xae!k!F\x05\x04\xdd\x0e\x03\xb4\x1c" +
	"\x1a\xfb\xbdzn\xf1O\xf99!\xa1\xc4\x16\x05\xe1\x1a" +
	"K\xd2r\xe0\x9e:\x91\xe0\xb9\x84\xabx\x853\xb9\xac" +
	"\xe5%\xdc\xf2\xa1=\xc3]\xc7\xed\xed\x9b\xf4\xada\xdf" +
	"\xb38l\x030\xebeFT\xb5\x85\xb3\xf4r\xa2k" +
	"\xe1\xf8\xbc\xd6\xd1I\x92\xb6G\x05*\x8f\xd8\x10\xba\xb9" +
	"\x8d$-\xa2\xc6'\xbc\x9co\xa5\x10\xcd\x16\x1c+\x05" +
	"\x03\xa8\x9a\xb3M\xcc\xfb-\xc7\xf2\xb8o\xb5gx>" +
	"\xdfjpO\xe5v\xd1l\x90\x15\"\x05DZ\xba\x97" +
	"\xc8L\xc90\x8fH\xd0\x80&\x88\x9f\x83}D\xe6A" +
	"\x19\xa6!A\x93\xa4&HD\xda\xd1N\"s@\x86" +
	"\x99\x95\x90t\xb9\xc7\xed\"bA\xcb\xcc|\xcf\xc0\xcc" +
	"\xc8+\" F8\x9f)8\xbeu\xd6G,h~" +
	"\xd03\xba\xf3\xe1\x9dR\x19\x89\xfb\x85B\xbe\x88F\x82" +
	"!\x03\xb1`\xec\xc9\xeb\x85]\xc3?~\x09\xb8\x91\xf0" +
	"\xdf\x16\x8d\xf2'\x89\x0e\x95j\xfeH\x1b\x91Y/\xc3" +
	"l\x92\x10u\xb8m\xa1\x81$4lA\xb0\xd2LY" +
	"\x90m\xd8\\Tf\xaei\xa2x\xa6FE{[+" +
	"\xbc:m\xbb]L\xa9\xd5\x88\x87U\xd5|o(i" +
	"\x15\xc7\xf3~M\x17\xc3\xf5hM\x1a\xa1\xe3f%e" +
	"\xb9\xcf\x11!\x09\x11\xaau}\x86\xacbTd\xda(" +
	"\xbd{]Z-\x8c\xfb\x95\xfa\xff\x06\x00\x00\xff\xff\x05" +
	"\xea@\xbf"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d2,
		Nodes: []uint64{
			0x83b1043674507938,
			0x8d7da7a151f963b9,
			0xb115062fef4b0b89,
			0xbc1e9719e5979ce2,
			0xbd009879705bd55e,
			0xda6a129a69d84593,
			0xebe3db889e40a9ab,
			0xfeaa7ae3fc604a1e,
		},
		Compressed: true,
	})
}
