// Code generated by capnpc-go. DO NOT EDIT.

package provider

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	context2 "github.com/theapemachine/caramba/pkg/ai/context"
	params "github.com/theapemachine/caramba/pkg/ai/params"
	tools "github.com/theapemachine/caramba/pkg/tools"
)

type Provider capnp.Struct

// Provider_TypeID is the unique identifier for the type Provider.
const Provider_TypeID = 0xb115062fef4b0b89

func NewProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func NewRootProvider(s *capnp.Segment) (Provider, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Provider(st), err
}

func ReadRootProvider(msg *capnp.Message) (Provider, error) {
	root, err := msg.Root()
	return Provider(root.Struct()), err
}

func (s Provider) String() string {
	str, _ := text.Marshal(0xb115062fef4b0b89, capnp.Struct(s))
	return str
}

func (s Provider) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Provider) DecodeFromPtr(p capnp.Ptr) Provider {
	return Provider(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Provider) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Provider) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Provider) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Provider) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Provider) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Provider) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Provider) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Provider) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Provider_List is a list of Provider.
type Provider_List = capnp.StructList[Provider]

// NewProvider creates a new list of Provider.
func NewProvider_List(s *capnp.Segment, sz int32) (Provider_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Provider](l), err
}

// Provider_Future is a wrapper for a Provider promised by a client call.
type Provider_Future struct{ *capnp.Future }

func (f Provider_Future) Struct() (Provider, error) {
	p, err := f.Future.Ptr()
	return Provider(p.Struct()), err
}

type Generate capnp.Client

// Generate_TypeID is the unique identifier for the type Generate.
const Generate_TypeID = 0xbc1e9719e5979ce2

func (c Generate) Call(ctx context.Context, params func(Generate_call_Params) error) (Generate_call_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "call",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Generate_call_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Generate_call_Results_Future{Future: ans.Future()}, release

}

func (c Generate) Stream(ctx context.Context, params func(Generate_stream_Params) error) (Generate_stream_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      1,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "stream",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 3}
		s.PlaceArgs = func(s capnp.Struct) error { return params(Generate_stream_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return Generate_stream_Results_Future{Future: ans.Future()}, release

}

func (c Generate) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c Generate) String() string {
	return "Generate(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c Generate) AddRef() Generate {
	return Generate(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c Generate) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c Generate) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c Generate) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (Generate) DecodeFromPtr(p capnp.Ptr) Generate {
	return Generate(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c Generate) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c Generate) IsSame(other Generate) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c Generate) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c Generate) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A Generate_Server is a Generate with a local implementation.
type Generate_Server interface {
	Call(context.Context, Generate_call) error

	Stream(context.Context, Generate_stream) error
}

// Generate_NewServer creates a new Server from an implementation of Generate_Server.
func Generate_NewServer(s Generate_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(Generate_Methods(nil, s), s, c)
}

// Generate_ServerToClient creates a new Client from an implementation of Generate_Server.
// The caller is responsible for calling Release on the returned Client.
func Generate_ServerToClient(s Generate_Server) Generate {
	return Generate(capnp.NewClient(Generate_NewServer(s)))
}

// Generate_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func Generate_Methods(methods []server.Method, s Generate_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      0,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "call",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Call(ctx, Generate_call{call})
		},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xbc1e9719e5979ce2,
			MethodID:      1,
			InterfaceName: "pkg/ai/provider/provider.capnp:Generate",
			MethodName:    "stream",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Stream(ctx, Generate_stream{call})
		},
	})

	return methods
}

// Generate_call holds the state for a server call to Generate.call.
// See server.Call for documentation.
type Generate_call struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Generate_call) Args() Generate_call_Params {
	return Generate_call_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Generate_call) AllocResults() (Generate_call_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(r), err
}

// Generate_stream holds the state for a server call to Generate.stream.
// See server.Call for documentation.
type Generate_stream struct {
	*server.Call
}

// Args returns the call's arguments.
func (c Generate_stream) Args() Generate_stream_Params {
	return Generate_stream_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c Generate_stream) AllocResults() (Generate_stream_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_stream_Results(r), err
}

// Generate_List is a list of Generate.
type Generate_List = capnp.CapList[Generate]

// NewGenerate_List creates a new list of Generate.
func NewGenerate_List(s *capnp.Segment, sz int32) (Generate_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[Generate](l), err
}

type Generate_call_Params capnp.Struct

// Generate_call_Params_TypeID is the unique identifier for the type Generate_call_Params.
const Generate_call_Params_TypeID = 0x8d7da7a151f963b9

func NewGenerate_call_Params(s *capnp.Segment) (Generate_call_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_call_Params(st), err
}

func NewRootGenerate_call_Params(s *capnp.Segment) (Generate_call_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_call_Params(st), err
}

func ReadRootGenerate_call_Params(msg *capnp.Message) (Generate_call_Params, error) {
	root, err := msg.Root()
	return Generate_call_Params(root.Struct()), err
}

func (s Generate_call_Params) String() string {
	str, _ := text.Marshal(0x8d7da7a151f963b9, capnp.Struct(s))
	return str
}

func (s Generate_call_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_call_Params) DecodeFromPtr(p capnp.Ptr) Generate_call_Params {
	return Generate_call_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_call_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_call_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_call_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_call_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_call_Params) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return params.Params(p.Struct()), err
}

func (s Generate_call_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_call_Params) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Generate_call_Params) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_call_Params) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return context2.Context(p.Struct()), err
}

func (s Generate_call_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Generate_call_Params) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Generate_call_Params) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_call_Params) Tools() (tools.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return tools.Tool_List(p.List()), err
}

func (s Generate_call_Params) HasTools() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Generate_call_Params) SetTools(v tools.Tool_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tools.Tool_List, preferring placement in s's segment.
func (s Generate_call_Params) NewTools(n int32) (tools.Tool_List, error) {
	l, err := tools.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tools.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Generate_call_Params_List is a list of Generate_call_Params.
type Generate_call_Params_List = capnp.StructList[Generate_call_Params]

// NewGenerate_call_Params creates a new list of Generate_call_Params.
func NewGenerate_call_Params_List(s *capnp.Segment, sz int32) (Generate_call_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Generate_call_Params](l), err
}

// Generate_call_Params_Future is a wrapper for a Generate_call_Params promised by a client call.
type Generate_call_Params_Future struct{ *capnp.Future }

func (f Generate_call_Params_Future) Struct() (Generate_call_Params, error) {
	p, err := f.Future.Ptr()
	return Generate_call_Params(p.Struct()), err
}
func (p Generate_call_Params_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(0, nil)}
}
func (p Generate_call_Params_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(1, nil)}
}

type Generate_call_Results capnp.Struct

// Generate_call_Results_TypeID is the unique identifier for the type Generate_call_Results.
const Generate_call_Results_TypeID = 0xfeaa7ae3fc604a1e

func NewGenerate_call_Results(s *capnp.Segment) (Generate_call_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(st), err
}

func NewRootGenerate_call_Results(s *capnp.Segment) (Generate_call_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_call_Results(st), err
}

func ReadRootGenerate_call_Results(msg *capnp.Message) (Generate_call_Results, error) {
	root, err := msg.Root()
	return Generate_call_Results(root.Struct()), err
}

func (s Generate_call_Results) String() string {
	str, _ := text.Marshal(0xfeaa7ae3fc604a1e, capnp.Struct(s))
	return str
}

func (s Generate_call_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_call_Results) DecodeFromPtr(p capnp.Ptr) Generate_call_Results {
	return Generate_call_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_call_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_call_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_call_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_call_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_call_Results) Out() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Generate_call_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_call_Results) OutBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Generate_call_Results) SetOut(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Generate_call_Results_List is a list of Generate_call_Results.
type Generate_call_Results_List = capnp.StructList[Generate_call_Results]

// NewGenerate_call_Results creates a new list of Generate_call_Results.
func NewGenerate_call_Results_List(s *capnp.Segment, sz int32) (Generate_call_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Generate_call_Results](l), err
}

// Generate_call_Results_Future is a wrapper for a Generate_call_Results promised by a client call.
type Generate_call_Results_Future struct{ *capnp.Future }

func (f Generate_call_Results_Future) Struct() (Generate_call_Results, error) {
	p, err := f.Future.Ptr()
	return Generate_call_Results(p.Struct()), err
}

type Generate_stream_Params capnp.Struct

// Generate_stream_Params_TypeID is the unique identifier for the type Generate_stream_Params.
const Generate_stream_Params_TypeID = 0xd3cd20884c685f8b

func NewGenerate_stream_Params(s *capnp.Segment) (Generate_stream_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_stream_Params(st), err
}

func NewRootGenerate_stream_Params(s *capnp.Segment) (Generate_stream_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return Generate_stream_Params(st), err
}

func ReadRootGenerate_stream_Params(msg *capnp.Message) (Generate_stream_Params, error) {
	root, err := msg.Root()
	return Generate_stream_Params(root.Struct()), err
}

func (s Generate_stream_Params) String() string {
	str, _ := text.Marshal(0xd3cd20884c685f8b, capnp.Struct(s))
	return str
}

func (s Generate_stream_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_stream_Params) DecodeFromPtr(p capnp.Ptr) Generate_stream_Params {
	return Generate_stream_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_stream_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_stream_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_stream_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_stream_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_stream_Params) Params() (params.Params, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return params.Params(p.Struct()), err
}

func (s Generate_stream_Params) HasParams() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_stream_Params) SetParams(v params.Params) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewParams sets the params field to a newly
// allocated params.Params struct, preferring placement in s's segment.
func (s Generate_stream_Params) NewParams() (params.Params, error) {
	ss, err := params.NewParams(capnp.Struct(s).Segment())
	if err != nil {
		return params.Params{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_stream_Params) Context() (context2.Context, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return context2.Context(p.Struct()), err
}

func (s Generate_stream_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Generate_stream_Params) SetContext(v context2.Context) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated context2.Context struct, preferring placement in s's segment.
func (s Generate_stream_Params) NewContext() (context2.Context, error) {
	ss, err := context2.NewContext(capnp.Struct(s).Segment())
	if err != nil {
		return context2.Context{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

func (s Generate_stream_Params) Tools() (tools.Tool_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return tools.Tool_List(p.List()), err
}

func (s Generate_stream_Params) HasTools() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Generate_stream_Params) SetTools(v tools.Tool_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewTools sets the tools field to a newly
// allocated tools.Tool_List, preferring placement in s's segment.
func (s Generate_stream_Params) NewTools(n int32) (tools.Tool_List, error) {
	l, err := tools.NewTool_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return tools.Tool_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}

// Generate_stream_Params_List is a list of Generate_stream_Params.
type Generate_stream_Params_List = capnp.StructList[Generate_stream_Params]

// NewGenerate_stream_Params creates a new list of Generate_stream_Params.
func NewGenerate_stream_Params_List(s *capnp.Segment, sz int32) (Generate_stream_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[Generate_stream_Params](l), err
}

// Generate_stream_Params_Future is a wrapper for a Generate_stream_Params promised by a client call.
type Generate_stream_Params_Future struct{ *capnp.Future }

func (f Generate_stream_Params_Future) Struct() (Generate_stream_Params, error) {
	p, err := f.Future.Ptr()
	return Generate_stream_Params(p.Struct()), err
}
func (p Generate_stream_Params_Future) Params() params.Params_Future {
	return params.Params_Future{Future: p.Future.Field(0, nil)}
}
func (p Generate_stream_Params_Future) Context() context2.Context_Future {
	return context2.Context_Future{Future: p.Future.Field(1, nil)}
}

type Generate_stream_Results capnp.Struct

// Generate_stream_Results_TypeID is the unique identifier for the type Generate_stream_Results.
const Generate_stream_Results_TypeID = 0xda9aa7c5b85459af

func NewGenerate_stream_Results(s *capnp.Segment) (Generate_stream_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_stream_Results(st), err
}

func NewRootGenerate_stream_Results(s *capnp.Segment) (Generate_stream_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Generate_stream_Results(st), err
}

func ReadRootGenerate_stream_Results(msg *capnp.Message) (Generate_stream_Results, error) {
	root, err := msg.Root()
	return Generate_stream_Results(root.Struct()), err
}

func (s Generate_stream_Results) String() string {
	str, _ := text.Marshal(0xda9aa7c5b85459af, capnp.Struct(s))
	return str
}

func (s Generate_stream_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Generate_stream_Results) DecodeFromPtr(p capnp.Ptr) Generate_stream_Results {
	return Generate_stream_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Generate_stream_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Generate_stream_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Generate_stream_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Generate_stream_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Generate_stream_Results) Out() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Generate_stream_Results) HasOut() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Generate_stream_Results) OutBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Generate_stream_Results) SetOut(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

// Generate_stream_Results_List is a list of Generate_stream_Results.
type Generate_stream_Results_List = capnp.StructList[Generate_stream_Results]

// NewGenerate_stream_Results creates a new list of Generate_stream_Results.
func NewGenerate_stream_Results_List(s *capnp.Segment, sz int32) (Generate_stream_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Generate_stream_Results](l), err
}

// Generate_stream_Results_Future is a wrapper for a Generate_stream_Results promised by a client call.
type Generate_stream_Results_Future struct{ *capnp.Future }

func (f Generate_stream_Results_Future) Struct() (Generate_stream_Results, error) {
	p, err := f.Future.Ptr()
	return Generate_stream_Results(p.Struct()), err
}

const schema_d4c9c9f76e88a0d2 = "x\xda\xcc\x92Kh\x13Q\x14\x86\xcf\x7f\xef\x9dN\xc1" +
	">rI\\\x044\x11\xa9 ]4\xd6nJ6\x09" +
	"E\xb1j\x85\xb9\xd5\x85\"b\x87t\xd0`\x1e\xc3\xcc" +
	"DT\x10\x97\xd6J\x17.$X\\\x18A\x0b\x05-" +
	"\x11\x17*n\x8a\x88Tp\xe1c\xa3K\xc5\x85+q" +
	"\xe5\x03q\xe4\xc6$\x0d\x88\x90\xa5\xbb3s\xbe9\xff" +
	"\x9c\xff?;\x9e#+F\xfb\xab&1u\xd8\xe8\x09" +
	"\x1f\xe6\xbe\xab\xda\xd2\xf9\x05\x92\xdbAdp\x93h\xac" +
	"\xceo\x82\x10]\xe5+\x84\xf0\xd2\x86\xfd\x9fS=\x1b" +
	"\xeb$\x93\x08_\xdd\x98+}][{C\x064\x98" +
	"\x17\x13\x88\x9e\x15&Q\xb4\"2\x84\xf0\xfd\xf5\xea\xc7" +
	"x5\xf1\x98d\x92\xaf\xc3\x84\xb1\xab\x9a\xbc\xd5 k" +
	"\xe2b\xf4\x8b\xae\xc2\xcb\xc7ON\xcdmy\xf1\xbaS" +
	"\xfb\xad\xb8\xa7\xb5?\x09\xad\xbdr\xe4\xd0\x83\xa7K\x8b" +
	"\xef\x9a@C\xf3\x8a\xf1H\x035C\xeb%\xf6\xcd\xfc" +
	"\xfcpn\xf9W'\xb0j,k\xe0\xa5\x91\xa1z\xe8" +
	"\x9e:\x91\xb2\xf3)\xd7\xf0\xca\xa7\xf3\xb3\x8e\x97r\x9b" +
	"\xc5H\xcevKnz\x8fSr<;pFrv" +
	"\xa10d\xd9\x9ei\x17}\xd5\xc7\x05\x91\x00\x91\xdc\x9d" +
	"&RY\x0e5\xc5 \x81\x18\xf4\xcb\xbd\x13Dj\x17" +
	"\x87\xb2\x18$c10\"y`'\x91\x9a\xe4P\xb3" +
	"\x0c\x19\xd7\xf6\xec\xa2\x8fH\x98\x98\xbf6>9\x7f\xf4" +
	"\x09\x11\x10!\\\xc8\x95K\x81s&@$\x8c\xdf\x19" +
	"?\xb6\xe9\xee\xed\x85f'\x19\x94\xcb\x05\x1f\x03\x04\x8b" +
	"\x03\x91p\xe6\xfe\xb3\xc5\xcd\x07\xbf\xfd\xd0\xed\x01B{" +
	"\x11\xf1\x8fE\xac\xe6#Y\x80\x12\xed\xff\xef\x1f&R" +
	"\xbd\x1c*\xc60X\xb2\x8b\x0e\xfa\x88\xa1\xaf\x8b\x81-" +
	"g\x1a\x03{\xb9A\xd4\xbe\x15\xb4l\x97\xa3\xc3\xc4\xe4" +
	"6\x13hg\x89Vf2\x9e&&\xfb\xcdA\xedl" +
	"\x16\x19?\xf0\x1c\xbb\x98\x85\x05t\x9f\xca\x9f\x8f\x86\xac" +
	"d\xc3\xcf\xff9\x97nW\x99\xce8~\xa5\x10\xf8\x9d" +
	"\x19m]\xcf\xc8,W\x82\xbf\"\xea\xeex\xa7\x1d\x7f" +
	"\xb0\xcb\xc9\xbf\x03\x00\x00\xff\xff\xe2Y\x1bB"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d2,
		Nodes: []uint64{
			0x8d7da7a151f963b9,
			0xb115062fef4b0b89,
			0xbc1e9719e5979ce2,
			0xd3cd20884c685f8b,
			0xda9aa7c5b85459af,
			0xfeaa7ae3fc604a1e,
		},
		Compressed: true,
	})
}
