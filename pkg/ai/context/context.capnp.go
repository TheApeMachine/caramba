// Code generated by capnpc-go. DO NOT EDIT.

package context

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	fc "capnproto.org/go/capnp/v3/flowcontrol"
	schemas "capnproto.org/go/capnp/v3/schemas"
	server "capnproto.org/go/capnp/v3/server"
	context "context"
	message "github.com/theapemachine/caramba/pkg/ai/message"
)

type Context capnp.Struct

// Context_TypeID is the unique identifier for the type Context.
const Context_TypeID = 0x8da6ae1c5d38ad19

func NewContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func NewRootContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func ReadRootContext(msg *capnp.Message) (Context, error) {
	root, err := msg.Root()
	return Context(root.Struct()), err
}

func (s Context) String() string {
	str, _ := text.Marshal(0x8da6ae1c5d38ad19, capnp.Struct(s))
	return str
}

func (s Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Context) DecodeFromPtr(p capnp.Ptr) Context {
	return Context(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Context) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Context) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Context) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Context) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Context) Messages() (message.Message_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return message.Message_List(p.List()), err
}

func (s Context) HasMessages() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Context) SetMessages(v message.Message_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated message.Message_List, preferring placement in s's segment.
func (s Context) NewMessages(n int32) (message.Message_List, error) {
	l, err := message.NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return message.Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Context_List is a list of Context.
type Context_List = capnp.StructList[Context]

// NewContext creates a new list of Context.
func NewContext_List(s *capnp.Segment, sz int32) (Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Context](l), err
}

// Context_Future is a wrapper for a Context promised by a client call.
type Context_Future struct{ *capnp.Future }

func (f Context_Future) Struct() (Context, error) {
	p, err := f.Future.Ptr()
	return Context(p.Struct()), err
}

type RPC capnp.Client

// RPC_TypeID is the unique identifier for the type RPC.
const RPC_TypeID = 0x9e385e152a2b60e6

func (c RPC) Add(ctx context.Context, params func(RPC_add_Params) error) (RPC_add_Results_Future, capnp.ReleaseFunc) {

	s := capnp.Send{
		Method: capnp.Method{
			InterfaceID:   0x9e385e152a2b60e6,
			MethodID:      0,
			InterfaceName: "pkg/ai/context/context.capnp:RPC",
			MethodName:    "add",
		},
	}
	if params != nil {
		s.ArgsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		s.PlaceArgs = func(s capnp.Struct) error { return params(RPC_add_Params(s)) }
	}

	ans, release := capnp.Client(c).SendCall(ctx, s)
	return RPC_add_Results_Future{Future: ans.Future()}, release

}

func (c RPC) WaitStreaming() error {
	return capnp.Client(c).WaitStreaming()
}

// String returns a string that identifies this capability for debugging
// purposes.  Its format should not be depended on: in particular, it
// should not be used to compare clients.  Use IsSame to compare clients
// for equality.
func (c RPC) String() string {
	return "RPC(" + capnp.Client(c).String() + ")"
}

// AddRef creates a new Client that refers to the same capability as c.
// If c is nil or has resolved to null, then AddRef returns nil.
func (c RPC) AddRef() RPC {
	return RPC(capnp.Client(c).AddRef())
}

// Release releases a capability reference.  If this is the last
// reference to the capability, then the underlying resources associated
// with the capability will be released.
//
// Release will panic if c has already been released, but not if c is
// nil or resolved to null.
func (c RPC) Release() {
	capnp.Client(c).Release()
}

// Resolve blocks until the capability is fully resolved or the Context
// expires.
func (c RPC) Resolve(ctx context.Context) error {
	return capnp.Client(c).Resolve(ctx)
}

func (c RPC) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Client(c).EncodeAsPtr(seg)
}

func (RPC) DecodeFromPtr(p capnp.Ptr) RPC {
	return RPC(capnp.Client{}.DecodeFromPtr(p))
}

// IsValid reports whether c is a valid reference to a capability.
// A reference is invalid if it is nil, has resolved to null, or has
// been released.
func (c RPC) IsValid() bool {
	return capnp.Client(c).IsValid()
}

// IsSame reports whether c and other refer to a capability created by the
// same call to NewClient.  This can return false negatives if c or other
// are not fully resolved: use Resolve if this is an issue.  If either
// c or other are released, then IsSame panics.
func (c RPC) IsSame(other RPC) bool {
	return capnp.Client(c).IsSame(capnp.Client(other))
}

// Update the flowcontrol.FlowLimiter used to manage flow control for
// this client. This affects all future calls, but not calls already
// waiting to send. Passing nil sets the value to flowcontrol.NopLimiter,
// which is also the default.
func (c RPC) SetFlowLimiter(lim fc.FlowLimiter) {
	capnp.Client(c).SetFlowLimiter(lim)
}

// Get the current flowcontrol.FlowLimiter used to manage flow control
// for this client.
func (c RPC) GetFlowLimiter() fc.FlowLimiter {
	return capnp.Client(c).GetFlowLimiter()
}

// A RPC_Server is a RPC with a local implementation.
type RPC_Server interface {
	Add(context.Context, RPC_add) error
}

// RPC_NewServer creates a new Server from an implementation of RPC_Server.
func RPC_NewServer(s RPC_Server) *server.Server {
	c, _ := s.(server.Shutdowner)
	return server.New(RPC_Methods(nil, s), s, c)
}

// RPC_ServerToClient creates a new Client from an implementation of RPC_Server.
// The caller is responsible for calling Release on the returned Client.
func RPC_ServerToClient(s RPC_Server) RPC {
	return RPC(capnp.NewClient(RPC_NewServer(s)))
}

// RPC_Methods appends Methods to a slice that invoke the methods on s.
// This can be used to create a more complicated Server.
func RPC_Methods(methods []server.Method, s RPC_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9e385e152a2b60e6,
			MethodID:      0,
			InterfaceName: "pkg/ai/context/context.capnp:RPC",
			MethodName:    "add",
		},
		Impl: func(ctx context.Context, call *server.Call) error {
			return s.Add(ctx, RPC_add{call})
		},
	})

	return methods
}

// RPC_add holds the state for a server call to RPC.add.
// See server.Call for documentation.
type RPC_add struct {
	*server.Call
}

// Args returns the call's arguments.
func (c RPC_add) Args() RPC_add_Params {
	return RPC_add_Params(c.Call.Args())
}

// AllocResults allocates the results struct.
func (c RPC_add) AllocResults() (RPC_add_Results, error) {
	r, err := c.Call.AllocResults(capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RPC_add_Results(r), err
}

// RPC_List is a list of RPC.
type RPC_List = capnp.CapList[RPC]

// NewRPC_List creates a new list of RPC.
func NewRPC_List(s *capnp.Segment, sz int32) (RPC_List, error) {
	l, err := capnp.NewPointerList(s, sz)
	return capnp.CapList[RPC](l), err
}

type RPC_add_Params capnp.Struct

// RPC_add_Params_TypeID is the unique identifier for the type RPC_add_Params.
const RPC_add_Params_TypeID = 0x85b9c67de8f212e2

func NewRPC_add_Params(s *capnp.Segment) (RPC_add_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_add_Params(st), err
}

func NewRootRPC_add_Params(s *capnp.Segment) (RPC_add_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RPC_add_Params(st), err
}

func ReadRootRPC_add_Params(msg *capnp.Message) (RPC_add_Params, error) {
	root, err := msg.Root()
	return RPC_add_Params(root.Struct()), err
}

func (s RPC_add_Params) String() string {
	str, _ := text.Marshal(0x85b9c67de8f212e2, capnp.Struct(s))
	return str
}

func (s RPC_add_Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_add_Params) DecodeFromPtr(p capnp.Ptr) RPC_add_Params {
	return RPC_add_Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_add_Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_add_Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_add_Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_add_Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s RPC_add_Params) Context() (message.Message, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return message.Message(p.Struct()), err
}

func (s RPC_add_Params) HasContext() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s RPC_add_Params) SetContext(v message.Message) error {
	return capnp.Struct(s).SetPtr(0, capnp.Struct(v).ToPtr())
}

// NewContext sets the context field to a newly
// allocated message.Message struct, preferring placement in s's segment.
func (s RPC_add_Params) NewContext() (message.Message, error) {
	ss, err := message.NewMessage(capnp.Struct(s).Segment())
	if err != nil {
		return message.Message{}, err
	}
	err = capnp.Struct(s).SetPtr(0, capnp.Struct(ss).ToPtr())
	return ss, err
}

// RPC_add_Params_List is a list of RPC_add_Params.
type RPC_add_Params_List = capnp.StructList[RPC_add_Params]

// NewRPC_add_Params creates a new list of RPC_add_Params.
func NewRPC_add_Params_List(s *capnp.Segment, sz int32) (RPC_add_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[RPC_add_Params](l), err
}

// RPC_add_Params_Future is a wrapper for a RPC_add_Params promised by a client call.
type RPC_add_Params_Future struct{ *capnp.Future }

func (f RPC_add_Params_Future) Struct() (RPC_add_Params, error) {
	p, err := f.Future.Ptr()
	return RPC_add_Params(p.Struct()), err
}
func (p RPC_add_Params_Future) Context() message.Message_Future {
	return message.Message_Future{Future: p.Future.Field(0, nil)}
}

type RPC_add_Results capnp.Struct

// RPC_add_Results_TypeID is the unique identifier for the type RPC_add_Results.
const RPC_add_Results_TypeID = 0xeb16dc828e4a2ccc

func NewRPC_add_Results(s *capnp.Segment) (RPC_add_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RPC_add_Results(st), err
}

func NewRootRPC_add_Results(s *capnp.Segment) (RPC_add_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return RPC_add_Results(st), err
}

func ReadRootRPC_add_Results(msg *capnp.Message) (RPC_add_Results, error) {
	root, err := msg.Root()
	return RPC_add_Results(root.Struct()), err
}

func (s RPC_add_Results) String() string {
	str, _ := text.Marshal(0xeb16dc828e4a2ccc, capnp.Struct(s))
	return str
}

func (s RPC_add_Results) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (RPC_add_Results) DecodeFromPtr(p capnp.Ptr) RPC_add_Results {
	return RPC_add_Results(capnp.Struct{}.DecodeFromPtr(p))
}

func (s RPC_add_Results) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s RPC_add_Results) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s RPC_add_Results) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s RPC_add_Results) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}

// RPC_add_Results_List is a list of RPC_add_Results.
type RPC_add_Results_List = capnp.StructList[RPC_add_Results]

// NewRPC_add_Results creates a new list of RPC_add_Results.
func NewRPC_add_Results_List(s *capnp.Segment, sz int32) (RPC_add_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return capnp.StructList[RPC_add_Results](l), err
}

// RPC_add_Results_Future is a wrapper for a RPC_add_Results promised by a client call.
type RPC_add_Results_Future struct{ *capnp.Future }

func (f RPC_add_Results_Future) Struct() (RPC_add_Results, error) {
	p, err := f.Future.Ptr()
	return RPC_add_Results(p.Struct()), err
}

const schema_d4c9c9f76e88a0d6 = "x\xda\x12\xb8\xec\xc0b\xc8\xab\xce\xc2\xc0\x14h\xc0\xca" +
	"\xf6\xff\x91\xd0\xa7\x17\xb5\xc7v\xb62\x08*220" +
	"\xb02\xb230\x18\xffdLbd`\x14fe\xb2" +
	"g`\xfc/\xb9\xd6\"Vf\xdd\xb2^\x06AY\xc6" +
	"\xff\xd7\x16t\xe4}?y\xf2\x0aT\xa1*\x93\x16\xa3" +
	"\xb0)\x13;\x03\x83\xb0!X\xf1\xb3\x04m-\xd18" +
	"\x8by\x0c\x82\xb2\xcc\x08\xc5\x0c\x8c\xc6\xa9L\\\x8c\xc2" +
	"\xa5`\x95\x85L\xee\xc23A\xac\xffgt\xbc\xfa\x9a" +
	"\xee\x88\xbd\x86\xd8\xcd\x022\xb1\x91)\x8b\x91!\xe6\x7f" +
	"Av\xba~b\xa6~2K~^IjE\x89~" +
	"2\x84\xd6KN,\xc8+\xb0\x0a\x0ap\xd6KLI" +
	"Q\x09H,bO\xcc-\x0edafa``a" +
	"d`\x10\xe4ub`\x08\xe4`f\x0c\x14ab\xac" +
	"\x87jb\x14\xf8?\xcf\xfbcF\x8d\xacC\x13\x03\x03" +
	"#\xa3\x00\x03#\xdcxf\xac\xc6;\xe7\xe7\xf1\x83\xb8" +
	"\x01\x8c\x8c\xc8F{10\x04\xf203\x06j01" +
	"\xfe\xcfM-.NLO-f```\xe4c`" +
	"\x0c`fD\xb3\x85\x8f\xa0-A\x01\xce\x0c\x0c\x10+" +
	"X\x19\x18\xe0\xf1\xc0\x08\x0b\x14AA%\x06&AV" +
	"v\xf6\xc4\x94\x14\x07\xc6\x00FF\"\x03%(\xb5\x98" +
	"\xbf4\xa7\xa4\x18\x10\x00\x00\xff\xff\xf1O\x8c\xde"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d6,
		Nodes: []uint64{
			0x85b9c67de8f212e2,
			0x8da6ae1c5d38ad19,
			0x9e385e152a2b60e6,
			0xeb16dc828e4a2ccc,
		},
		Compressed: true,
	})
}
