// Code generated by capnpc-go. DO NOT EDIT.

package context

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Context capnp.Struct

// Context_TypeID is the unique identifier for the type Context.
const Context_TypeID = 0x8da6ae1c5d38ad19

func NewContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func NewRootContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func ReadRootContext(msg *capnp.Message) (Context, error) {
	root, err := msg.Root()
	return Context(root.Struct()), err
}

func (s Context) String() string {
	str, _ := text.Marshal(0x8da6ae1c5d38ad19, capnp.Struct(s))
	return str
}

func (s Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Context) DecodeFromPtr(p capnp.Ptr) Context {
	return Context(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Context) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Context) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Context) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Context) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Context) Messages() (Message_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Message_List(p.List()), err
}

func (s Context) HasMessages() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Context) SetMessages(v Message_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated Message_List, preferring placement in s's segment.
func (s Context) NewMessages(n int32) (Message_List, error) {
	l, err := NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Context_List is a list of Context.
type Context_List = capnp.StructList[Context]

// NewContext creates a new list of Context.
func NewContext_List(s *capnp.Segment, sz int32) (Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Context](l), err
}

// Context_Future is a wrapper for a Context promised by a client call.
type Context_Future struct{ *capnp.Future }

func (f Context_Future) Struct() (Context, error) {
	p, err := f.Future.Ptr()
	return Context(p.Struct()), err
}

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xe90861c5d4cfaaf3

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xe90861c5d4cfaaf3, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Message) ToolCalls() (ToolCall_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ToolCall_List(p.List()), err
}

func (s Message) HasToolCalls() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Message) SetToolCalls(v ToolCall_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewToolCalls sets the toolCalls field to a newly
// allocated ToolCall_List, preferring placement in s's segment.
func (s Message) NewToolCalls(n int32) (ToolCall_List, error) {
	l, err := NewToolCall_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ToolCall_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type ToolCall capnp.Struct

// ToolCall_TypeID is the unique identifier for the type ToolCall.
const ToolCall_TypeID = 0xe1d6183538446661

func NewToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func NewRootToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func ReadRootToolCall(msg *capnp.Message) (ToolCall, error) {
	root, err := msg.Root()
	return ToolCall(root.Struct()), err
}

func (s ToolCall) String() string {
	str, _ := text.Marshal(0xe1d6183538446661, capnp.Struct(s))
	return str
}

func (s ToolCall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCall) DecodeFromPtr(p capnp.Ptr) ToolCall {
	return ToolCall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCall) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCall) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCall) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCall) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCall) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCall) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ToolCall) Arguments() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ToolCall) HasArguments() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ToolCall) ArgumentsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ToolCall) SetArguments(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ToolCall_List is a list of ToolCall.
type ToolCall_List = capnp.StructList[ToolCall]

// NewToolCall creates a new list of ToolCall.
func NewToolCall_List(s *capnp.Segment, sz int32) (ToolCall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ToolCall](l), err
}

// ToolCall_Future is a wrapper for a ToolCall promised by a client call.
type ToolCall_Future struct{ *capnp.Future }

func (f ToolCall_Future) Struct() (ToolCall, error) {
	p, err := f.Future.Ptr()
	return ToolCall(p.Struct()), err
}

type Prompt capnp.Struct

// Prompt_TypeID is the unique identifier for the type Prompt.
const Prompt_TypeID = 0xecd2d80fbc3d4cb2

func NewPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func NewRootPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func ReadRootPrompt(msg *capnp.Message) (Prompt, error) {
	root, err := msg.Root()
	return Prompt(root.Struct()), err
}

func (s Prompt) String() string {
	str, _ := text.Marshal(0xecd2d80fbc3d4cb2, capnp.Struct(s))
	return str
}

func (s Prompt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Prompt) DecodeFromPtr(p capnp.Ptr) Prompt {
	return Prompt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Prompt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Prompt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Prompt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Prompt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Prompt) Fragments() (Fragment_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Fragment_List(p.List()), err
}

func (s Prompt) HasFragments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Prompt) SetFragments(v Fragment_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFragments sets the fragments field to a newly
// allocated Fragment_List, preferring placement in s's segment.
func (s Prompt) NewFragments(n int32) (Fragment_List, error) {
	l, err := NewFragment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Fragment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Prompt_List is a list of Prompt.
type Prompt_List = capnp.StructList[Prompt]

// NewPrompt creates a new list of Prompt.
func NewPrompt_List(s *capnp.Segment, sz int32) (Prompt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Prompt](l), err
}

// Prompt_Future is a wrapper for a Prompt promised by a client call.
type Prompt_Future struct{ *capnp.Future }

func (f Prompt_Future) Struct() (Prompt, error) {
	p, err := f.Future.Ptr()
	return Prompt(p.Struct()), err
}

type Fragment capnp.Struct

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xc0a11b3da670e56e

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.Root()
	return Fragment(root.Struct()), err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xc0a11b3da670e56e, capnp.Struct(s))
	return str
}

func (s Fragment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Fragment) DecodeFromPtr(p capnp.Ptr) Fragment {
	return Fragment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Fragment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Fragment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Fragment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Fragment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Fragment) Template() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Fragment) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Fragment) TemplateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Fragment) SetTemplate(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Fragment) Variables() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Fragment) HasVariables() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Fragment) SetVariables(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVariables sets the variables field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Fragment) NewVariables(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Fragment_List is a list of Fragment.
type Fragment_List = capnp.StructList[Fragment]

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Fragment](l), err
}

// Fragment_Future is a wrapper for a Fragment promised by a client call.
type Fragment_Future struct{ *capnp.Future }

func (f Fragment_Future) Struct() (Fragment, error) {
	p, err := f.Future.Ptr()
	return Fragment(p.Struct()), err
}

const schema_d4c9c9f76e88a0d6 = "x\xda\x8c\x93\xc1K\x14a\x18\xc6\xdf\xe7\xfb\xc6\xf4\xb0" +
	"\xdb:\xcc\x1e\xb2\x92\x85\xe8`\x0b\xb5j\x09\x12\x88\x96" +
	"\x1a\x14+\xec'\x11]:|m\xe3\xb24;3\xcc" +
	"\x8e\xe5\xa1(A\xc1@\xa1?\xa1.\x12A\x05A\xb7" +
	"\x0eu\xf0\xe0)\x08\x91.\x1d:t\x10\xea\xd4\xa1\xe3" +
	"\x17\xef,;n\x8bd\xa7\x99y\xe7\x99\xf9\xfd\xde\x97" +
	"\xf7\x1b\xbe\x81)k$[\x90$\xd4\xe9\x9e#f\xe0" +
	"\xd5\xf8\xad\x93\xaf77\xc8\x1e\x84\xd9}\xb6\xe6\xff\xde" +
	"\xde\xde\xa1\x1e\xf4\x12\x9d_D\x11\xce*\xdf:\xcb\x98" +
	"$\x18\xff{\xb89q\xe2\xf9\x87\xae\xb0\xe0\xf0;\x8c" +
	"\xc2\xd9J\xc2\x1fq\x9f`\xf4\xc2\xcc\xf8\xd8\xb1\xddo" +
	"]a\xc9\xe111\x0ag\x96\xbfs.\x897\x04\xf3" +
	"\xeb\xe5\xa7\x9d-\xdd\xb7\xd7\x15\xee\xe1\xf0WQ\x84\xf3" +
	"3\x81\xec\x89\x02\x08\xe6my\xe2}\xee\xcb\xe7\x1f\x07" +
	"Ig\xadSp\x06-\xfe\xf5\x805IgMx\xb7" +
	"V\xd2\xf5RU\x06~\xec.\xc5\xa5j\xebz\xae\xaa" +
	"C?\xbc8\x1d\xf89~\xac\x00\xca\x92\x16\x91\x05\"" +
	";{\x8dHe$\xd4\x90\x80i\xb8\xcd\xa6\xae\xb9M" +
	"\"\xc2QBE\x02\xfd\xfb\xc2\x04.\x1eB\xb9\x12\xe9" +
	"B\xad\xe1\xfa\x09\xa6/\xc5\x9ca\xcc\x90\x84\xba `" +
	"\x03ypqd\x9eH\x0dK\xa8\xb2\x80\x89\xddF\xe8" +
	"\xe9\xd8ev\x86\x042\x04sOGu}\xdbs\x09" +
	"\xcd\xb6\x0f\xbf:\xdc\xe2z\x10\x14\xbci\xedyl\x91" +
	"I-f\x8f\x13\xa9\xa9\x160\xb5\xb8Z$R3\x12" +
	"\xaa\"`\x0b\x91\x87 \xb2\xe7X\xad,\xa1n\x0a\xc8" +
	"\xfa\x9d\xb6Q\xce\xd7\x0d7\xd5\xd3Qm\x91[e\xbd" +
	"v\xed\xdf^sn3\xc7\x13f\xad|\xaa\xf5\x90\xb5" +
	"\x96$\xd4J\x87\xd62k=\x90Pk\x1dZ\xab\\" +
	"|,\xa1\xd6\x05l)\xf3\x90D\xf6\x93\xcbDjE" +
	"B=\x15\xb0-+\x0f\x8b\xc8\xde\xe0\x06\xd6%\xd4\x8b" +
	"\xbf\x1b\x88\x02\xcf=\xb0\x9bG\x89\xa9\x1f\xa7\x9d\xc4A" +
	"\x90\x8c\xb0c\xf8\xfd\xfb\xab\xfe_\xcbP\x89\x82\xdeF" +
	"\xd8\xbdq\xf3\x1d\x1b\xb7\x10\xe9Z{\x84)$=|" +
	"-\xc8\x9f\x00\x00\x00\xff\xff\xe5H\xeb\x8a"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d6,
		Nodes: []uint64{
			0x8da6ae1c5d38ad19,
			0xc0a11b3da670e56e,
			0xe1d6183538446661,
			0xe90861c5d4cfaaf3,
			0xecd2d80fbc3d4cb2,
		},
		Compressed: true,
	})
}
