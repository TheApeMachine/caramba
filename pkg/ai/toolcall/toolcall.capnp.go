// Code generated by capnpc-go. DO NOT EDIT.

package toolcall

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type ToolCall capnp.Struct

// ToolCall_TypeID is the unique identifier for the type ToolCall.
const ToolCall_TypeID = 0x8b700e24af87dc51

func NewToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func NewRootToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func ReadRootToolCall(msg *capnp.Message) (ToolCall, error) {
	root, err := msg.Root()
	return ToolCall(root.Struct()), err
}

func (s ToolCall) String() string {
	str, _ := text.Marshal(0x8b700e24af87dc51, capnp.Struct(s))
	return str
}

func (s ToolCall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCall) DecodeFromPtr(p capnp.Ptr) ToolCall {
	return ToolCall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCall) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCall) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCall) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCall) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCall) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCall) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ToolCall) Arguments() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ToolCall) HasArguments() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ToolCall) ArgumentsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ToolCall) SetArguments(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ToolCall_List is a list of ToolCall.
type ToolCall_List = capnp.StructList[ToolCall]

// NewToolCall creates a new list of ToolCall.
func NewToolCall_List(s *capnp.Segment, sz int32) (ToolCall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ToolCall](l), err
}

// ToolCall_Future is a wrapper for a ToolCall promised by a client call.
type ToolCall_Future struct{ *capnp.Future }

func (f ToolCall_Future) Struct() (ToolCall, error) {
	p, err := f.Future.Ptr()
	return ToolCall(p.Struct()), err
}

const schema_d4c9c9f76e88a0e0 = "x\xda4\xc8=J\x03A\x18\xc6\xf1\xe7ygb\x9a" +
	"\xf5c`+\x1b\x1b+A\x97\xb4V\xc1\x8fB\x88\x90" +
	"W,l\x87\x18Bp23\xc4\xf5\x0c\x0a^\xc2\x1b" +
	"\xe4\x08V\x16)\x05\xed,\xbc\x85\xe5\x88\xe0v\xff\xff" +
	"og9\xb4\x83\xcdWB\xb4\xeem\x14\xfdz\\\xed" +
	"o\xe5g\xb8=\x96\xef\x97\xa7\xf8\xb3^\x7f\xa0g\xfa" +
	"\xc0\xe0\xed\x84\xee\xb3\x0f\xb8\xf7\x15\x0eK\xbe\x9b5~" +
	"\xde\xb46\xa50\xf1!4\xed\x7f\x1cM|\x8e\xf9\xf8" +
	":\xa5p\xeaC\xc0\x98\xd4\xcaX\xc0\x12p\xe7\xbb\x80" +
	"\x0e\x0du$td\xcd?\xbc8\x00\xf4\xccP\xc7B" +
	"'RS\x00wy\x05\xe8\xc8Po\x84f~\xcb\x0a" +
	"\xc2\x0a\xdc\x8e~1\xed\xa6\xf8\xe5\xeca1\x8d-x" +
	"\xdf\xd9o\x00\x00\x00\xff\xff\x87\xaa/\xc0"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0e0,
		Nodes: []uint64{
			0x8b700e24af87dc51,
		},
		Compressed: true,
	})
}
