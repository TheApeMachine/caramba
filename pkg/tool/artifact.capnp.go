// Code generated by capnpc-go. DO NOT EDIT.

package tool

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
)

type Artifact capnp.Struct

// Artifact_TypeID is the unique identifier for the type Artifact.
const Artifact_TypeID = 0xab4a445b6ca25109

func NewArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact(st), err
}

func NewRootArtifact(s *capnp.Segment) (Artifact, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Artifact(st), err
}

func ReadRootArtifact(msg *capnp.Message) (Artifact, error) {
	root, err := msg.Root()
	return Artifact(root.Struct()), err
}

func (s Artifact) String() string {
	str, _ := text.Marshal(0xab4a445b6ca25109, capnp.Struct(s))
	return str
}

func (s Artifact) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Artifact) DecodeFromPtr(p capnp.Ptr) Artifact {
	return Artifact(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Artifact) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Artifact) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Artifact) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Artifact) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Artifact) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Artifact) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Artifact) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Artifact) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Artifact) Function() (Function, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Function(p.Struct()), err
}

func (s Artifact) HasFunction() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Artifact) SetFunction(v Function) error {
	return capnp.Struct(s).SetPtr(1, capnp.Struct(v).ToPtr())
}

// NewFunction sets the function field to a newly
// allocated Function struct, preferring placement in s's segment.
func (s Artifact) NewFunction() (Function, error) {
	ss, err := NewFunction(capnp.Struct(s).Segment())
	if err != nil {
		return Function{}, err
	}
	err = capnp.Struct(s).SetPtr(1, capnp.Struct(ss).ToPtr())
	return ss, err
}

// Artifact_List is a list of Artifact.
type Artifact_List = capnp.StructList[Artifact]

// NewArtifact creates a new list of Artifact.
func NewArtifact_List(s *capnp.Segment, sz int32) (Artifact_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Artifact](l), err
}

// Artifact_Future is a wrapper for a Artifact promised by a client call.
type Artifact_Future struct{ *capnp.Future }

func (f Artifact_Future) Struct() (Artifact, error) {
	p, err := f.Future.Ptr()
	return Artifact(p.Struct()), err
}
func (p Artifact_Future) Function() Function_Future {
	return Function_Future{Future: p.Future.Field(1, nil)}
}

type Function capnp.Struct

// Function_TypeID is the unique identifier for the type Function.
const Function_TypeID = 0xb4f2e9966017d77d

func NewFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Function(st), err
}

func NewRootFunction(s *capnp.Segment) (Function, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Function(st), err
}

func ReadRootFunction(msg *capnp.Message) (Function, error) {
	root, err := msg.Root()
	return Function(root.Struct()), err
}

func (s Function) String() string {
	str, _ := text.Marshal(0xb4f2e9966017d77d, capnp.Struct(s))
	return str
}

func (s Function) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Function) DecodeFromPtr(p capnp.Ptr) Function {
	return Function(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Function) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Function) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Function) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Function) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Function) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Function) HasName() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Function) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Function) SetName(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Function) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Function) HasDescription() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Function) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Function) SetDescription(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Function) Parameters() (Parameter_List, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return Parameter_List(p.List()), err
}

func (s Function) HasParameters() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Function) SetParameters(v Parameter_List) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewParameters sets the parameters field to a newly
// allocated Parameter_List, preferring placement in s's segment.
func (s Function) NewParameters(n int32) (Parameter_List, error) {
	l, err := NewParameter_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Parameter_List{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Function) Strict() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Function) SetStrict(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Function_List is a list of Function.
type Function_List = capnp.StructList[Function]

// NewFunction creates a new list of Function.
func NewFunction_List(s *capnp.Segment, sz int32) (Function_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Function](l), err
}

// Function_Future is a wrapper for a Function promised by a client call.
type Function_Future struct{ *capnp.Future }

func (f Function_Future) Struct() (Function, error) {
	p, err := f.Future.Ptr()
	return Function(p.Struct()), err
}

type Parameter capnp.Struct

// Parameter_TypeID is the unique identifier for the type Parameter.
const Parameter_TypeID = 0x939a10a4cf344c26

func NewParameter(s *capnp.Segment) (Parameter, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Parameter(st), err
}

func NewRootParameter(s *capnp.Segment) (Parameter, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return Parameter(st), err
}

func ReadRootParameter(msg *capnp.Message) (Parameter, error) {
	root, err := msg.Root()
	return Parameter(root.Struct()), err
}

func (s Parameter) String() string {
	str, _ := text.Marshal(0x939a10a4cf344c26, capnp.Struct(s))
	return str
}

func (s Parameter) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Parameter) DecodeFromPtr(p capnp.Ptr) Parameter {
	return Parameter(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Parameter) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Parameter) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Parameter) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Parameter) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Parameter) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Parameter) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Parameter) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Parameter) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Parameter) Properties() (Property_List, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return Property_List(p.List()), err
}

func (s Parameter) HasProperties() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Parameter) SetProperties(v Property_List) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewProperties sets the properties field to a newly
// allocated Property_List, preferring placement in s's segment.
func (s Parameter) NewProperties(n int32) (Property_List, error) {
	l, err := NewProperty_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Property_List{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}
func (s Parameter) Required() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return capnp.TextList(p.List()), err
}

func (s Parameter) HasRequired() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Parameter) SetRequired(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(2, v.ToPtr())
}

// NewRequired sets the required field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Parameter) NewRequired(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(2, l.ToPtr())
	return l, err
}
func (s Parameter) AdditionalProperties() bool {
	return capnp.Struct(s).Bit(0)
}

func (s Parameter) SetAdditionalProperties(v bool) {
	capnp.Struct(s).SetBit(0, v)
}

// Parameter_List is a list of Parameter.
type Parameter_List = capnp.StructList[Parameter]

// NewParameter creates a new list of Parameter.
func NewParameter_List(s *capnp.Segment, sz int32) (Parameter_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return capnp.StructList[Parameter](l), err
}

// Parameter_Future is a wrapper for a Parameter promised by a client call.
type Parameter_Future struct{ *capnp.Future }

func (f Parameter_Future) Struct() (Parameter, error) {
	p, err := f.Future.Ptr()
	return Parameter(p.Struct()), err
}

type Property capnp.Struct

// Property_TypeID is the unique identifier for the type Property.
const Property_TypeID = 0xe90b6b61a9e9d351

func NewProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func NewRootProperty(s *capnp.Segment) (Property, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return Property(st), err
}

func ReadRootProperty(msg *capnp.Message) (Property, error) {
	root, err := msg.Root()
	return Property(root.Struct()), err
}

func (s Property) String() string {
	str, _ := text.Marshal(0xe90b6b61a9e9d351, capnp.Struct(s))
	return str
}

func (s Property) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Property) DecodeFromPtr(p capnp.Ptr) Property {
	return Property(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Property) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Property) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Property) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Property) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Property) Type() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Property) HasType() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Property) TypeBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Property) SetType(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Property) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Property) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Property) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Property) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Property) Description() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Property) HasDescription() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Property) DescriptionBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Property) SetDescription(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Property) Enum() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return capnp.TextList(p.List()), err
}

func (s Property) HasEnum() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Property) SetEnum(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(3, v.ToPtr())
}

// NewEnum sets the enum field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Property) NewEnum(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(3, l.ToPtr())
	return l, err
}

// Property_List is a list of Property.
type Property_List = capnp.StructList[Property]

// NewProperty creates a new list of Property.
func NewProperty_List(s *capnp.Segment, sz int32) (Property_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return capnp.StructList[Property](l), err
}

// Property_Future is a wrapper for a Property promised by a client call.
type Property_Future struct{ *capnp.Future }

func (f Property_Future) Struct() (Property, error) {
	p, err := f.Future.Ptr()
	return Property(p.Struct()), err
}

const schema_e363a5839bf866c9 = "x\xda\x8c\x92\xbfk\x14A\x1c\xc5\xdf\x9b\xef\xc5\xd3\x18" +
	"\xbd[\xf7\xc0\x94\x16\"\x18\x8c\x89h!iT\x10\xc1" +
	"`qSXD-\xb2\xee\xce\x99%\xf7c\xb37\x87" +
	"\x04\x0c\x04D\xb0\xb0\x13%h'\xb1P[[K\x91" +
	"\x14\"\"\xe2\x1f`\x11\xae\xb5\xb2[\x99\xe4\xbc[\x0f" +
	"5\xd7\xdd\xcd\xbey\xf3\xfd|ff#^,\x9c9" +
	"\xf4AA\xe9cc\xfb\xb2\x13\xd7\xce}\xda,?{" +
	"\x0c=If[\xb5\x9f\xcf\xef\xbf\x0c\xbfcL\x8a\xc0" +
	"\xd9\xab<B\x7f\x81E\xc0\xbf\xcem0;\xa0_\xd4" +
	"o^\x9e\x7f\x03o2\x1fV.\xbc\xa0\xc6\xe9\xc7\xee" +
	"\xa7o\xd4]0[\xfbvt\xf1i\xf7\xc7\xdb\xbfV" +
	"\xbfw\xe9\xaf;\xe9\xcf\xcaU\xeb/\xddW\xc1\xf2\xc1" +
	"\xeePu\xc1\x85\xdf\xc98\xfd\x8fn\x9f\xbf%\xdb\x98" +
	"\xce\x92\xe5;3\xb6\xd5\xaa\xcbL\x90\xda\xb8\x16\x84\xf6" +
	"t\x18$\xcdd\xae\x1a\xa4A\xc3X\xc3\xb4J\xea\xb2" +
	"\x14\x80\x02\x01/\x98\x02\xf4-\xa1^R\xf4\xc8\x0a\xdd" +
	"\xa2\xb9\x01\xe8H\xa8\xd7\x15=\xa5*T\x80\xb76\x0f" +
	"\xe8{B\xbd\xa1H\xa9P\x00\xef\xc9k@o\x08\xf5" +
	"\xa6b\xc9\xae&\x86\x13P\x9c\x00\xb3$m%&\xb5" +
	"1\xc4\xb4y\x18\xac\x0aY\x1e\xb0\x80n1K\xcdJ" +
	"'NM\x04\xe0w\xc8\x15\xb8OA\x14\xc56n5" +
	"\x19\xd4\xab;]%\x1b\x9b6\x09E\xba\xfe\x7f\x81^" +
	"\xea\xfd\x05\x1c\xe8\xfe>\xe8I\x07z\\\xa8gs\xa0" +
	"\xd3\x8e\xe9\x94P\x9f\x1f\x9e\xbf\xd6i\x86\xeex7Y" +
	"ypc \xcb\xff;\xfdJ\x7f\xdb(\x9ao\xf74" +
	"'9\xcd\x0d\xe7\xbe.\xd4\x0f\x07\x9a\x1f\xcc\x01z]" +
	"\xa8\x1f)\x96\x9aAc0fd\xdaa\x1a'\x16E" +
	"\xa7\xaa/\xbfw\xd9\x904'\xbf\xff\xa2w\xe5_h" +
	"\xdb4\x0e\xed\xdeFw\xf5\xdb\xd5\xd1\x98\xdc\xe2\xa2P" +
	"\xd7sL\xb1\x03]\x12j\xab\xe8I\x0fjej\x00" +
	"\xfa\x87\xfb\x11\x08K\xa6\xd9i\x0c\xbd\x98_\x01\x00\x00" +
	"\xff\xff\xde\xec\xdeG"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_e363a5839bf866c9,
		Nodes: []uint64{
			0x939a10a4cf344c26,
			0xab4a445b6ca25109,
			0xb4f2e9966017d77d,
			0xe90b6b61a9e9d351,
		},
		Compressed: true,
	})
}
