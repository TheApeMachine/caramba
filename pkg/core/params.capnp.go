// Code generated by capnpc-go. DO NOT EDIT.

package core

import (
	capnp "capnproto.org/go/capnp/v3"
	text "capnproto.org/go/capnp/v3/encoding/text"
	schemas "capnproto.org/go/capnp/v3/schemas"
	math "math"
)

type Params capnp.Struct

// Params_TypeID is the unique identifier for the type Params.
const Params_TypeID = 0xc35b8a4838998a1e

func NewParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1})
	return Params(st), err
}

func NewRootParams(s *capnp.Segment) (Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1})
	return Params(st), err
}

func ReadRootParams(msg *capnp.Message) (Params, error) {
	root, err := msg.Root()
	return Params(root.Struct()), err
}

func (s Params) String() string {
	str, _ := text.Marshal(0xc35b8a4838998a1e, capnp.Struct(s))
	return str
}

func (s Params) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Params) DecodeFromPtr(p capnp.Ptr) Params {
	return Params(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Params) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Params) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Params) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Params) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Params) Model() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Params) HasModel() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Params) ModelBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Params) SetModel(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Params) Temperature() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(0))
}

func (s Params) SetTemperature(v float64) {
	capnp.Struct(s).SetUint64(0, math.Float64bits(v))
}

func (s Params) TopP() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(8))
}

func (s Params) SetTopP(v float64) {
	capnp.Struct(s).SetUint64(8, math.Float64bits(v))
}

func (s Params) TopK() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(16))
}

func (s Params) SetTopK(v float64) {
	capnp.Struct(s).SetUint64(16, math.Float64bits(v))
}

func (s Params) FrequencyPenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(24))
}

func (s Params) SetFrequencyPenalty(v float64) {
	capnp.Struct(s).SetUint64(24, math.Float64bits(v))
}

func (s Params) PresencePenalty() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(32))
}

func (s Params) SetPresencePenalty(v float64) {
	capnp.Struct(s).SetUint64(32, math.Float64bits(v))
}

func (s Params) MaxTokens() float64 {
	return math.Float64frombits(capnp.Struct(s).Uint64(40))
}

func (s Params) SetMaxTokens(v float64) {
	capnp.Struct(s).SetUint64(40, math.Float64bits(v))
}

func (s Params) Stream() bool {
	return capnp.Struct(s).Bit(384)
}

func (s Params) SetStream(v bool) {
	capnp.Struct(s).SetBit(384, v)
}

// Params_List is a list of Params.
type Params_List = capnp.StructList[Params]

// NewParams creates a new list of Params.
func NewParams_List(s *capnp.Segment, sz int32) (Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 56, PointerCount: 1}, sz)
	return capnp.StructList[Params](l), err
}

// Params_Future is a wrapper for a Params promised by a client call.
type Params_Future struct{ *capnp.Future }

func (f Params_Future) Struct() (Params, error) {
	p, err := f.Future.Ptr()
	return Params(p.Struct()), err
}

type Context capnp.Struct

// Context_TypeID is the unique identifier for the type Context.
const Context_TypeID = 0xc4988bf74b7fea06

func NewContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func NewRootContext(s *capnp.Segment) (Context, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Context(st), err
}

func ReadRootContext(msg *capnp.Message) (Context, error) {
	root, err := msg.Root()
	return Context(root.Struct()), err
}

func (s Context) String() string {
	str, _ := text.Marshal(0xc4988bf74b7fea06, capnp.Struct(s))
	return str
}

func (s Context) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Context) DecodeFromPtr(p capnp.Ptr) Context {
	return Context(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Context) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Context) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Context) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Context) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Context) Messages() (Message_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Message_List(p.List()), err
}

func (s Context) HasMessages() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Context) SetMessages(v Message_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewMessages sets the messages field to a newly
// allocated Message_List, preferring placement in s's segment.
func (s Context) NewMessages(n int32) (Message_List, error) {
	l, err := NewMessage_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Message_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Context_List is a list of Context.
type Context_List = capnp.StructList[Context]

// NewContext creates a new list of Context.
func NewContext_List(s *capnp.Segment, sz int32) (Context_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Context](l), err
}

// Context_Future is a wrapper for a Context promised by a client call.
type Context_Future struct{ *capnp.Future }

func (f Context_Future) Struct() (Context, error) {
	p, err := f.Future.Ptr()
	return Context(p.Struct()), err
}

type Message capnp.Struct

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xa7211ac23c45f770

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return Message(st), err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.Root()
	return Message(root.Struct()), err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xa7211ac23c45f770, capnp.Struct(s))
	return str
}

func (s Message) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Message) DecodeFromPtr(p capnp.Ptr) Message {
	return Message(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Message) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Message) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Message) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Message) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Message) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Message) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Message) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Message) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Message) Role() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s Message) HasRole() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Message) RoleBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s Message) SetRole(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s Message) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s Message) HasName() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s Message) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s Message) SetName(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

func (s Message) Content() (string, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.Text(), err
}

func (s Message) HasContent() bool {
	return capnp.Struct(s).HasPtr(3)
}

func (s Message) ContentBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(3)
	return p.TextBytes(), err
}

func (s Message) SetContent(v string) error {
	return capnp.Struct(s).SetText(3, v)
}

func (s Message) ToolCalls() (ToolCall_List, error) {
	p, err := capnp.Struct(s).Ptr(4)
	return ToolCall_List(p.List()), err
}

func (s Message) HasToolCalls() bool {
	return capnp.Struct(s).HasPtr(4)
}

func (s Message) SetToolCalls(v ToolCall_List) error {
	return capnp.Struct(s).SetPtr(4, v.ToPtr())
}

// NewToolCalls sets the toolCalls field to a newly
// allocated ToolCall_List, preferring placement in s's segment.
func (s Message) NewToolCalls(n int32) (ToolCall_List, error) {
	l, err := NewToolCall_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return ToolCall_List{}, err
	}
	err = capnp.Struct(s).SetPtr(4, l.ToPtr())
	return l, err
}

// Message_List is a list of Message.
type Message_List = capnp.StructList[Message]

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return capnp.StructList[Message](l), err
}

// Message_Future is a wrapper for a Message promised by a client call.
type Message_Future struct{ *capnp.Future }

func (f Message_Future) Struct() (Message, error) {
	p, err := f.Future.Ptr()
	return Message(p.Struct()), err
}

type ToolCall capnp.Struct

// ToolCall_TypeID is the unique identifier for the type ToolCall.
const ToolCall_TypeID = 0xdf6b47aab873a4d7

func NewToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func NewRootToolCall(s *capnp.Segment) (ToolCall, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3})
	return ToolCall(st), err
}

func ReadRootToolCall(msg *capnp.Message) (ToolCall, error) {
	root, err := msg.Root()
	return ToolCall(root.Struct()), err
}

func (s ToolCall) String() string {
	str, _ := text.Marshal(0xdf6b47aab873a4d7, capnp.Struct(s))
	return str
}

func (s ToolCall) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (ToolCall) DecodeFromPtr(p capnp.Ptr) ToolCall {
	return ToolCall(capnp.Struct{}.DecodeFromPtr(p))
}

func (s ToolCall) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s ToolCall) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s ToolCall) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s ToolCall) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s ToolCall) Id() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s ToolCall) HasId() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s ToolCall) IdBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s ToolCall) SetId(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s ToolCall) Name() (string, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.Text(), err
}

func (s ToolCall) HasName() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s ToolCall) NameBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return p.TextBytes(), err
}

func (s ToolCall) SetName(v string) error {
	return capnp.Struct(s).SetText(1, v)
}

func (s ToolCall) Arguments() (string, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.Text(), err
}

func (s ToolCall) HasArguments() bool {
	return capnp.Struct(s).HasPtr(2)
}

func (s ToolCall) ArgumentsBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(2)
	return p.TextBytes(), err
}

func (s ToolCall) SetArguments(v string) error {
	return capnp.Struct(s).SetText(2, v)
}

// ToolCall_List is a list of ToolCall.
type ToolCall_List = capnp.StructList[ToolCall]

// NewToolCall creates a new list of ToolCall.
func NewToolCall_List(s *capnp.Segment, sz int32) (ToolCall_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 3}, sz)
	return capnp.StructList[ToolCall](l), err
}

// ToolCall_Future is a wrapper for a ToolCall promised by a client call.
type ToolCall_Future struct{ *capnp.Future }

func (f ToolCall_Future) Struct() (ToolCall, error) {
	p, err := f.Future.Ptr()
	return ToolCall(p.Struct()), err
}

type Prompt capnp.Struct

// Prompt_TypeID is the unique identifier for the type Prompt.
const Prompt_TypeID = 0x99f7aed34a9b04d8

func NewPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func NewRootPrompt(s *capnp.Segment) (Prompt, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Prompt(st), err
}

func ReadRootPrompt(msg *capnp.Message) (Prompt, error) {
	root, err := msg.Root()
	return Prompt(root.Struct()), err
}

func (s Prompt) String() string {
	str, _ := text.Marshal(0x99f7aed34a9b04d8, capnp.Struct(s))
	return str
}

func (s Prompt) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Prompt) DecodeFromPtr(p capnp.Ptr) Prompt {
	return Prompt(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Prompt) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Prompt) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Prompt) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Prompt) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Prompt) Fragments() (Fragment_List, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return Fragment_List(p.List()), err
}

func (s Prompt) HasFragments() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Prompt) SetFragments(v Fragment_List) error {
	return capnp.Struct(s).SetPtr(0, v.ToPtr())
}

// NewFragments sets the fragments field to a newly
// allocated Fragment_List, preferring placement in s's segment.
func (s Prompt) NewFragments(n int32) (Fragment_List, error) {
	l, err := NewFragment_List(capnp.Struct(s).Segment(), n)
	if err != nil {
		return Fragment_List{}, err
	}
	err = capnp.Struct(s).SetPtr(0, l.ToPtr())
	return l, err
}

// Prompt_List is a list of Prompt.
type Prompt_List = capnp.StructList[Prompt]

// NewPrompt creates a new list of Prompt.
func NewPrompt_List(s *capnp.Segment, sz int32) (Prompt_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return capnp.StructList[Prompt](l), err
}

// Prompt_Future is a wrapper for a Prompt promised by a client call.
type Prompt_Future struct{ *capnp.Future }

func (f Prompt_Future) Struct() (Prompt, error) {
	p, err := f.Future.Ptr()
	return Prompt(p.Struct()), err
}

type Fragment capnp.Struct

// Fragment_TypeID is the unique identifier for the type Fragment.
const Fragment_TypeID = 0xc2a4b36a6028513d

func NewFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func NewRootFragment(s *capnp.Segment) (Fragment, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return Fragment(st), err
}

func ReadRootFragment(msg *capnp.Message) (Fragment, error) {
	root, err := msg.Root()
	return Fragment(root.Struct()), err
}

func (s Fragment) String() string {
	str, _ := text.Marshal(0xc2a4b36a6028513d, capnp.Struct(s))
	return str
}

func (s Fragment) EncodeAsPtr(seg *capnp.Segment) capnp.Ptr {
	return capnp.Struct(s).EncodeAsPtr(seg)
}

func (Fragment) DecodeFromPtr(p capnp.Ptr) Fragment {
	return Fragment(capnp.Struct{}.DecodeFromPtr(p))
}

func (s Fragment) ToPtr() capnp.Ptr {
	return capnp.Struct(s).ToPtr()
}
func (s Fragment) IsValid() bool {
	return capnp.Struct(s).IsValid()
}

func (s Fragment) Message() *capnp.Message {
	return capnp.Struct(s).Message()
}

func (s Fragment) Segment() *capnp.Segment {
	return capnp.Struct(s).Segment()
}
func (s Fragment) Template() (string, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.Text(), err
}

func (s Fragment) HasTemplate() bool {
	return capnp.Struct(s).HasPtr(0)
}

func (s Fragment) TemplateBytes() ([]byte, error) {
	p, err := capnp.Struct(s).Ptr(0)
	return p.TextBytes(), err
}

func (s Fragment) SetTemplate(v string) error {
	return capnp.Struct(s).SetText(0, v)
}

func (s Fragment) Variables() (capnp.TextList, error) {
	p, err := capnp.Struct(s).Ptr(1)
	return capnp.TextList(p.List()), err
}

func (s Fragment) HasVariables() bool {
	return capnp.Struct(s).HasPtr(1)
}

func (s Fragment) SetVariables(v capnp.TextList) error {
	return capnp.Struct(s).SetPtr(1, v.ToPtr())
}

// NewVariables sets the variables field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Fragment) NewVariables(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(capnp.Struct(s).Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = capnp.Struct(s).SetPtr(1, l.ToPtr())
	return l, err
}

// Fragment_List is a list of Fragment.
type Fragment_List = capnp.StructList[Fragment]

// NewFragment creates a new list of Fragment.
func NewFragment_List(s *capnp.Segment, sz int32) (Fragment_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return capnp.StructList[Fragment](l), err
}

// Fragment_Future is a wrapper for a Fragment promised by a client call.
type Fragment_Future struct{ *capnp.Future }

func (f Fragment_Future) Struct() (Fragment, error) {
	p, err := f.Future.Ptr()
	return Fragment(p.Struct()), err
}

const schema_d4c9c9f76e88a0d4 = "x\xda|TMh$U\x10\xae\xef\xbd\xee\x99\x95\x9d" +
	"ul\xa6\xdd\xc3\x1e\x1c\xbd\x8d\x82\xee\xc6\xf5 \x8b2" +
	"\x8bk\xfc\xc9\x0f\xcc39\x08^|\x99\xbc\x0c1\xfd" +
	"\x97\xee\x8eI@I\x94\x04bL@o\x06/\x06\x02" +
	"\x1a!z\xf0\xe29\x0a\x12\xf0\"F\xcc\xc1\x10\x05\x03" +
	"1'\x0d\xc2h\x08\xb4\xbc\x99Lg2\x98\xdc\xba\xaa" +
	">\xaa\xbe\xfa\xdeW}k\x0fw\x8d\xaek\x93\x9c\x98" +
	"(\x99\x99d\xc7\xf8\xb8\xe7\xc7/\xea+d]G\xb2" +
	"\xfd\xc9\x82W\xdf\xda\xda&\x13Y\xa2\xc2*\x0e\x0b\x1b" +
	"\x8d\xafu\x94\x09IP\xef~f\xf3\xc6#\x9fv`" +
	"M\x8d\xd8\xc5Q\xe1\x0f\x8d\xbd\xbd\x8f\"\x08\xc9\xb3\xa2" +
	"\xf4\xfa\x1b_\xadmv\x80\x99\x06\xdf\xc7\x8f\x0b\x0fr" +
	"\xfde\xf1IB\xf2\xd0\xe2\xca\xd3/-\xbe\xf6\x0d\x89" +
	"\xeb\xc8v\xb2\x98\xe7\x87\x85\x0f5\xf8\xf62\xffNw" +
	"\xce\x1c\xce\xf4\xd6\xdf\xff\xe8\xdb\xff\xa3\xac\xcc\xa3\xc2x" +
	"\x83\x90kj\xca?\xafE_\x7f\xfe\xe2\xd8^\x07\xb6" +
	"1{\xd5<.l4\xb0\xeb\xe6\x97\xf4x\x12\x8c\xd5" +
	"nV\xfdP\xb1\x9b\x81\x0c\xa5\x1b=Q\x95\x81\x17\xdc" +
	"\xa9\x84y\xdf\x0d\xe2\x0a \x0cn\x10\x19 \xb2\xae\xbd" +
	"B$r\x1c\xa2\xc4\x90\x8c\x84\xb2\xe6*/&D\xb8" +
	"\x9fP\xe1\xc0\x03g\xfb\x13t\xf2\xa2\xee\xfd\xaa\x18E" +
	"\xb2\xa6t{;m\xff\xf6\x0d\"1\xc5!\xe6\x18," +
	"\xc0\x86N\xbe\xf3\x18\x91x\x8bC,0X\x8c\xd9`" +
	"D\xd6\xbcN\xcer\x88%\x06\x8bs\x1b\x9c\xc8z\xef" +
	"9\"1\xc7!>`\xb0\x0c\xc3\x86Ad-k\xca" +
	"K\x1c\xe23\x06>:\x8c\x1c1\xe4\x08\xf9\xd0wT" +
	"\x1ax\xd2M\x83\x99\xaa\xef\xc5\xca\x8b[q\x12\xfb\xbe" +
	"sO:\xce\xb9=S\x85/\xdf\xf3\x85\xb0\xdc\x14I" +
	"/z%]\xf4\xd1\x1e\"Q\xe2\x10O\xb5-\xda\xa5" +
	"\x99\xde\xe2\x10}\x0cI\xac\xdc\xc0\x91\xb1\"\xa2\x94\xc8" +
	"\x9b2\x1c\x95C\x8ej#\xa2K\x97\x8c\xaf\xc8\xbc\x8e" +
	"\xf4\xf0\x87\xd3\xe1?<I$\xbe\xe7\x10;\x0c\xad\xd9" +
	"?\x0d\x11\x89m\x0e\xf1\xab\x16\x19M\x91w\xb5\xc8;" +
	"\x1c\xe2w-2k\x8a\xfc\x9bN\xfe\xc2!\x0e\xb4\xc8" +
	"\xbc)\xf2\xfe\"\x918\xe0\x10\x7f3X\xa6a\xc3$" +
	"\xb2\xfez\x97H\xfc\xc9!N\x18\xac\x8ci#Cd" +
	"\xfd\xab\x97\xfc\x87c\xc0\x00CWv\x16v\xc3\xc0\xc0" +
	"\x1d\"q\xc21p\x05\x0cE\xd7\x1fV\xce\xd9\x03(" +
	"7P\xa1\x8c);\x11*\\%\x86\xab\x84|\xec\x07" +
	"\x95\xf6\xa0\xb7\x15$#\xa1\x1a\x9fP^\x15\xd3\x15\xe5" +
	"I'\x9e&JkA\xa8\"\xe5U\x15Z\xa5\xb4\xe2" +
	"\xca\xa9A\x7fLyZ\xdd\xd3\\9\x8aC%]\x80" +
	"\x18p\xb1\xca\xf7\xfc\xa2\x17\xab\xa9\xce[\xe9i\xbb\x15" +
	"W5\xec\x1e\xe9\xe7L=\x94\xfeX.\xf7\xd0\xa0_" +
	"n\x1aP\xf7\xcf\xa5\xfd\xbb\xf5\xb1\xdcm\xda%\xf5\xd0" +
	"\xcb\xfau\x9e\xe7\x10\x95\xb6c\xe9\xd7\x9a\xf7q\x88W" +
	"\xcf\x9f@\xbb\xeb\x13\x19\xd6&Z\xd7|\x9a\xfb/\x00" +
	"\x00\xff\xff6w=\xef"

func RegisterSchema(reg *schemas.Registry) {
	reg.Register(&schemas.Schema{
		String: schema_d4c9c9f76e88a0d4,
		Nodes: []uint64{
			0x99f7aed34a9b04d8,
			0xa7211ac23c45f770,
			0xc2a4b36a6028513d,
			0xc35b8a4838998a1e,
			0xc4988bf74b7fea06,
			0xdf6b47aab873a4d7,
		},
		Compressed: true,
	})
}
