package stream

import (
	"context"

	"github.com/theapemachine/caramba/provider"
)

/*
Accumulator is a wrapper for a provider Event stream which has both
a direct throughput, and an accumulating buffer. This allows you to
take advantage of both real-time feedback flow, like output to a
user, or frontend of some kind, while also being able to use the
full output once the provider model is finished generating a response.
*/
type Accumulator struct {
	chunks []provider.Event
}

func NewAccumulator() *Accumulator {
	return &Accumulator{}
}

func (accumulator *Accumulator) Generate(ctx context.Context, in <-chan provider.Event) <-chan provider.Event {
	out := make(chan provider.Event)

	go func() {
		defer close(out)
		for event := range in {
			accumulator.chunks = append(accumulator.chunks, event)
			out <- event
		}
	}()

	return out
}

/*
Compile the chunks into a single provider Event, which can be used to evaluate
or process the completed response that was generated by the provider model.
*/
func (accumulator *Accumulator) Compile() provider.Event {
	out := provider.Event{}

	for _, chunk := range accumulator.chunks {
		out.Text += chunk.Text
		out.PartialJSON += chunk.PartialJSON
	}

	return out
}
